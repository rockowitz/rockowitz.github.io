{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ddcutil and ddcui Announcements 17 January 2023 ddcutil release 1.4.1 fixes a critical bug in release 1.4.0. The default sleep-multiplier value was 0 instead of 1. As a result, commands that did not have an explcit --sleep-multiplier option would fail. All users of release 1.4.0 should upgrade. Thanks to github users copysiper (Oleg Tsvetkov) and fionnb for their help in quickly identifying and resolving this bug. 13 January 2023 ddcutil release 1.4.0 contains the following changes of general interest: ddcutil installation now installs a udev rule that gives the logged on user read/write access to I2C devices associated with video monitors. Use of group i2c for granting permission to non-root users is, in general, no longer needed. Use of driver i2c-dev's file io interface (read()/write()), removed in release 1.3.0, has been restored. When i2c-dev's ioctl() interface is used the the Nvidia proprietary driver, depending on how the driver was built, it is possible for display detection to fail. If the Nvidia failure is detected, ddcutil switches to using the read()/write() interface for the Nvidia driver. In this case option --force-slave-address may be needed to handle EBUSY errors. For all other video drivers, the ioctl() interface is used and --force-slave-address has no effect. For a detailed description of ddcutil changes and bug fixes, see Release Notes . Prebuilt packages for several Linux distributions and machine architectures can be found in the ususal locations . Prior announcements can be found here . Introduction ddcutil is a Linux program for managing monitor settings, such as brightness, color levels, and input source. Generally speaking, any setting that can be changed by pressing buttons on the monitor can be modified by ddcutil . ddcutil primarily uses DDC/CI (Display Data Channel Command Interface) to communicate with monitors implementing MCCS (Monitor Control Command Set) over I2C. Normally, the video driver for the monitor exposes the I2C channel as devices named /dev/i2c-n. Alternatively, there is support for monitors (such as Eizo ColorEdge displays) that implement MCCS using a USB connection. See USB Connected Monitors . A particular use case for ddcutil , and the one that inspired its development, is as part of color profile management. Monitor calibration is relative to the monitor color settings currently in effect, e.g. red gain. ddcutil allows color related settings to be saved at the time a monitor is calibrated, and then restored when the calibration is applied. Restrictions: ddcutil does not support laptop displays, which are controlled using a special API, not I2C. Generally speaking, ddcutil can be built in a virtual machine, but will not run in a VM. This is because the virtual video drivers do not implement I2C. However, if the VM is connected to a separate video card and is running a non-virtualized driver for the card in passthru mode, then ddcutil will work. Nvidia's proprietary video driver may require special configuration. See Special Nvidia Driver Settings . Reading and writing Table type features is implemented but untested. See Table Features ddcutil is released under the GNU Public License, V2 (GPLV2). The source is hosted on Github . General support questions are best directed to the issue tracker on Github. Use of that forum allows everyone to benefit from individual questions and ideas. For details, see Technical Support . ddcui ddcui is a graphical user interface to ddcutil , built using Qt. It is currently beta level code. For further information, see ddcui Overview . ddcui is released under the GNU Public License, V2 (GPLV2). The source is hosted on Github . ddcui questions should also be directed the to the ddcutil issue tracker on Github. Topics Using ddcutil : Command Overview Command Output Examples Monitor Control Command Set Color Management Commands and Options: Detailed command and option documentation Installation and Configuration: Post-Installation Checklist Install ddcutil From Prebuilt Packages Building From Source Configuration and Installation Diagnostics Other: Frequently Asked Questions Technical Support Releases Release Notes Announcement History Virtual Machines Comparison with ddccontrol Notes on Specific Monitors DDC Null Response APIs Articles about ddcutil References Acknowledgements Packaging Status In Distribution Repositories For packages maintained by ddcutil , see Installing ddcutil and ddcui from Prebuilt Packages ddcutil Status ddcui Status Author Sanford Rockowitz rockowitz@minsoft.com","title":"Introduction"},{"location":"#ddcutil-and-ddcui","text":"","title":"ddcutil and ddcui"},{"location":"#announcements","text":"17 January 2023 ddcutil release 1.4.1 fixes a critical bug in release 1.4.0. The default sleep-multiplier value was 0 instead of 1. As a result, commands that did not have an explcit --sleep-multiplier option would fail. All users of release 1.4.0 should upgrade. Thanks to github users copysiper (Oleg Tsvetkov) and fionnb for their help in quickly identifying and resolving this bug. 13 January 2023 ddcutil release 1.4.0 contains the following changes of general interest: ddcutil installation now installs a udev rule that gives the logged on user read/write access to I2C devices associated with video monitors. Use of group i2c for granting permission to non-root users is, in general, no longer needed. Use of driver i2c-dev's file io interface (read()/write()), removed in release 1.3.0, has been restored. When i2c-dev's ioctl() interface is used the the Nvidia proprietary driver, depending on how the driver was built, it is possible for display detection to fail. If the Nvidia failure is detected, ddcutil switches to using the read()/write() interface for the Nvidia driver. In this case option --force-slave-address may be needed to handle EBUSY errors. For all other video drivers, the ioctl() interface is used and --force-slave-address has no effect. For a detailed description of ddcutil changes and bug fixes, see Release Notes . Prebuilt packages for several Linux distributions and machine architectures can be found in the ususal locations . Prior announcements can be found here .","title":"Announcements"},{"location":"#introduction","text":"ddcutil is a Linux program for managing monitor settings, such as brightness, color levels, and input source. Generally speaking, any setting that can be changed by pressing buttons on the monitor can be modified by ddcutil . ddcutil primarily uses DDC/CI (Display Data Channel Command Interface) to communicate with monitors implementing MCCS (Monitor Control Command Set) over I2C. Normally, the video driver for the monitor exposes the I2C channel as devices named /dev/i2c-n. Alternatively, there is support for monitors (such as Eizo ColorEdge displays) that implement MCCS using a USB connection. See USB Connected Monitors . A particular use case for ddcutil , and the one that inspired its development, is as part of color profile management. Monitor calibration is relative to the monitor color settings currently in effect, e.g. red gain. ddcutil allows color related settings to be saved at the time a monitor is calibrated, and then restored when the calibration is applied. Restrictions: ddcutil does not support laptop displays, which are controlled using a special API, not I2C. Generally speaking, ddcutil can be built in a virtual machine, but will not run in a VM. This is because the virtual video drivers do not implement I2C. However, if the VM is connected to a separate video card and is running a non-virtualized driver for the card in passthru mode, then ddcutil will work. Nvidia's proprietary video driver may require special configuration. See Special Nvidia Driver Settings . Reading and writing Table type features is implemented but untested. See Table Features ddcutil is released under the GNU Public License, V2 (GPLV2). The source is hosted on Github . General support questions are best directed to the issue tracker on Github. Use of that forum allows everyone to benefit from individual questions and ideas. For details, see Technical Support .","title":"Introduction"},{"location":"#ddcui","text":"ddcui is a graphical user interface to ddcutil , built using Qt. It is currently beta level code. For further information, see ddcui Overview . ddcui is released under the GNU Public License, V2 (GPLV2). The source is hosted on Github . ddcui questions should also be directed the to the ddcutil issue tracker on Github.","title":"ddcui"},{"location":"#topics","text":"Using ddcutil : Command Overview Command Output Examples Monitor Control Command Set Color Management Commands and Options: Detailed command and option documentation Installation and Configuration: Post-Installation Checklist Install ddcutil From Prebuilt Packages Building From Source Configuration and Installation Diagnostics Other: Frequently Asked Questions Technical Support Releases Release Notes Announcement History Virtual Machines Comparison with ddccontrol Notes on Specific Monitors DDC Null Response APIs Articles about ddcutil References Acknowledgements","title":"Topics"},{"location":"#packaging-status-in-distribution-repositories","text":"For packages maintained by ddcutil , see Installing ddcutil and ddcui from Prebuilt Packages","title":"Packaging Status In Distribution Repositories"},{"location":"#ddcutil-status","text":"","title":"ddcutil Status"},{"location":"#ddcui-status","text":"","title":"ddcui Status"},{"location":"#author","text":"Sanford Rockowitz rockowitz@minsoft.com","title":"Author"},{"location":"acknowledgements/","text":"Acknowlegdements Jean Delvare, Linux kernel I2C maintainer, for his helpful guidance in getting the low level I2C code to work. Jeff Leist, co-owner of Microworx in Rochester, NY for access to a variety of computers for testing. Professor Nitan Simpat at Rochester Institute of Technology for accesss to Eizo and NEC monitors Ondrej Zary, whose usbmonctl provided a starting point for the USB implemention. usbmonctl was based on acdcontrol by Pavel Guervich, which in turn.. well you get the idea. It's shoulders all the way down.","title":"Acknowledgements"},{"location":"acknowledgements/#acknowlegdements","text":"Jean Delvare, Linux kernel I2C maintainer, for his helpful guidance in getting the low level I2C code to work. Jeff Leist, co-owner of Microworx in Rochester, NY for access to a variety of computers for testing. Professor Nitan Simpat at Rochester Institute of Technology for accesss to Eizo and NEC monitors Ondrej Zary, whose usbmonctl provided a starting point for the USB implemention. usbmonctl was based on acdcontrol by Pavel Guervich, which in turn.. well you get the idea. It's shoulders all the way down.","title":"Acknowlegdements"},{"location":"amdgpu/","text":"Notes on Driver amdgpu Based on Linux GPU driver documentation for amdgpu Kernel option amdgpu.dc (Display Core) Disable/Enable Display Core driver for debugging (1 = enable, 0 = disable). The default is -1 (automatic for each asic). amdgpu.dc value Meaning 0 disable Display Core 1 enable Display Core default = -1 enable/disable based on asic TODO: insert list of GPUs supporting DC Kernal option amdgpu.hw_i2c To enable hw i2c engine. Only affects non-DC display handling. The default is 0 (Disabled). amdgpu.hw_i2c (applies only if Display Core disabled) amdgpu.hw_i2c value Meaning 0 (default) disable 1 enable Tested on RX580 (Ellesmere), Kernel 5.13 Name in /sys/bus/i2c/devices/i2c-N/name Case 1: Display Core disabled and hw_i2c=0 Connector Name DVI, HDMI AMDGPU i2c bit bus 0xNN DP: CardM-DP-N, e.g. Card0-DP-1 Case 2: Display Core disabled and hw_i2c=1 Connector | Name ----------|---------- DVI, HDMI | AMDGPU i2c hw bus 0xNN DP: | CardM-DP-N, e.g. Card0-DP-1 I2C communication fails on DVI and HDMI Case 3: Display Core enabled Connector | Name ----------|---------- DVI, HDMI | AMDGPU DM i2c hw bus 0x9N DP: | AMDGPU DM aux hw bus N Where is /sys/bus/i2c/devices/i2c-name set? Message Format | Message Source -------------------------|---------------- AMDGPU DM aux hw bus N | drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm_mst_types.c AMDGPU i2c hw bus 0xNN | drivers/gpu/drm/amd/amdgpu/amdgpu_i2c.c AMDGPU i2c bit bus 0xNN | drivers/gpu/drm/amd/amdgpu/amdgpu_i2c.c If Display Dore is enabled, a line containining either \"Display Core initialized\" or \"Display Core failed to initialize\" is found in the system log. Message source: drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm.c, drivers/gpu/drm/amd/display/dc/core/dc.c To check: # egrep -e \"Kernel command line|Display Core\" /var/log/syslog","title":"Notes on driver amdgpu"},{"location":"amdgpu/#notes-on-driver-amdgpu","text":"Based on Linux GPU driver documentation for amdgpu","title":"Notes on Driver amdgpu"},{"location":"amdgpu/#kernel-option-amdgpudc-display-core","text":"Disable/Enable Display Core driver for debugging (1 = enable, 0 = disable). The default is -1 (automatic for each asic). amdgpu.dc value Meaning 0 disable Display Core 1 enable Display Core default = -1 enable/disable based on asic TODO: insert list of GPUs supporting DC","title":"Kernel option amdgpu.dc (Display Core)"},{"location":"amdgpu/#kernal-option-amdgpuhw_i2c","text":"To enable hw i2c engine. Only affects non-DC display handling. The default is 0 (Disabled). amdgpu.hw_i2c (applies only if Display Core disabled) amdgpu.hw_i2c value Meaning 0 (default) disable 1 enable Tested on RX580 (Ellesmere), Kernel 5.13 Name in /sys/bus/i2c/devices/i2c-N/name Case 1: Display Core disabled and hw_i2c=0 Connector Name DVI, HDMI AMDGPU i2c bit bus 0xNN DP: CardM-DP-N, e.g. Card0-DP-1 Case 2: Display Core disabled and hw_i2c=1 Connector | Name ----------|---------- DVI, HDMI | AMDGPU i2c hw bus 0xNN DP: | CardM-DP-N, e.g. Card0-DP-1 I2C communication fails on DVI and HDMI Case 3: Display Core enabled Connector | Name ----------|---------- DVI, HDMI | AMDGPU DM i2c hw bus 0x9N DP: | AMDGPU DM aux hw bus N Where is /sys/bus/i2c/devices/i2c-name set? Message Format | Message Source -------------------------|---------------- AMDGPU DM aux hw bus N | drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm_mst_types.c AMDGPU i2c hw bus 0xNN | drivers/gpu/drm/amd/amdgpu/amdgpu_i2c.c AMDGPU i2c bit bus 0xNN | drivers/gpu/drm/amd/amdgpu/amdgpu_i2c.c If Display Dore is enabled, a line containining either \"Display Core initialized\" or \"Display Core failed to initialize\" is found in the system log. Message source: drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm.c, drivers/gpu/drm/amd/display/dc/core/dc.c To check: # egrep -e \"Kernel command line|Display Core\" /var/log/syslog","title":"Kernal option amdgpu.hw_i2c"},{"location":"api_main/","text":"C API For details of API changes, see Shared Library Release Notes Naming Symbol names begin with \"ddca_\" or \"DDCA_\" (for DDC util A pi). Installation Header files are located in the src/public directory. They are normally installed to /usr/include or /usr/local/include. Header File Name Contains ddcutil_types.h typedefs, structs, enums, etc. ddcutil_c_api.h API functions ddcutil_status_codes.h ddcutil specific status codes ddcutil_macros.h macros to specify ddcutil version at compile time The API is exposed using shared library libddcutil.so. Note that the command line version of ddcutil does not itself use the shared library, but instead links all services statically. Installation (make install, package install) installs a Package Config file (ddcutil.pc). Installation also saves a cmake file (FindDDCUtil.cmake) in directory /usr/share/ddcutil/data (or /usr/local/share/ddcutil/data if appropriate). To use this file, copy it to /usr/share/cmake/Modules. Documentation C API documentation: - The header files contain extensive documentation. - Doxygen documentation can be generated (if Doxygen is installed) using scripts in the doxydoc directory. However, I think you'll find the comments in the header files and sample code easier to use. Sample programs are found in directory src/sample_clients: Source file Contents demo_capabilities.c Query monitor capabilities string demo_display_selection.c Select display demo_feature_list.c Using DDCA_Feature_List demo_get_set_vcp.c Read and write VCP feature values demo_global_settings.c Query and change global settings demo_profile_features.c Save and restore color profile related features demo_redirection.c Capture program output demo_vcpinfo.c Query VCP feature metadata To build the sample client programs, issue the command make check . Miscellaneous Site ABI Laboratory tests for binary compatility between shared library releases. Note that there have been some","title":"C API"},{"location":"api_main/#c-api","text":"For details of API changes, see Shared Library Release Notes","title":"C API"},{"location":"api_main/#naming","text":"Symbol names begin with \"ddca_\" or \"DDCA_\" (for DDC util A pi).","title":"Naming"},{"location":"api_main/#installation","text":"Header files are located in the src/public directory. They are normally installed to /usr/include or /usr/local/include. Header File Name Contains ddcutil_types.h typedefs, structs, enums, etc. ddcutil_c_api.h API functions ddcutil_status_codes.h ddcutil specific status codes ddcutil_macros.h macros to specify ddcutil version at compile time The API is exposed using shared library libddcutil.so. Note that the command line version of ddcutil does not itself use the shared library, but instead links all services statically. Installation (make install, package install) installs a Package Config file (ddcutil.pc). Installation also saves a cmake file (FindDDCUtil.cmake) in directory /usr/share/ddcutil/data (or /usr/local/share/ddcutil/data if appropriate). To use this file, copy it to /usr/share/cmake/Modules.","title":"Installation"},{"location":"api_main/#documentation","text":"C API documentation: - The header files contain extensive documentation. - Doxygen documentation can be generated (if Doxygen is installed) using scripts in the doxydoc directory. However, I think you'll find the comments in the header files and sample code easier to use. Sample programs are found in directory src/sample_clients: Source file Contents demo_capabilities.c Query monitor capabilities string demo_display_selection.c Select display demo_feature_list.c Using DDCA_Feature_List demo_get_set_vcp.c Read and write VCP feature values demo_global_settings.c Query and change global settings demo_profile_features.c Save and restore color profile related features demo_redirection.c Capture program output demo_vcpinfo.c Query VCP feature metadata To build the sample client programs, issue the command make check .","title":"Documentation"},{"location":"api_main/#miscellaneous","text":"Site ABI Laboratory tests for binary compatility between shared library releases. Note that there have been some","title":"Miscellaneous"},{"location":"articles/","text":"Articles about ddcutil There are some nice articles that provide an alternative introduction to ddcutil . DDC/CI monitor control on Linux 2019-05-08, Charles Thibaut Control your display with DDC/CI on Linux 2021-08-11, Clement Martinez Desktop control of external monitor settings with ddcutil and vdu_controls 2021-09-07, Michael Hamilton","title":"Articles about ddcutil"},{"location":"articles/#articles-about-ddcutil","text":"There are some nice articles that provide an alternative introduction to ddcutil . DDC/CI monitor control on Linux 2019-05-08, Charles Thibaut Control your display with DDC/CI on Linux 2021-08-11, Clement Martinez Desktop control of external monitor settings with ddcutil and vdu_controls 2021-09-07, Michael Hamilton","title":"Articles about ddcutil"},{"location":"bibliography/","text":"Reference Documents Searching for DDC documentation can be confusing. The DDC protocol evolved, being part of Access Bus at one point, and shed various pieces, e.g. EDID, into separate specifications along the way. See the Wikipedia DDC page for an overview of how it morphed. VESA Standards VESA Display Data Channel Command Interface Standard, Version 1. August 14, 1998. This is a predecessor to the current standard, DDC/CI 1.1. The contents of this document sometimes clarify the current specification, but should not be regarded as definitive. VESA Access.bus Specificaions Version 3.0, September 1995 . Another predecessor specification. VESA Display Data Channel Command Interface (DDC/CI) Standard Version 1.1, October 29, 2004 Also available here VESA Monitor Control Command Set (MCCS) Standard Version 1, September 11, 1998. VESA Monitor Control Command Set (MCCS) Standard Version 2, October 17, 2003 VESA Monitor Control Command Set (MCCS) Standard Version 2.1, May 28, 2005 VESA Monitor Control Command Set (MCCS) Standard Version 3, July 27, 2006. MCCS 3.0 proved too great a departure from Version 2.1 and did not gain acceptance. VESA Monitor Control Command Set (MCCS) Update Document for MCCS Standard Version 3, March 20, 2007 VESA Monitor Control Command Set (MCCS) Standard Version 2.2, January 19, 2009. MCCS 2.2 incorporated features from Version 3.0, but is upwardly compatible with 2.1 VESA Monitor Control Command Set (MCCS) Standard Version 2.2a, July 13, 2011 . The most recent standard. Also available here . VESA Enhanced Extended Display Identification Data Standard (E-EDID Standard), Relase A, Revision 1, February 9, 2000 VESA Enhanced Display Data Channel (EDDC) Standard, Version 1.2, December 26, 2007 VESA Enhanced Display Data Channel (E-DDC) Standard, Version 1.3, 11 September 2017 VESA DisplayID Standard, Version 2.0, 11 September 2017 DisplayID v2.0 Errata E6, Published 3/15/20 DisplayPort Standard Version 1, Revision 1a 11 January 2008 This early version of the DisplayPort standard is available on the Internet Archive's Wayback Machine. DisplayPort Standard Version 1, Revision 2 January 5, 2010 This early version of the DisplayPort standard is available on the Internet Archive's Wayback Machine. More recent versions of the standard appear to require VESA membership. DisplayPort Interoperability Guideline Version 1.1, January 28, 2008 Technical specification for DisplayPort Dual-Mode (DP++) VESA Introduces Updated Dual-Mode Standard for Higher Resolution Interoperability with HDMI Displays VESA Standards FAQ Many standards can be found here USB Implementers Forum Standards USB Device Class Definition for Human Interface Devices Version 1.11, June 27, 2001 USB HID Usage Table Version 1.12, October 28,2004 USB HID Usage Table Version 1.22, April 6,2021 USB Monitor Control Class Specification Revision 1.0, January 5, 1998 ] Many standards can be found here I 2 C As background, I2C is a low level, slow speed specification of a 2 wire protocol for sending and receiving bytes. DDC/CI is layered on top of that protocol, describing particular sequences of bytes that are communicated between a master device (the host computer) and a slave device (a monitor) at address x37 on an I2C bus. By analogy, DDC is as a subclass of superclass I2C, that is DDC obeys the rules of I2C, but is more specific. For example, only certain byte sequences are legal. SMBUS is another protocol based on I2C. ddcutil reads from and writes to the userspace /dev-i2c * devices which present a file system like abstraction of an I2C bus. It leaves the bit-banging to the video device drivers, e.g. amdgpu, nouveau. One source of confusion in DDC documentation is the specification of slave adddresses on the I2C bus. Sometimes you'll see the DDC address documented as x37, other times as the pair x6e/x6f. Leaving aside the implementation of 10 bit I2C bus addresses (uncommon), I2C slave addresses are encoded in a single byte. The high order 7 bits are used for the address per se. The low order bit is 0 for a write operation, 1 for a read operation. Much of the VESA documenation regards the entire 8 bit value as an address, which means address x37 becomes the pair x6e/x6f. Similarly, the 7 bit address for the EDID is x50; regarded as an 8 bit address, the EDID address becomes xA0/xA1. ddcutil specifies I2C slave addresses in 7 bit form, as do utilities such as i2cdetect , i2cget , and i2cset . The following specifications and articles provide backgroud information about the I2C bus. Understanding the I 2 C Bus, Texas Instruments Application Report, SLVA702, June 2015 HDCP and EDID Demystified I2C-bus specification and user manual, Rev 6 - 4 April 2014 I 2 C Info -I 2 C Bus, Interface and Protocol I 2 C Bus Specification I2C Communication Protocol Tutorial I2C - What's That? I2C Primer Wikipedia 7-bit, 8-bit, and 10-bit I2C Slave Addressing StackExchange thread on the confusion in I2C slave address representation I2C Protocol Lecture Notes, Sudhanshu Janwadkar Linux kernel documentation Using the I2C Bus, Robot Electronics Definitions and Differences between I2C, Access.bus, and SMBUS Nazir Azzam, SMSC, Hauppage, NY I2C-bus specification and user manual, Rev 6 - 4 April 2014 Paywalled I 2 C, SPI, I3C Interface Devices SMBus is a related standard. The following report can help in understanding I2C. SMBus Made Simple, Texas Instruments Wikipedia has several high quality pages on related specifications: They may be helpful when trying to figure out why DDC communication is not working: DisplayPort HDMI Thunderbolt USB-C . See in particular section Hardware Support for a discussion of USB-C Alternate Mode Display Data Channel Has a useful summary of the relationships, evolution, and deprecation among releated standards, Documentation on DP <-> HDMI/DVI conversion: Dell HDMI to DisplayPort Conversion Information Barco DisplayPort to HDMI Conversion: should I use an active or passive adapter DisplayPort->HDMI dongles/adapters - active vs passive revisited Tripp-Lite What's the Difference Between Passive and Active DisplayPort Adapters VESA DisplayPort Interoperatility Guideline Version 1.1, January 28, 2008 Type C Connectors Benq: USB C Introduction TotalPhase: How DisplayPort Alt Mode is enabled over a USB Type-C Cable AnandTech: DisplayPort Alt Mode 2.0 Spec Releaaed Has a diagram of pin usage Guide to USB-C Pinout and Features All About Circuits web site, December 10 2018 Wikipedia USB-C page VESA DisplayPort Alternate Mode on USB Type-C Technical Overview Jim Choate, VESA Compliance Program Manager, September 27-28, 2016 VESA DisplayPort Alt Mode for USB Type-C Standard Feature Summary, Sept 22, 2014 PowerPoint presentation HDMI Alt Mode USB Type-C A technical description of the spec that had essentially no adoption. Includes pin usage. RIP HDMI Alt Mode, we hardly new ye Ars Technica, 1/12/2023 Type-C HDMI alt mode never saw adoption. What exist are Type-C DisplayPort alt mode cables, etc. that have circuitry to convert the DisplayPort signal to HDMI. HDMI licensing administrator says the obscure HDMI Alt Mode specs are dead Another article pointing out that USB-C HDMI Alt Mode devices don't exist. What exist are Alt-Mode DisplayPort cables/connectors, which convert DisplayPort to HDMI. That is, the device with the Type-C connector emits DisplayPort signaling, not HDMI signaling. The DisplayPort to HDMI conversion is performed by circuitry in the cable/connector. Enable Desktop Mode (HDMI Alt Mode) in kernel/bootloader or with custom ROM xda.developers.com forum discussion. A discussion of why you (usually) can't get video output from a cell phone Type-C connector. Note that the mention of \"HDMI Alt Mode\" in the title is misleading. DisplayLink A proprietary method of sending video over USB-C. Not to be confused with DisplayPort. Does not support DDC/CI. DisplayLink vs Alt Mode Video Output Monitor Firmware MonitorDarkly Linux Kernel Documentation Linux Kernel Documentation This is the top level of the kernel's documentation tree. Some pages of particular interest: Linux I2C Subsystem Linux GPU Driver Developer's Guide GPU Driver Documentation amdgpu Module Parameters Development Tools Understanding system calls on Linux with strace Article on opensource.com","title":"References"},{"location":"bibliography/#reference-documents","text":"Searching for DDC documentation can be confusing. The DDC protocol evolved, being part of Access Bus at one point, and shed various pieces, e.g. EDID, into separate specifications along the way. See the Wikipedia DDC page for an overview of how it morphed. VESA Standards VESA Display Data Channel Command Interface Standard, Version 1. August 14, 1998. This is a predecessor to the current standard, DDC/CI 1.1. The contents of this document sometimes clarify the current specification, but should not be regarded as definitive. VESA Access.bus Specificaions Version 3.0, September 1995 . Another predecessor specification. VESA Display Data Channel Command Interface (DDC/CI) Standard Version 1.1, October 29, 2004 Also available here VESA Monitor Control Command Set (MCCS) Standard Version 1, September 11, 1998. VESA Monitor Control Command Set (MCCS) Standard Version 2, October 17, 2003 VESA Monitor Control Command Set (MCCS) Standard Version 2.1, May 28, 2005 VESA Monitor Control Command Set (MCCS) Standard Version 3, July 27, 2006. MCCS 3.0 proved too great a departure from Version 2.1 and did not gain acceptance. VESA Monitor Control Command Set (MCCS) Update Document for MCCS Standard Version 3, March 20, 2007 VESA Monitor Control Command Set (MCCS) Standard Version 2.2, January 19, 2009. MCCS 2.2 incorporated features from Version 3.0, but is upwardly compatible with 2.1 VESA Monitor Control Command Set (MCCS) Standard Version 2.2a, July 13, 2011 . The most recent standard. Also available here . VESA Enhanced Extended Display Identification Data Standard (E-EDID Standard), Relase A, Revision 1, February 9, 2000 VESA Enhanced Display Data Channel (EDDC) Standard, Version 1.2, December 26, 2007 VESA Enhanced Display Data Channel (E-DDC) Standard, Version 1.3, 11 September 2017 VESA DisplayID Standard, Version 2.0, 11 September 2017 DisplayID v2.0 Errata E6, Published 3/15/20 DisplayPort Standard Version 1, Revision 1a 11 January 2008 This early version of the DisplayPort standard is available on the Internet Archive's Wayback Machine. DisplayPort Standard Version 1, Revision 2 January 5, 2010 This early version of the DisplayPort standard is available on the Internet Archive's Wayback Machine. More recent versions of the standard appear to require VESA membership. DisplayPort Interoperability Guideline Version 1.1, January 28, 2008 Technical specification for DisplayPort Dual-Mode (DP++) VESA Introduces Updated Dual-Mode Standard for Higher Resolution Interoperability with HDMI Displays VESA Standards FAQ Many standards can be found here USB Implementers Forum Standards USB Device Class Definition for Human Interface Devices Version 1.11, June 27, 2001 USB HID Usage Table Version 1.12, October 28,2004 USB HID Usage Table Version 1.22, April 6,2021 USB Monitor Control Class Specification Revision 1.0, January 5, 1998 ] Many standards can be found here","title":"Reference Documents"},{"location":"bibliography/#i2c","text":"As background, I2C is a low level, slow speed specification of a 2 wire protocol for sending and receiving bytes. DDC/CI is layered on top of that protocol, describing particular sequences of bytes that are communicated between a master device (the host computer) and a slave device (a monitor) at address x37 on an I2C bus. By analogy, DDC is as a subclass of superclass I2C, that is DDC obeys the rules of I2C, but is more specific. For example, only certain byte sequences are legal. SMBUS is another protocol based on I2C. ddcutil reads from and writes to the userspace /dev-i2c * devices which present a file system like abstraction of an I2C bus. It leaves the bit-banging to the video device drivers, e.g. amdgpu, nouveau. One source of confusion in DDC documentation is the specification of slave adddresses on the I2C bus. Sometimes you'll see the DDC address documented as x37, other times as the pair x6e/x6f. Leaving aside the implementation of 10 bit I2C bus addresses (uncommon), I2C slave addresses are encoded in a single byte. The high order 7 bits are used for the address per se. The low order bit is 0 for a write operation, 1 for a read operation. Much of the VESA documenation regards the entire 8 bit value as an address, which means address x37 becomes the pair x6e/x6f. Similarly, the 7 bit address for the EDID is x50; regarded as an 8 bit address, the EDID address becomes xA0/xA1. ddcutil specifies I2C slave addresses in 7 bit form, as do utilities such as i2cdetect , i2cget , and i2cset . The following specifications and articles provide backgroud information about the I2C bus. Understanding the I 2 C Bus, Texas Instruments Application Report, SLVA702, June 2015 HDCP and EDID Demystified I2C-bus specification and user manual, Rev 6 - 4 April 2014 I 2 C Info -I 2 C Bus, Interface and Protocol I 2 C Bus Specification I2C Communication Protocol Tutorial I2C - What's That? I2C Primer Wikipedia 7-bit, 8-bit, and 10-bit I2C Slave Addressing StackExchange thread on the confusion in I2C slave address representation I2C Protocol Lecture Notes, Sudhanshu Janwadkar Linux kernel documentation Using the I2C Bus, Robot Electronics Definitions and Differences between I2C, Access.bus, and SMBUS Nazir Azzam, SMSC, Hauppage, NY I2C-bus specification and user manual, Rev 6 - 4 April 2014 Paywalled I 2 C, SPI, I3C Interface Devices SMBus is a related standard. The following report can help in understanding I2C. SMBus Made Simple, Texas Instruments Wikipedia has several high quality pages on related specifications: They may be helpful when trying to figure out why DDC communication is not working: DisplayPort HDMI Thunderbolt USB-C . See in particular section Hardware Support for a discussion of USB-C Alternate Mode Display Data Channel Has a useful summary of the relationships, evolution, and deprecation among releated standards, Documentation on DP <-> HDMI/DVI conversion: Dell HDMI to DisplayPort Conversion Information Barco DisplayPort to HDMI Conversion: should I use an active or passive adapter DisplayPort->HDMI dongles/adapters - active vs passive revisited Tripp-Lite What's the Difference Between Passive and Active DisplayPort Adapters VESA DisplayPort Interoperatility Guideline Version 1.1, January 28, 2008 Type C Connectors Benq: USB C Introduction TotalPhase: How DisplayPort Alt Mode is enabled over a USB Type-C Cable AnandTech: DisplayPort Alt Mode 2.0 Spec Releaaed Has a diagram of pin usage Guide to USB-C Pinout and Features All About Circuits web site, December 10 2018 Wikipedia USB-C page VESA DisplayPort Alternate Mode on USB Type-C Technical Overview Jim Choate, VESA Compliance Program Manager, September 27-28, 2016 VESA DisplayPort Alt Mode for USB Type-C Standard Feature Summary, Sept 22, 2014 PowerPoint presentation HDMI Alt Mode USB Type-C A technical description of the spec that had essentially no adoption. Includes pin usage. RIP HDMI Alt Mode, we hardly new ye Ars Technica, 1/12/2023 Type-C HDMI alt mode never saw adoption. What exist are Type-C DisplayPort alt mode cables, etc. that have circuitry to convert the DisplayPort signal to HDMI. HDMI licensing administrator says the obscure HDMI Alt Mode specs are dead Another article pointing out that USB-C HDMI Alt Mode devices don't exist. What exist are Alt-Mode DisplayPort cables/connectors, which convert DisplayPort to HDMI. That is, the device with the Type-C connector emits DisplayPort signaling, not HDMI signaling. The DisplayPort to HDMI conversion is performed by circuitry in the cable/connector. Enable Desktop Mode (HDMI Alt Mode) in kernel/bootloader or with custom ROM xda.developers.com forum discussion. A discussion of why you (usually) can't get video output from a cell phone Type-C connector. Note that the mention of \"HDMI Alt Mode\" in the title is misleading. DisplayLink A proprietary method of sending video over USB-C. Not to be confused with DisplayPort. Does not support DDC/CI. DisplayLink vs Alt Mode Video Output Monitor Firmware MonitorDarkly Linux Kernel Documentation Linux Kernel Documentation This is the top level of the kernel's documentation tree. Some pages of particular interest: Linux I2C Subsystem Linux GPU Driver Developer's Guide GPU Driver Documentation amdgpu Module Parameters Development Tools Understanding system calls on Linux with strace Article on opensource.com","title":"I2C"},{"location":"building/","text":"Building From Source Building from tarball ddcutil can be built from its tarball in the usual way. Unpack the tar file, change to its directory, and issue the commands: # ./configure # make # sudo make install configure options The configure script has several custom options. Some reflect features under development, or tools used for development. The publicly supported options are: Option Default Purpose --enable-usb yes Build with support for USB connected monitors. Setting --disable-usb reduces size and package requirements. (Default is --enable-usb.) --enable-drm yes Build with DRM support, used for enhanced diagnostics. Setting --disable-drm reduces size and package requirements. (Default is --enable-drm.) --enable-lib yes Build the shared library. (Default is --enable-lib.) --enable-x11 yes Build using X11 services, used for enhanced diagnostics. Setting --disable-x11 allows for use on systems lacking X11. (Default is --enable-x11.) --enable-asan no Build for execution with the Google Address Space Sanitizer. --enable-envcmds yes Controls whether commands environment and usbenvironment are included. --enable-udev yes Controls whether udev is used. --enable-syslog yes Controls whether messaes are written to the system log (Default is --enable-syslog.) Notes: - Option --disable-envcmds forces --disable-drm , and --disable-x11 - Option --enable-targetbsd forces --disable-envcmds , --disable-udev , and --disable-usb Required packages Because of the variation among distributions, only general guidelines can be given for ddcutil prerequisites. Ultimately, you'll have to try to build ddcutil and see what breaks. ddcutil requires the following packages for both building and execution: i2c-tools glib-2.0 (Note: glib-2.0 can be packaged with different names, e.g. libglib2.0-0, and may entail installing multiple packages.) Minimum version: 2.32 libgudev (e.g. libgudev1) libusb-1.0 (e.g. libusb-1.0-0) Minimum version 1.0.15 libudev (e.g. libudev1) libdrm2 Minimum version: 2.4.16 libxrandr2 hwdata On most platforms, development related files (e.g. headers files) are in separate packages having a \"-dev\" or similar suffix in their names. ddcutil needs development packages for: libc6 (e.g. libc6-dev) glib2.0 (e.g. libglib2.0-0) libusb (e.g. libusb-1_0-devel, libusb-1.0-0-dev) python (e.g. python-all-dev) udev or systemd (udev may be part of systemd, e.g. libudev-devel, libudev-dev) x11 (e.g. libx11-dev) xrandr (e.g. libxrandr-dev) libdrm2 (e.g. libdrm-devel) On older versions of Ubuntu, the i2c.h header file is found in a separate package. If the following package exists, it is required to build ddcutil. libi2c-dev However, as of libi2c 4.0, i2c.h is no longer part of this package. Error messages from configure regarding missing packages can be misleading. If configure complains that a package is not found but it seems to be installed, it's likely that the associated development package (with a suffix like \"-dev\") needs to be installed. Building requires that the core build files be installed (e.g. the files listed in build-essential on Ubuntu) and also the pkg-config system. pkg-config Wnen make install is used, files are normally written to subdirectories of /usr/local. Some distributions include these subdirectories in the relevant paths, others do not. In particular, it may be necessary to copy source file /data/usr/lib/udev/rules.d/60-ddcutil.rules to directory /etc/udev/rules.d. Building from git The git repository for ddcutil is here Building ddcutil from git requires that the autotools related packages be installed. The exact packages vary from distribution to distribution. On Ubuntu, these include: autoconf, Minimum version: 2.50 automake, Minimum version: 1.13 autotools-dev libtool m4 To configure the build, change to the main ddcutil directory and execute the file: # ./autogen.sh Or issue the individual commands: # aclocal # autoconf # automake Then to configure, build, and install ddcutil : # ./configure # make # sudo make install Shared library configuration By default, command \" sudo make install \" installs the shared library files ( libddcutil.so.n.n and symbolic links) in directory /usr/local/lib. In order to be available, command ldconfig must be run and it must find the shared library file. \" sudo make install \" automatically calls ldconfig after installing the library. For ldconfig to find the file, directory /usr/local/lib should be in a file in /etc/ld.so.conf.d. This is the case in Ubuntu. For further details, see: Shared Library Configuration Common issues: If you see a message \"required file './ltmain.sh.' not found\", run libtoolize (See https://www.gnu.org/software/automake/manual/html_node/Error-required-file-ltmain_002esh-not-found.html) May get the following warning when running automake src/Makefile.am:38: warning: compiling 'cmdline/cmd_parser_aux.c' in subdir requires 'AM_PROG_CC_C_O' in 'configure.ac' This is an autotools versioning issue. It appears that this warning can be ignored. TO DO: add notes on other warnings that can be ignored Development configuration options. There are several configure options that exist for developing ddcutil . They are listed here for completeness, and should be left disabled. --enable-callgraph --enable-cffi --enable-cython --enable-doxygen --enable-failisim --enable-gobject-api --enable-swig --enable-testcases Building ddcui For notes on building ddcui , see Building ddcui","title":"Building From Source"},{"location":"building/#building-from-source","text":"","title":"Building From Source"},{"location":"building/#building-from-tarball","text":"ddcutil can be built from its tarball in the usual way. Unpack the tar file, change to its directory, and issue the commands: # ./configure # make # sudo make install","title":"Building from tarball"},{"location":"building/#configure-options","text":"The configure script has several custom options. Some reflect features under development, or tools used for development. The publicly supported options are: Option Default Purpose --enable-usb yes Build with support for USB connected monitors. Setting --disable-usb reduces size and package requirements. (Default is --enable-usb.) --enable-drm yes Build with DRM support, used for enhanced diagnostics. Setting --disable-drm reduces size and package requirements. (Default is --enable-drm.) --enable-lib yes Build the shared library. (Default is --enable-lib.) --enable-x11 yes Build using X11 services, used for enhanced diagnostics. Setting --disable-x11 allows for use on systems lacking X11. (Default is --enable-x11.) --enable-asan no Build for execution with the Google Address Space Sanitizer. --enable-envcmds yes Controls whether commands environment and usbenvironment are included. --enable-udev yes Controls whether udev is used. --enable-syslog yes Controls whether messaes are written to the system log (Default is --enable-syslog.) Notes: - Option --disable-envcmds forces --disable-drm , and --disable-x11 - Option --enable-targetbsd forces --disable-envcmds , --disable-udev , and --disable-usb","title":"configure options"},{"location":"building/#required-packages","text":"Because of the variation among distributions, only general guidelines can be given for ddcutil prerequisites. Ultimately, you'll have to try to build ddcutil and see what breaks. ddcutil requires the following packages for both building and execution: i2c-tools glib-2.0 (Note: glib-2.0 can be packaged with different names, e.g. libglib2.0-0, and may entail installing multiple packages.) Minimum version: 2.32 libgudev (e.g. libgudev1) libusb-1.0 (e.g. libusb-1.0-0) Minimum version 1.0.15 libudev (e.g. libudev1) libdrm2 Minimum version: 2.4.16 libxrandr2 hwdata On most platforms, development related files (e.g. headers files) are in separate packages having a \"-dev\" or similar suffix in their names. ddcutil needs development packages for: libc6 (e.g. libc6-dev) glib2.0 (e.g. libglib2.0-0) libusb (e.g. libusb-1_0-devel, libusb-1.0-0-dev) python (e.g. python-all-dev) udev or systemd (udev may be part of systemd, e.g. libudev-devel, libudev-dev) x11 (e.g. libx11-dev) xrandr (e.g. libxrandr-dev) libdrm2 (e.g. libdrm-devel) On older versions of Ubuntu, the i2c.h header file is found in a separate package. If the following package exists, it is required to build ddcutil. libi2c-dev However, as of libi2c 4.0, i2c.h is no longer part of this package. Error messages from configure regarding missing packages can be misleading. If configure complains that a package is not found but it seems to be installed, it's likely that the associated development package (with a suffix like \"-dev\") needs to be installed. Building requires that the core build files be installed (e.g. the files listed in build-essential on Ubuntu) and also the pkg-config system. pkg-config Wnen make install is used, files are normally written to subdirectories of /usr/local. Some distributions include these subdirectories in the relevant paths, others do not. In particular, it may be necessary to copy source file /data/usr/lib/udev/rules.d/60-ddcutil.rules to directory /etc/udev/rules.d.","title":"Required packages"},{"location":"building/#building-from-git","text":"The git repository for ddcutil is here Building ddcutil from git requires that the autotools related packages be installed. The exact packages vary from distribution to distribution. On Ubuntu, these include: autoconf, Minimum version: 2.50 automake, Minimum version: 1.13 autotools-dev libtool m4 To configure the build, change to the main ddcutil directory and execute the file: # ./autogen.sh Or issue the individual commands: # aclocal # autoconf # automake Then to configure, build, and install ddcutil : # ./configure # make # sudo make install","title":"Building from git"},{"location":"building/#shared-library-configuration","text":"By default, command \" sudo make install \" installs the shared library files ( libddcutil.so.n.n and symbolic links) in directory /usr/local/lib. In order to be available, command ldconfig must be run and it must find the shared library file. \" sudo make install \" automatically calls ldconfig after installing the library. For ldconfig to find the file, directory /usr/local/lib should be in a file in /etc/ld.so.conf.d. This is the case in Ubuntu. For further details, see: Shared Library Configuration","title":"Shared library configuration"},{"location":"building/#common-issues","text":"If you see a message \"required file './ltmain.sh.' not found\", run libtoolize (See https://www.gnu.org/software/automake/manual/html_node/Error-required-file-ltmain_002esh-not-found.html) May get the following warning when running automake src/Makefile.am:38: warning: compiling 'cmdline/cmd_parser_aux.c' in subdir requires 'AM_PROG_CC_C_O' in 'configure.ac' This is an autotools versioning issue. It appears that this warning can be ignored. TO DO: add notes on other warnings that can be ignored","title":"Common issues:"},{"location":"building/#development-configuration-options","text":"There are several configure options that exist for developing ddcutil . They are listed here for completeness, and should be left disabled. --enable-callgraph --enable-cffi --enable-cython --enable-doxygen --enable-failisim --enable-gobject-api --enable-swig --enable-testcases","title":"Development configuration options."},{"location":"building/#building-ddcui","text":"For notes on building ddcui , see Building ddcui","title":"Building ddcui"},{"location":"building_ddcui/","text":"Bulding ddcui Requirements ddcui 0.2.0 requires version 1.2.0 of ddcutil or later. If ddcutil is installed from pre-built packages, the shared library and development packages must be installed as well as the main ddcutil package. A recent version of QT 5. ddcui will not build with versions of Qt older than 5.5. Unless you want to modify the the dialog boxes, or prefer the Qt Creator IDE, Qt Creator is not required. Building Using CMake ddcui can be built using CMake. A CMake control file ( CMakeLists.txt ) is provided. To create the Makefile, change to the directory in which you wish to build ddcui and issue the command: cmake <directory containing CMakeLists.txt> Using the -S and -B options can ensure that the proper directory is used for the build tree. See the cmake man page for detais. Erasing file CMakeCache.txt and directory CMakeFiles from the build directory befure running cmake can avoid perplexing errors due to saved state. This has a negligable effect on cmake performance. Building Using qmake qmake is no longer supported. Issues: If ddcutil is installed from the tarball using command make install , the PKGCONFIG file ddcutil.pc is installed in a subdirectory of /usr/local. Depending on Linux distribution, this subdirectory may or may not be in the default PKGCONFIG search path. For example, on Ubuntu it is in the search path, but on Fedora it is not. To add the relevant path, issue the command: export PKG_CONFIG_PATH=/usr/local/share/pkgconfig before running qmake or cmake . To see the default PKGCONFIG search path, issue the command: pkg-config --variable pc_path pkg-config Generally speaking, if the ddcutil library and development files are installed under directory /usr instead of /usr/local tool path adjustments (often distribution specific) will be unnecessary. This will be the case if the files are installed from an rpm or dpkg package, or (if building ddcutil from source), \".configure\" is run with argument \"--prefix=/usr\". For additional information, Shared Library Configuration","title":"Building ddcui"},{"location":"building_ddcui/#bulding-ddcui","text":"","title":"Bulding ddcui"},{"location":"building_ddcui/#requirements","text":"ddcui 0.2.0 requires version 1.2.0 of ddcutil or later. If ddcutil is installed from pre-built packages, the shared library and development packages must be installed as well as the main ddcutil package. A recent version of QT 5. ddcui will not build with versions of Qt older than 5.5. Unless you want to modify the the dialog boxes, or prefer the Qt Creator IDE, Qt Creator is not required.","title":"Requirements"},{"location":"building_ddcui/#building-using-cmake","text":"ddcui can be built using CMake. A CMake control file ( CMakeLists.txt ) is provided. To create the Makefile, change to the directory in which you wish to build ddcui and issue the command: cmake <directory containing CMakeLists.txt> Using the -S and -B options can ensure that the proper directory is used for the build tree. See the cmake man page for detais. Erasing file CMakeCache.txt and directory CMakeFiles from the build directory befure running cmake can avoid perplexing errors due to saved state. This has a negligable effect on cmake performance.","title":"Building Using CMake"},{"location":"building_ddcui/#building-using-qmake","text":"qmake is no longer supported.","title":"Building Using qmake"},{"location":"building_ddcui/#issues","text":"If ddcutil is installed from the tarball using command make install , the PKGCONFIG file ddcutil.pc is installed in a subdirectory of /usr/local. Depending on Linux distribution, this subdirectory may or may not be in the default PKGCONFIG search path. For example, on Ubuntu it is in the search path, but on Fedora it is not. To add the relevant path, issue the command: export PKG_CONFIG_PATH=/usr/local/share/pkgconfig before running qmake or cmake . To see the default PKGCONFIG search path, issue the command: pkg-config --variable pc_path pkg-config Generally speaking, if the ddcutil library and development files are installed under directory /usr instead of /usr/local tool path adjustments (often distribution specific) will be unnecessary. This will be the case if the files are installed from an rpm or dpkg package, or (if building ddcutil from source), \".configure\" is run with argument \"--prefix=/usr\". For additional information, Shared Library Configuration","title":"Issues:"},{"location":"c_api_100/","text":"Shared Library Changes for Release 1.0.0/1.0.1 Overview The shared library interface is unchanged.","title":"Shared Library Changes for Release 1.0.0"},{"location":"c_api_100/#shared-library-changes-for-release-100101","text":"","title":"Shared Library Changes for Release 1.0.0/1.0.1"},{"location":"c_api_100/#overview","text":"The shared library interface is unchanged.","title":"Overview"},{"location":"c_api_110/","text":"Shared Library Changes for Release 1.1.0 Overview This release contains no API changes. At startup, libddcutil reads and processes the ddcutil configuration file, typically $HOME/.config/ddcutil/ddcutilrc","title":"Shared Library Changes for Release 1.1.0"},{"location":"c_api_110/#shared-library-changes-for-release-110","text":"","title":"Shared Library Changes for Release 1.1.0"},{"location":"c_api_110/#overview","text":"This release contains no API changes. At startup, libddcutil reads and processes the ddcutil configuration file, typically $HOME/.config/ddcutil/ddcutilrc","title":"Overview"},{"location":"c_api_120/","text":"Shared Library Changes for Release 1.2.0/1.2.1/1.2.2 Overview This release contains a handful of changes, which affect backward compatibility. Consequently, the libddcutil SONAME is now libddcutil.so.4. The shared library name is libddcutil.4.3.0 . In conformance with Debian practice, the package name is libddcutil4 . libddcutil trace file libddcutil can redirect all output that it would normally be sent to the terminal to a trace file instead. The file is specified using option --libddcutil-trace-file . This option can be only be specified in the [libddcutil] section of the ddcutil configuration file, ddcutilrc . The file name given can be either absolute or relative. If relative, the directory is resolved as per the definition of XDG_STATE_HOME in the XDG specification. Typically this is $HOME/.local/state/ddcutil. This allows for tracing in situations where there is no terminal to which to write, e.g. PowerDevil in KDE Plasma. API changes Structs and Enums Comments enum DDCA_OUTPUT_LEVEL add value DDCA_OL_VV type DDCA_TRACE_OPTIONS add value DDCA_TRCOPT_WALLTIME (release 1.2.1) New Function Comments ddca_add_trace_groups Add to the set of traced groups ddca_get_extended_version_string Version string with optional suffix, e.g. \"1.1.2-rc2\" ddca_redetect_displays Redetect displays ddca_get_display_refs Returns a null-terminated list of valid DDCA_Display_Refs ddca_get_display_info Returns DDCA_Display_Info for a DDCA_Display_Ref Notes: The existing API function ddca_set_trace_groups() replaces the existing set of trace groups, whereas new API function ddca_add_trace_groups() adds to the current set. Calling ddca_get_display_refs() followed by calling ddca_get_display_info() for each display is preferred over ddca_get_display_info_list2() . Experience has shown that it leads to cleaner client code. Changed Function Comments ddca_report_display_info() New Macro Comments DDCUTIL_VSUFFIX version suffix, may be \"\" Miscellaneous libddcutil changes Additional checks are performed on DDCA_Display_Ref and DDCA_Display_Handle function arguments. assert{} statements are used in libddcutil for situations that should be logically impossible. To aid in remote problem diagnosis, many of these statements have been replaced by macro TRACE_ASSERT(), which additionally writes a messsage to both the libddcutil trace log and the system log. Recognize configuration file option --libddcutil-trace-file --library-trace-file","title":"Shared Library Changes for Release 1.2.0"},{"location":"c_api_120/#shared-library-changes-for-release-120121122","text":"","title":"Shared Library Changes for Release 1.2.0/1.2.1/1.2.2"},{"location":"c_api_120/#overview","text":"This release contains a handful of changes, which affect backward compatibility. Consequently, the libddcutil SONAME is now libddcutil.so.4. The shared library name is libddcutil.4.3.0 . In conformance with Debian practice, the package name is libddcutil4 .","title":"Overview"},{"location":"c_api_120/#libddcutil-trace-file","text":"libddcutil can redirect all output that it would normally be sent to the terminal to a trace file instead. The file is specified using option --libddcutil-trace-file . This option can be only be specified in the [libddcutil] section of the ddcutil configuration file, ddcutilrc . The file name given can be either absolute or relative. If relative, the directory is resolved as per the definition of XDG_STATE_HOME in the XDG specification. Typically this is $HOME/.local/state/ddcutil. This allows for tracing in situations where there is no terminal to which to write, e.g. PowerDevil in KDE Plasma.","title":"libddcutil trace file"},{"location":"c_api_120/#api-changes","text":"Structs and Enums Comments enum DDCA_OUTPUT_LEVEL add value DDCA_OL_VV type DDCA_TRACE_OPTIONS add value DDCA_TRCOPT_WALLTIME (release 1.2.1) New Function Comments ddca_add_trace_groups Add to the set of traced groups ddca_get_extended_version_string Version string with optional suffix, e.g. \"1.1.2-rc2\" ddca_redetect_displays Redetect displays ddca_get_display_refs Returns a null-terminated list of valid DDCA_Display_Refs ddca_get_display_info Returns DDCA_Display_Info for a DDCA_Display_Ref Notes: The existing API function ddca_set_trace_groups() replaces the existing set of trace groups, whereas new API function ddca_add_trace_groups() adds to the current set. Calling ddca_get_display_refs() followed by calling ddca_get_display_info() for each display is preferred over ddca_get_display_info_list2() . Experience has shown that it leads to cleaner client code. Changed Function Comments ddca_report_display_info() New Macro Comments DDCUTIL_VSUFFIX version suffix, may be \"\"","title":"API changes"},{"location":"c_api_120/#miscellaneous-libddcutil-changes","text":"Additional checks are performed on DDCA_Display_Ref and DDCA_Display_Handle function arguments. assert{} statements are used in libddcutil for situations that should be logically impossible. To aid in remote problem diagnosis, many of these statements have been replaced by macro TRACE_ASSERT(), which additionally writes a messsage to both the libddcutil trace log and the system log. Recognize configuration file option --libddcutil-trace-file --library-trace-file","title":"Miscellaneous libddcutil changes"},{"location":"c_api_130/","text":"Shared Library Changes for Release 1.3.0 Overview This release contains a handful of changes, none of which affect backward compatibility. Consequently, the libddcutil SONAME (libddcutil.so.4) is unchanged. The full library name is libddcuti.so.4.2.0 In conformance with Debian practice, the package name is libddcutil4 . API changes New Function Comments ddca_enable_sleep_suppression now a no-op, returns false ddca_is_sleep_suppression_enabled always returns false ddca_force_slave_address now a non-op, returns false ddca_is_force_slave_address_enabled always returns false Notes: Function ddca_enable_sleep_suppression() only eliminated sleeps in certain particular situations where the DDC/CI specification is ambiguous. The use of sleeps in these cases has proven unnecessary. Function ddca_force_slave_address() had meaning only when using the i2c-dev write()/read() interface. libddcutil now uses the ioctl() interface exclusively. (But note that use of the write()/read() interface was renabled in release 1.4.0.) Changed Function Comments ddca_report_active_displays show additional information Notes: ddca_report_active_displays() shows additional information about DRM connection, conflicting drivers. Miscellaneous Changes library initialization recognizes environment variable DDCUTIL_DEBUG_LIBINIT","title":"Shared Library Changes for Release 1.3.0"},{"location":"c_api_130/#shared-library-changes-for-release-130","text":"","title":"Shared Library Changes for Release 1.3.0"},{"location":"c_api_130/#overview","text":"This release contains a handful of changes, none of which affect backward compatibility. Consequently, the libddcutil SONAME (libddcutil.so.4) is unchanged. The full library name is libddcuti.so.4.2.0 In conformance with Debian practice, the package name is libddcutil4 .","title":"Overview"},{"location":"c_api_130/#api-changes","text":"New Function Comments ddca_enable_sleep_suppression now a no-op, returns false ddca_is_sleep_suppression_enabled always returns false ddca_force_slave_address now a non-op, returns false ddca_is_force_slave_address_enabled always returns false Notes: Function ddca_enable_sleep_suppression() only eliminated sleeps in certain particular situations where the DDC/CI specification is ambiguous. The use of sleeps in these cases has proven unnecessary. Function ddca_force_slave_address() had meaning only when using the i2c-dev write()/read() interface. libddcutil now uses the ioctl() interface exclusively. (But note that use of the write()/read() interface was renabled in release 1.4.0.) Changed Function Comments ddca_report_active_displays show additional information Notes: ddca_report_active_displays() shows additional information about DRM connection, conflicting drivers.","title":"API changes"},{"location":"c_api_130/#miscellaneous-changes","text":"library initialization recognizes environment variable DDCUTIL_DEBUG_LIBINIT","title":"Miscellaneous Changes"},{"location":"c_api_140/","text":"Shared Library Changes for Release 1.4.0 Overview This release contains a handful of changes, none of which affect backward compatibility. Consequently, the libddcutil SONAME is remains libddcutil.so.4. The full shared library names is libddcutil.so.4.3.0. In conformance with Debian practice, the package name is libddcutil4 . API changes Changed Function Comments ddca_set_sleep_multiplier allow 0 as valid value, return -1.0 for invalid value ddca_set_default_sleep_multiplier allow 0 as valid value, return -1.0 for invalid value ddca_enable_force_slave_address re-enabled ddca_is_force_slave_address_enabled re-enabled Notes: ddca_enable_force_slave_address() affects only the i2c-dev write()/read() interface, not the ioctl() interface. The use of 0 as a sleep-multiplier value is very unlikely to work. It is permitted to allow for some unexpected API use. Miscellaneous Write additional error and trace messages to system log. (Whether any messages are actually written to the system log is controlled by configure options --enable-syslog , --disable-syslog . The default is --enable-syslog .","title":"Shared Library Changes for Release 1.4.0"},{"location":"c_api_140/#shared-library-changes-for-release-140","text":"","title":"Shared Library Changes for Release 1.4.0"},{"location":"c_api_140/#overview","text":"This release contains a handful of changes, none of which affect backward compatibility. Consequently, the libddcutil SONAME is remains libddcutil.so.4. The full shared library names is libddcutil.so.4.3.0. In conformance with Debian practice, the package name is libddcutil4 .","title":"Overview"},{"location":"c_api_140/#api-changes","text":"Changed Function Comments ddca_set_sleep_multiplier allow 0 as valid value, return -1.0 for invalid value ddca_set_default_sleep_multiplier allow 0 as valid value, return -1.0 for invalid value ddca_enable_force_slave_address re-enabled ddca_is_force_slave_address_enabled re-enabled Notes: ddca_enable_force_slave_address() affects only the i2c-dev write()/read() interface, not the ioctl() interface. The use of 0 as a sleep-multiplier value is very unlikely to work. It is permitted to allow for some unexpected API use.","title":"API changes"},{"location":"c_api_140/#miscellaneous","text":"Write additional error and trace messages to system log. (Whether any messages are actually written to the system log is controlled by configure options --enable-syslog , --disable-syslog . The default is --enable-syslog .","title":"Miscellaneous"},{"location":"c_api_200/","text":"Shared Library Changes for the Next Release (Draft) Overview The shared library libddcutil is not backwardly compatible. The SONAME is now libddcutil.so.5. The released library file is libddcutil.so.5.0.0. In conformance with Debian practice, the package name is libddcutil5 . To support programs that that use the old shared library, libddcuti.so.4 will continue to be published as package libddcutil4 . Because necessary changes required incrementing the major version of the shared library, it provided an opportunity to remove a large number of functions that were deprecated, made unnecessary by the ability to pass command line options to libddcutil , or otherwise cluttered the API and ABI. In practice, most existing programs will at most require recompilation to use the new version of the shared library. Library Initialization Library initialization has been reworked extensively to move operations that can fail, along with various settings that should be under control of the library user, into a new function ddca_init() . This function: controls the level of messages written to the system log optionally processes options obtained from the ddcutil configuration file processes additional options passed as a string sets error information for ddca_get_error_detail() If this function is not called by the user program, any API function that relies on its processing invokes ddca_init() using arguments such that it never fails, e.g. the configuration file is not processed. As a result, most programs that use the shared library will work with just recompilation. Execution Options These options apply only to libddcutil , not to ddcutil . They can be specified in configuration file $HOME/.config/ddcutil/ddcutilrc, or in the libopts string passed to ddca_init() . Option --trcapi : Trace the specified API function and its called functions. Option --profile-api : Collect performance statistics for API functions that perform display IO, and report them when the shared library is terminated. API changes New typedefs Comments DDCA_Init_Options enum of ddca_init() options DDCA_Syslog_Level enum of ddcutil severity levels for msgs written to the system log DDCA_HotplugFunc signature of callback function reporting a display hotplug event New Functions Comments ddca_init Perform library initialization ddca_libddcutil_filename Returns the fully qualified name of the shared library ddca_syslog_level_from_name Given its symbolic name, return a DDCA_Syslog_Level value ddca_register_display_hotplug_callback Registers a function of type DDCA_Display_Hotplug_Func which will be called to inform the client of display hotplug events. ddca_unregister_display_hotplug_callback Unregister a callback Changed Functions Comments ddca_set_sleep_multiplier Operates on the display, if any, open in the current thread ddca_get_sleep_multiplier Returns the value for the display, if any, open in the current thread ddca_get_display_list Returns status code, sets error detail ddca_report_display_info Returns DDCA_Status instead of void ddca_show_stats Optionally report per-display stats, not per-thread stats With the ability to configure libddcutil operation both by the ddcutil configuration file and by passing an option string in the ddca_init() arguments, many API functions are no longer needed and have been removed. These are unlikely to have been used by any existing clients other than ddcui . Removed Max-Tries Functions Equivalent Option ddca_max_max_tries No option equivalent ddca_get_max_tries No option equivalent ddca_set_max_tries Use option --maxtries Removed Sleep-Multiplier Functions Comments ddca_set_default_sleep_multiplier Use option --sleep-multiplier ddca_get_default_sleep_multiplier No option equivalent ddca_set_global_sleep_multiplier Previously deprecated ddca_get_global_sleep_multiplier Previously deprecated Removed Tracing Typedefs Comments DDCA_Trace_Options used by ddca_set-trace_options() Removed Tracing Functions Comments ddca_add_traced_function Use option --trcfunc ddca_add_traced_file Use option --trcfile ddca_set_trace_groups Use option --trace ddca_add_trace_groups Use option --trace ddca_trace_group_name_to_value Not needed ddca_set_trace_options Use options --thread-id --timestamp, --wall-timestamp Most per-thread statistics are now instead maintained on a per-display basis. The following functions are no longer useful and have been removed: Removed Per-Thread Functions Comments ddca_set_thread_description No longer useful ddca_append_thread_description No longer useful ddca_get_thread_desription No longer useful Remove previously deprecated functions that had been replaced by more useful versions Removed Function Comments ddca_get_feature_name_by_dref Had been replaced by ddca_get_feature_metadata_by_dref() ddca_get_formatted_vcp_value Did not support user defined features ddca_open_display Had been replaced by ddca_open_display2(). Miscellaneous Symbols for functions that had previously been removed from ddcutil_c_api.h are no longer exported.","title":"Shared Library Changes for the Next Release"},{"location":"c_api_200/#shared-library-changes-for-the-next-release-draft","text":"","title":"Shared Library Changes for the Next Release (Draft)"},{"location":"c_api_200/#overview","text":"The shared library libddcutil is not backwardly compatible. The SONAME is now libddcutil.so.5. The released library file is libddcutil.so.5.0.0. In conformance with Debian practice, the package name is libddcutil5 . To support programs that that use the old shared library, libddcuti.so.4 will continue to be published as package libddcutil4 . Because necessary changes required incrementing the major version of the shared library, it provided an opportunity to remove a large number of functions that were deprecated, made unnecessary by the ability to pass command line options to libddcutil , or otherwise cluttered the API and ABI. In practice, most existing programs will at most require recompilation to use the new version of the shared library.","title":"Overview"},{"location":"c_api_200/#library-initialization","text":"Library initialization has been reworked extensively to move operations that can fail, along with various settings that should be under control of the library user, into a new function ddca_init() . This function: controls the level of messages written to the system log optionally processes options obtained from the ddcutil configuration file processes additional options passed as a string sets error information for ddca_get_error_detail() If this function is not called by the user program, any API function that relies on its processing invokes ddca_init() using arguments such that it never fails, e.g. the configuration file is not processed. As a result, most programs that use the shared library will work with just recompilation.","title":"Library Initialization"},{"location":"c_api_200/#execution-options","text":"These options apply only to libddcutil , not to ddcutil . They can be specified in configuration file $HOME/.config/ddcutil/ddcutilrc, or in the libopts string passed to ddca_init() . Option --trcapi : Trace the specified API function and its called functions. Option --profile-api : Collect performance statistics for API functions that perform display IO, and report them when the shared library is terminated.","title":"Execution Options"},{"location":"c_api_200/#api-changes","text":"New typedefs Comments DDCA_Init_Options enum of ddca_init() options DDCA_Syslog_Level enum of ddcutil severity levels for msgs written to the system log DDCA_HotplugFunc signature of callback function reporting a display hotplug event New Functions Comments ddca_init Perform library initialization ddca_libddcutil_filename Returns the fully qualified name of the shared library ddca_syslog_level_from_name Given its symbolic name, return a DDCA_Syslog_Level value ddca_register_display_hotplug_callback Registers a function of type DDCA_Display_Hotplug_Func which will be called to inform the client of display hotplug events. ddca_unregister_display_hotplug_callback Unregister a callback Changed Functions Comments ddca_set_sleep_multiplier Operates on the display, if any, open in the current thread ddca_get_sleep_multiplier Returns the value for the display, if any, open in the current thread ddca_get_display_list Returns status code, sets error detail ddca_report_display_info Returns DDCA_Status instead of void ddca_show_stats Optionally report per-display stats, not per-thread stats With the ability to configure libddcutil operation both by the ddcutil configuration file and by passing an option string in the ddca_init() arguments, many API functions are no longer needed and have been removed. These are unlikely to have been used by any existing clients other than ddcui . Removed Max-Tries Functions Equivalent Option ddca_max_max_tries No option equivalent ddca_get_max_tries No option equivalent ddca_set_max_tries Use option --maxtries Removed Sleep-Multiplier Functions Comments ddca_set_default_sleep_multiplier Use option --sleep-multiplier ddca_get_default_sleep_multiplier No option equivalent ddca_set_global_sleep_multiplier Previously deprecated ddca_get_global_sleep_multiplier Previously deprecated Removed Tracing Typedefs Comments DDCA_Trace_Options used by ddca_set-trace_options() Removed Tracing Functions Comments ddca_add_traced_function Use option --trcfunc ddca_add_traced_file Use option --trcfile ddca_set_trace_groups Use option --trace ddca_add_trace_groups Use option --trace ddca_trace_group_name_to_value Not needed ddca_set_trace_options Use options --thread-id --timestamp, --wall-timestamp Most per-thread statistics are now instead maintained on a per-display basis. The following functions are no longer useful and have been removed: Removed Per-Thread Functions Comments ddca_set_thread_description No longer useful ddca_append_thread_description No longer useful ddca_get_thread_desription No longer useful Remove previously deprecated functions that had been replaced by more useful versions Removed Function Comments ddca_get_feature_name_by_dref Had been replaced by ddca_get_feature_metadata_by_dref() ddca_get_formatted_vcp_value Did not support user defined features ddca_open_display Had been replaced by ddca_open_display2().","title":"API changes"},{"location":"c_api_200/#miscellaneous","text":"Symbols for functions that had previously been removed from ddcutil_c_api.h are no longer exported.","title":"Miscellaneous"},{"location":"c_api_90/","text":"C API Changes for Release 0.9.0 See also: - Main C API Page The C API has been extensively revised reflecting experience gained from work on a Qt C++ GUI interface. New header files: File Name Contents ddcutil_macros.h Macros to specify the ddcutil version at compile time ddcutil_status_codes.h Status codes defined by ddcutil Multithreading There is rudiementary support for multi-threaded use of the API. Considerations: It is safe to perform simultaneous operations on separate displays (using distinct display handles) on separate threads. Multiple simultaneous DDC operations on the same display will have unpredictable results. Do not open multiple handles for the same display. The ddcutil API prevents opening multiple handles for devices with the same DDCA_IO_Path, which blocks the most common case. However, it is conceivable that the same monitor might be connected in multiple ways (e.g. with both a DDC and USB connection), with multiple cards, or even from separate computers. In this case it is the application's or even user's responsibility to ensure that conflict does not occur. The following settings are now thread specific: whether setvcp verification is enabled ( ddca_enable_verify() , ddca_is_verify_enabled() ) output redirection ( ddca_set_fout() , etc.) output level ( ddca_set_output_level() , ddca_get_output_level() ) Presently, multi-threaded operation is best managed in the application. The C++ Qt based GUI currently under development does the following: - Calls ddca_get_display_info_list() to enumerate the displays - Opens the display (i.e. creates a DDCA_Display_Handle ) - Maintains a queue of requests - Calls the ddcutil API for each request, and updates the GUI accordingly Library Build Information No changes. Unchanged Comments ddca_ddcutil_version() ddca_ddcutil_version_string() ddca_build_options() Status Code Functions No changes. Unchanged Comments ddca_rc_name() ddca_rc_desc() Detailed Error Reports In some cases, detailed error information is appopriate, particularly when there are multiple causes, each of which should be reported. The following functions get and release detailed error reports for the most recent API call. Currently implemented only for ddca_set_profile_related_values() , reports each case of invalid data in the input and the line at which it occurred. New Comments ddca_get_error_detail() Get detailed error information for most recent API call ddca_free_error_detai() Free detailed error information Global Settings Unchanged Comments ddca_max_max_tries() ddca_get_max_tries() ddca_set_max_tries() Changed Comments ddca_enable_verify() now thread-specific setting, returns prior value ddca_is_verify_enabled() now thread-specific setting Output Redirection and Capture Output redirection is now thread-specific. Changed Functions Comments ddca_set_fout() now thread-specific ddca_set_fout_to_default() now thread-specific ddca_set_ferr() now thread-specific ddca_set_ferr_to_default() now thread-specific Added convenience functions to capture output normally directed to the terminal. Output capture is thread specific. New Comments ddca_start_capture() Begin capturing output ddca_end_capture() Terminates capture, returns the captured value For examples of output redirection, see sample program demo_redirection.c . Message Control Output level settings are now thread-specific. Changed Comments ddca_get_output_level() now thread-specific ddca_set_output_level() now thread-specific, returns old level Unchanged Comments ddca_output_level_name() Statistics and Diagnostics Statistics and diagnostics control are global, not thread-specific. Unchanged Comments ddca_reset_stats() ddca_show_stats() ddca_is_report_ddc_errors_enabled() Changed Comments ddca_enable_report_ddc_errors() returns old level New Comments ddca_enable_error_info() control display of internal exception reports Feature Lists Struct DDCA_Feature_List specifies a set of VCP feature codes using a 256 bit array. Functions and constants for operating on feature lists: New Comments ddca_feature_list_add() add a VCP feature code to the list ddca_feature_list_and() returns intersection of 2 lists ddca_feature_list_and_not() returns the features in one list that are not in a second ddca_feature_list_clear() clear all entries in the feature list ddca_feature_list_contains() check if a VCP feature code is in the list ddca_feature_list_count() number of features in list ddca_feature_list_id_name() get symbolic name of feature list id ddca_feature_list_or() returns union of 2 feature lists ddca_feature_list_string() returns a string representation of a feature list ddca_get_feature_list_by_dref() returns a feature list identifying the features in named feature set (e.g. COLOR) DDCA_EMPTY_FEATURE_LIST an empty feature list For an example of using feature lists, see sample program demo_feature_list.c . MCCS Version Identification To date, the API has had two different ways to specify the Monitor Control Command Set (MCCS) version: - DDCA_MCCS_Version_Spec , a pair of 8 bit unsigned integers. - DDCA_MCCS_Version_Id , an enum of valid MCCS versions. Going forward, the API will use DDCA_MCCS_Version_Spec . Existing functions using DDCA_MCCS_Version_Id are retained, but are marked as deprecated and will be removed in a future release. Once the deprecated functions are removed, there will likely be some simplification of the remaining function names. Symbolic constants DDCA_VSPEC_V10 etc. have been added for DDCA_MCCS_Version_Spec values. Deprecated Comments DDCA_MCCS_Version_Id MCCS version enum ddca_mccs_version_id_name() ddca_mccs_version_id_desc() ddca_get_mccs_version_id() Get MCCS version id for display handle Unchanged Comments ddca_get_mccs_version() takes DDCA_Display_Handle argument Background: Each way to specify the MCCS version has its advantages. DDCA_MCCS_Version_Spec was chosen because it is the form already used in the MCCS spec. DDCA_MCCS_Version_Spec - Feature code xDF (get MCCS version) returns a number pair - The capabilities string specifies the MCCS version as a number pair DDCA_MCCS_Version_Id - There are only a handful of valid version numbers - Simplifies version specification - Simplifies version comparisons, which are complicated by the fact that both Version 3.0 and Version 2.2 are independent successors to Version 2.1. Detect Displays ddca_display_info_list2() replaces ddca_display_info_list() , allows for including displays that don't support DDC, signature returns a status code, conforming to standard API pattern ddca_report_displays() replaces ddca_report_active_displays , added parm to allow for reporting invalid displays Struct DDCA_Display_Info now has a field for the MCCS version. Deprecated Comments ddca_get_display_info_list() Use ddca_get_display_info_list2() ddca_report_active_displays() Use ddca_report_displays() Unchanged Comments ddca_report_display_info() ddca_report_display_info_list() ddca_free_display_info_list() New Comments ddca_get_display_info_list2() Can include displays that don't support DDC ddca_report_display_by_dref() Report display information using code in ddcutil detect ddca_report_displays() Optionally include displays that don't support DDC Display Identifiers No changes. Unchanged Functions Comments ddca_create_dispno_display_identifier() ddca_create_busno_display_identifier() ddca_create_adlno_display_identifier() ddca_create_mfg_model_sn_display_identifier() ddca_create_edid_display_identifier() ddca_create_usb_display_identifier() ddca_create_usb_hiddev_display_identifier() ddca_free_display_identifier() ddca_did_repr() Display References Deprecated Comments ddca_get_edid_by_dref() renamed, was ddca_get_edid_by_display_reference() Unchanged Comments ddca_create_display_ref() ddca_free_display_ref() ddca_dref_repr() Changed Comments ddca_dbgrpt_display_ref() renamed, was ddca_report_display_ref() New Comments ddca_report_display_by_dref() Display Handles Deprecated API Functions Comments ddca_open_display() Use ddca_open_display2() Unchanged Comments ddca_close_display() ddca_dh_repr() New Comments ddca_open_display2() allows for waiting if display locked by another thread ddca_display_ref_from_handle() Capabilities String Unchanged Comments ddca_get_capabilities_string() ddca_parse_capabilities_string() ddca_free_parsed_capabilities() Changed Comments ddca_report_parsed_capabilities() interprets feature and value codes Added Comments ddca_feature_list_from_capabilities() Create feature id bitifield from capabilities Feature Metadata Struct DDCA_Version_Feature_Info and related functions are deprecated. Instead, the master record for feature metadata is now DDCA_Feature_Metadata . Deprecated and Deleted Comments DDCA_Version_Feature_Info use DDCA_Feature_Metadata ddca_get_feature_info_by_vcp_version() Use ddca_get_feature_metadata() - in 0.8.7 ddca_get_feature_info_by_display() Use ddca_get_feature_metadata() ddca_free_feature_info() in 0.8.7? ddca_get_simple_sl_value_table() Takes a DDCA_MCCS_Version_Id argument. Unchanged Comments ddca_get_feature_name() Added Structs and Functions Comments DDCA_Feature_Metadata replaces DDCA_Version_Feature_Info ddca_get_feature_metadata_by_dref() ddca_get_feature_metadata_by_dh() ddca_free_feature_metadata_contents() Additional new granular functions Comments ddca_feature_name_by_dref() ddca_get_simple_sl_value_table_by_dref() Gets table of valid values if flag DDCA_SIMPLE_NC is set in DDCA_Feature_Flags . Miscellaneous changes: - Bitfield DDCA_Version_Feature_Flags now has bit DDCA_NC_COMPLEX , indicating a VCP code (designated by MCCS as Non-Continuous) that uses certain values as an NC feature and uses the remaining range for continyous adjustment. An example of such a feature is VCP code x62 (Audio Speaker Volume) as defined in MCCS versions 3.0 and 2.2, where value x00 is defined as \"Fixed (default level)\", value xFF is \"Mute\", and values x01..xFE provide a continuous range for volume adjustment. NC Feature Value Lookup (See Metadata section for discussion of getting lookup tables) Deprecated and Deleted Functions Comments ddca_get_simple_nc_feature_value_name() Get feature metadata, then use ddca_get_simple_nc_feature_name_by_table() ddca_get_simple_nc_feature_value_name_by_display() Get feature metadata, then use ddca_get_simple_nc_feature_name_by_table() New Comments ddca_get_simple_nc_feature_value_name_by_table() new Symbol Name Changes Numerous symbols have been renamed for clarity and consistency. General changes: - The names of report functions that display internal data structures for debugging, as opposed to reports designed to be shown to users, now begin with \"ddca_dbgrpt_\" instead of \"ddca_report_\". - Enum values DDCA_V10 etc. are now DDCA_MCCS_V10 etc. (but note that the use of DDCA_MCCS_Version_Id is deprecated in favor of DDCA_MCCS_Version_Spec ) - Names of parameters that specify the address at which a pointer is to be returned now generally end in \"_loc\". Specific changes not listed elsewhere: Old Name New Name DDCA_IO_DEVI2C DDCA_IO_I2C Naming patterns: - Functions that always return the same value generally do not include \" _get_ \" in their names, e.g. ddca_ddcutil_version() , ddca_max_max_tries() - In the case of \"overloaded\" functions, \" _by_ \" is usually used to distinguish variants, e.g. ddca_get_feature_metadata_by_vspec() , ddca_get_feature_metadata_by_dref() , get_feature_metadata_by_display() - However, in the case where there the result depends on a single input value from which the result is extracted, \" _from_ \" is used, e.g. ddca_mmk_from_dref() , ddca_mmk_from_dh() Get and Set VCP Feature Values DDCA_Any_Vcp_Value vs DDCA_Non_Table_Vcp_Value The API provides functions for getting, setting, and otherwise processing VCP values in 3 forms, using the type specific DDCA_Non_Table_Vcp_Value or DDCA_Table_Vcp_Value or the more general DDCA_Any_Vcp_Value . The first form is simpler to use, and does not entail the allocation of arbitrarily size buffers. As a practical matter, while the MCCS spec defines Table type features, they have not been observed on any monitors. Supporting Table type features in a UI adds complexity. API users will probably want to use the simpler DDCA_Non_Table_Vcp_Value functions. The following tables summarize the structs and API functions for getting and setting VCP feature values. Deprecated Comments ddca_set_simple_nc_vcp_value() unchanged, but deprecated ddca_set_continuous_vcp_value() unchanged, but deprecated Changed Comments DDCA_Non_Table_Vcp_Value renamed, was DDCA_Non_Table_Value DDCA_Table_Vcp_Value renamed, was DDCA_Table_Value ddca_get_non_table_vcp_value() renamed, was ddca_get_nontable_vcp_value() ddca_get_any_vcp_value_using_explicit_type() renamed, was ddca_get_any_vcp_value(), parm type change ddca_set_non_table_vcp_value() renamed, was ddca_set_raw_vcp_value() ddca_get_table_vcp_value() parameter change ddca_free_table_vcp_value() renamed from ddca_free_table_value_response() New Comments ddca_get_any_vcp_value_using_implicit_type() new function ddca_set_table_vcp_value() new ddca_set_any_vcp_value() new ddca_free_any_vcp_value() new dbgrpt_any_vcp_value() new Get or Set Multiple Values Unchanged Comments ddca_get_profile_related_values() Changed Comments ddca_set_profile_related_values() add display handle parm if ddca_set_profile_related_values() returns DDCRC_BAD_DATA , ddca_get_error_detail() returns a detailed error report. Format Feature Values Functions ddca_format_table_vcp_value() , ddca_format_non_table_vcp_value() , and ddca_format_any_vcp_value() format a feature value, based on its feature code and MCCS version. Function ddca_get_formatted_vcp_value() continues to exist, but is essentially a convenience function that combines reading a VCP value with formatting. Unchanged Comments ddca_get_formatted_vcp_value() unchanged New Comments ddca_format_non_table_vcp_value_by_dref() new ddca_format_table_vcp_value_by_dref() new ddca_format_any_vcp_value_by_dref() new Miscellaneous Changes ddca_enable_report_ddc_errors() , ddca_enable_verify() , ddca_set_output_level now return the prior setting Sample programs Sample programs have been revised to reflect API changes and new sample programs added. See the main C API page .","title":"Shared Library Changes for Release 0.9.0"},{"location":"c_api_90/#c-api-changes-for-release-090","text":"See also: - Main C API Page The C API has been extensively revised reflecting experience gained from work on a Qt C++ GUI interface. New header files: File Name Contents ddcutil_macros.h Macros to specify the ddcutil version at compile time ddcutil_status_codes.h Status codes defined by ddcutil","title":"C API Changes for Release 0.9.0"},{"location":"c_api_90/#multithreading","text":"There is rudiementary support for multi-threaded use of the API. Considerations: It is safe to perform simultaneous operations on separate displays (using distinct display handles) on separate threads. Multiple simultaneous DDC operations on the same display will have unpredictable results. Do not open multiple handles for the same display. The ddcutil API prevents opening multiple handles for devices with the same DDCA_IO_Path, which blocks the most common case. However, it is conceivable that the same monitor might be connected in multiple ways (e.g. with both a DDC and USB connection), with multiple cards, or even from separate computers. In this case it is the application's or even user's responsibility to ensure that conflict does not occur. The following settings are now thread specific: whether setvcp verification is enabled ( ddca_enable_verify() , ddca_is_verify_enabled() ) output redirection ( ddca_set_fout() , etc.) output level ( ddca_set_output_level() , ddca_get_output_level() ) Presently, multi-threaded operation is best managed in the application. The C++ Qt based GUI currently under development does the following: - Calls ddca_get_display_info_list() to enumerate the displays - Opens the display (i.e. creates a DDCA_Display_Handle ) - Maintains a queue of requests - Calls the ddcutil API for each request, and updates the GUI accordingly","title":"Multithreading"},{"location":"c_api_90/#library-build-information","text":"No changes. Unchanged Comments ddca_ddcutil_version() ddca_ddcutil_version_string() ddca_build_options()","title":"Library Build Information"},{"location":"c_api_90/#status-code-functions","text":"No changes. Unchanged Comments ddca_rc_name() ddca_rc_desc()","title":"Status Code Functions"},{"location":"c_api_90/#detailed-error-reports","text":"In some cases, detailed error information is appopriate, particularly when there are multiple causes, each of which should be reported. The following functions get and release detailed error reports for the most recent API call. Currently implemented only for ddca_set_profile_related_values() , reports each case of invalid data in the input and the line at which it occurred. New Comments ddca_get_error_detail() Get detailed error information for most recent API call ddca_free_error_detai() Free detailed error information","title":"Detailed Error Reports"},{"location":"c_api_90/#global-settings","text":"Unchanged Comments ddca_max_max_tries() ddca_get_max_tries() ddca_set_max_tries() Changed Comments ddca_enable_verify() now thread-specific setting, returns prior value ddca_is_verify_enabled() now thread-specific setting","title":"Global Settings"},{"location":"c_api_90/#output-redirection-and-capture","text":"Output redirection is now thread-specific. Changed Functions Comments ddca_set_fout() now thread-specific ddca_set_fout_to_default() now thread-specific ddca_set_ferr() now thread-specific ddca_set_ferr_to_default() now thread-specific Added convenience functions to capture output normally directed to the terminal. Output capture is thread specific. New Comments ddca_start_capture() Begin capturing output ddca_end_capture() Terminates capture, returns the captured value For examples of output redirection, see sample program demo_redirection.c .","title":"Output Redirection and Capture"},{"location":"c_api_90/#message-control","text":"Output level settings are now thread-specific. Changed Comments ddca_get_output_level() now thread-specific ddca_set_output_level() now thread-specific, returns old level Unchanged Comments ddca_output_level_name()","title":"Message Control"},{"location":"c_api_90/#statistics-and-diagnostics","text":"Statistics and diagnostics control are global, not thread-specific. Unchanged Comments ddca_reset_stats() ddca_show_stats() ddca_is_report_ddc_errors_enabled() Changed Comments ddca_enable_report_ddc_errors() returns old level New Comments ddca_enable_error_info() control display of internal exception reports","title":"Statistics and Diagnostics"},{"location":"c_api_90/#feature-lists","text":"Struct DDCA_Feature_List specifies a set of VCP feature codes using a 256 bit array. Functions and constants for operating on feature lists: New Comments ddca_feature_list_add() add a VCP feature code to the list ddca_feature_list_and() returns intersection of 2 lists ddca_feature_list_and_not() returns the features in one list that are not in a second ddca_feature_list_clear() clear all entries in the feature list ddca_feature_list_contains() check if a VCP feature code is in the list ddca_feature_list_count() number of features in list ddca_feature_list_id_name() get symbolic name of feature list id ddca_feature_list_or() returns union of 2 feature lists ddca_feature_list_string() returns a string representation of a feature list ddca_get_feature_list_by_dref() returns a feature list identifying the features in named feature set (e.g. COLOR) DDCA_EMPTY_FEATURE_LIST an empty feature list For an example of using feature lists, see sample program demo_feature_list.c .","title":"Feature Lists"},{"location":"c_api_90/#mccs-version-identification","text":"To date, the API has had two different ways to specify the Monitor Control Command Set (MCCS) version: - DDCA_MCCS_Version_Spec , a pair of 8 bit unsigned integers. - DDCA_MCCS_Version_Id , an enum of valid MCCS versions. Going forward, the API will use DDCA_MCCS_Version_Spec . Existing functions using DDCA_MCCS_Version_Id are retained, but are marked as deprecated and will be removed in a future release. Once the deprecated functions are removed, there will likely be some simplification of the remaining function names. Symbolic constants DDCA_VSPEC_V10 etc. have been added for DDCA_MCCS_Version_Spec values. Deprecated Comments DDCA_MCCS_Version_Id MCCS version enum ddca_mccs_version_id_name() ddca_mccs_version_id_desc() ddca_get_mccs_version_id() Get MCCS version id for display handle Unchanged Comments ddca_get_mccs_version() takes DDCA_Display_Handle argument Background: Each way to specify the MCCS version has its advantages. DDCA_MCCS_Version_Spec was chosen because it is the form already used in the MCCS spec. DDCA_MCCS_Version_Spec - Feature code xDF (get MCCS version) returns a number pair - The capabilities string specifies the MCCS version as a number pair DDCA_MCCS_Version_Id - There are only a handful of valid version numbers - Simplifies version specification - Simplifies version comparisons, which are complicated by the fact that both Version 3.0 and Version 2.2 are independent successors to Version 2.1.","title":"MCCS Version Identification"},{"location":"c_api_90/#detect-displays","text":"ddca_display_info_list2() replaces ddca_display_info_list() , allows for including displays that don't support DDC, signature returns a status code, conforming to standard API pattern ddca_report_displays() replaces ddca_report_active_displays , added parm to allow for reporting invalid displays Struct DDCA_Display_Info now has a field for the MCCS version. Deprecated Comments ddca_get_display_info_list() Use ddca_get_display_info_list2() ddca_report_active_displays() Use ddca_report_displays() Unchanged Comments ddca_report_display_info() ddca_report_display_info_list() ddca_free_display_info_list() New Comments ddca_get_display_info_list2() Can include displays that don't support DDC ddca_report_display_by_dref() Report display information using code in ddcutil detect ddca_report_displays() Optionally include displays that don't support DDC","title":"Detect Displays"},{"location":"c_api_90/#display-identifiers","text":"No changes. Unchanged Functions Comments ddca_create_dispno_display_identifier() ddca_create_busno_display_identifier() ddca_create_adlno_display_identifier() ddca_create_mfg_model_sn_display_identifier() ddca_create_edid_display_identifier() ddca_create_usb_display_identifier() ddca_create_usb_hiddev_display_identifier() ddca_free_display_identifier() ddca_did_repr()","title":"Display Identifiers"},{"location":"c_api_90/#display-references","text":"Deprecated Comments ddca_get_edid_by_dref() renamed, was ddca_get_edid_by_display_reference() Unchanged Comments ddca_create_display_ref() ddca_free_display_ref() ddca_dref_repr() Changed Comments ddca_dbgrpt_display_ref() renamed, was ddca_report_display_ref() New Comments ddca_report_display_by_dref()","title":"Display References"},{"location":"c_api_90/#display-handles","text":"Deprecated API Functions Comments ddca_open_display() Use ddca_open_display2() Unchanged Comments ddca_close_display() ddca_dh_repr() New Comments ddca_open_display2() allows for waiting if display locked by another thread ddca_display_ref_from_handle()","title":"Display Handles"},{"location":"c_api_90/#capabilities-string","text":"Unchanged Comments ddca_get_capabilities_string() ddca_parse_capabilities_string() ddca_free_parsed_capabilities() Changed Comments ddca_report_parsed_capabilities() interprets feature and value codes Added Comments ddca_feature_list_from_capabilities() Create feature id bitifield from capabilities","title":"Capabilities String"},{"location":"c_api_90/#feature-metadata","text":"Struct DDCA_Version_Feature_Info and related functions are deprecated. Instead, the master record for feature metadata is now DDCA_Feature_Metadata . Deprecated and Deleted Comments DDCA_Version_Feature_Info use DDCA_Feature_Metadata ddca_get_feature_info_by_vcp_version() Use ddca_get_feature_metadata() - in 0.8.7 ddca_get_feature_info_by_display() Use ddca_get_feature_metadata() ddca_free_feature_info() in 0.8.7? ddca_get_simple_sl_value_table() Takes a DDCA_MCCS_Version_Id argument. Unchanged Comments ddca_get_feature_name() Added Structs and Functions Comments DDCA_Feature_Metadata replaces DDCA_Version_Feature_Info ddca_get_feature_metadata_by_dref() ddca_get_feature_metadata_by_dh() ddca_free_feature_metadata_contents() Additional new granular functions Comments ddca_feature_name_by_dref() ddca_get_simple_sl_value_table_by_dref() Gets table of valid values if flag DDCA_SIMPLE_NC is set in DDCA_Feature_Flags . Miscellaneous changes: - Bitfield DDCA_Version_Feature_Flags now has bit DDCA_NC_COMPLEX , indicating a VCP code (designated by MCCS as Non-Continuous) that uses certain values as an NC feature and uses the remaining range for continyous adjustment. An example of such a feature is VCP code x62 (Audio Speaker Volume) as defined in MCCS versions 3.0 and 2.2, where value x00 is defined as \"Fixed (default level)\", value xFF is \"Mute\", and values x01..xFE provide a continuous range for volume adjustment.","title":"Feature Metadata"},{"location":"c_api_90/#nc-feature-value-lookup","text":"(See Metadata section for discussion of getting lookup tables) Deprecated and Deleted Functions Comments ddca_get_simple_nc_feature_value_name() Get feature metadata, then use ddca_get_simple_nc_feature_name_by_table() ddca_get_simple_nc_feature_value_name_by_display() Get feature metadata, then use ddca_get_simple_nc_feature_name_by_table() New Comments ddca_get_simple_nc_feature_value_name_by_table() new","title":"NC Feature Value Lookup"},{"location":"c_api_90/#symbol-name-changes","text":"Numerous symbols have been renamed for clarity and consistency. General changes: - The names of report functions that display internal data structures for debugging, as opposed to reports designed to be shown to users, now begin with \"ddca_dbgrpt_\" instead of \"ddca_report_\". - Enum values DDCA_V10 etc. are now DDCA_MCCS_V10 etc. (but note that the use of DDCA_MCCS_Version_Id is deprecated in favor of DDCA_MCCS_Version_Spec ) - Names of parameters that specify the address at which a pointer is to be returned now generally end in \"_loc\". Specific changes not listed elsewhere: Old Name New Name DDCA_IO_DEVI2C DDCA_IO_I2C Naming patterns: - Functions that always return the same value generally do not include \" _get_ \" in their names, e.g. ddca_ddcutil_version() , ddca_max_max_tries() - In the case of \"overloaded\" functions, \" _by_ \" is usually used to distinguish variants, e.g. ddca_get_feature_metadata_by_vspec() , ddca_get_feature_metadata_by_dref() , get_feature_metadata_by_display() - However, in the case where there the result depends on a single input value from which the result is extracted, \" _from_ \" is used, e.g. ddca_mmk_from_dref() , ddca_mmk_from_dh()","title":"Symbol Name Changes"},{"location":"c_api_90/#get-and-set-vcp-feature-values","text":"DDCA_Any_Vcp_Value vs DDCA_Non_Table_Vcp_Value The API provides functions for getting, setting, and otherwise processing VCP values in 3 forms, using the type specific DDCA_Non_Table_Vcp_Value or DDCA_Table_Vcp_Value or the more general DDCA_Any_Vcp_Value . The first form is simpler to use, and does not entail the allocation of arbitrarily size buffers. As a practical matter, while the MCCS spec defines Table type features, they have not been observed on any monitors. Supporting Table type features in a UI adds complexity. API users will probably want to use the simpler DDCA_Non_Table_Vcp_Value functions. The following tables summarize the structs and API functions for getting and setting VCP feature values. Deprecated Comments ddca_set_simple_nc_vcp_value() unchanged, but deprecated ddca_set_continuous_vcp_value() unchanged, but deprecated Changed Comments DDCA_Non_Table_Vcp_Value renamed, was DDCA_Non_Table_Value DDCA_Table_Vcp_Value renamed, was DDCA_Table_Value ddca_get_non_table_vcp_value() renamed, was ddca_get_nontable_vcp_value() ddca_get_any_vcp_value_using_explicit_type() renamed, was ddca_get_any_vcp_value(), parm type change ddca_set_non_table_vcp_value() renamed, was ddca_set_raw_vcp_value() ddca_get_table_vcp_value() parameter change ddca_free_table_vcp_value() renamed from ddca_free_table_value_response() New Comments ddca_get_any_vcp_value_using_implicit_type() new function ddca_set_table_vcp_value() new ddca_set_any_vcp_value() new ddca_free_any_vcp_value() new dbgrpt_any_vcp_value() new","title":"Get and Set VCP Feature Values"},{"location":"c_api_90/#get-or-set-multiple-values","text":"Unchanged Comments ddca_get_profile_related_values() Changed Comments ddca_set_profile_related_values() add display handle parm if ddca_set_profile_related_values() returns DDCRC_BAD_DATA , ddca_get_error_detail() returns a detailed error report.","title":"Get or Set Multiple Values"},{"location":"c_api_90/#format-feature-values","text":"Functions ddca_format_table_vcp_value() , ddca_format_non_table_vcp_value() , and ddca_format_any_vcp_value() format a feature value, based on its feature code and MCCS version. Function ddca_get_formatted_vcp_value() continues to exist, but is essentially a convenience function that combines reading a VCP value with formatting. Unchanged Comments ddca_get_formatted_vcp_value() unchanged New Comments ddca_format_non_table_vcp_value_by_dref() new ddca_format_table_vcp_value_by_dref() new ddca_format_any_vcp_value_by_dref() new","title":"Format Feature Values"},{"location":"c_api_90/#miscellaneous-changes","text":"ddca_enable_report_ddc_errors() , ddca_enable_verify() , ddca_set_output_level now return the prior setting","title":"Miscellaneous Changes"},{"location":"c_api_90/#sample-programs","text":"Sample programs have been revised to reflect API changes and new sample programs added. See the main C API page .","title":"Sample programs"},{"location":"c_api_93/","text":"C API Changes for Release 0.9.3 Trace Control API functions to control tracing have been added. This API corresponds to ddcutil command line options --trace , --trcfunc , and --trcfile. Added enum DDCA_Trace_Group, whose values can be ORed together, to specify the classes to be traced. Flag Meaning DDCA_TRC_BASE Base functions DDCA_TRC_I2C I2C layer DDCA_TRC_ADL ADL layer DDCA_TRC_DDC Higher level functions in the DDC layer DDCA_TRC_USB USB connecte didplay DDCA_TRC_TOP ddcutil mailine ** DDCA_TRC_ENV environment command DDCA_TRC_API top level API functions DDCA_TRC_UDF user-defined functions DDCA_TRC_VCP VCP layer, feature definitions DDCA_TRC_DDCIO Low level functions in the DDC layer DDCA_TRC_NONE all tracing disabled DDCA_TRC_ALL all tracing enabled New Function Comments ddca_add_traced_function() turn on tracing for a specific function ddca_add_traced_file() turn on tracing for a specific source file ddca_set_trace_groups() turn on tracing for one or more trace groups Feature Metadata To allow for user supplied feature definitions, metadata requests are now generally tied to the display, by specifying a DDCA_Display_Ref or DDCA_Display_Handle instead of the VCP version. That is, when metadata is requested for a feature, we first look to see if there is a user supplied feature definition for the display. Absent that, the VCP version of the display is used to retrieve the appropriate feature definition. Eliminate typedef DDCA_Feature_Value_Table , which is defined as DDCA_Feature_Value_Entry , and is used to reference a feature value lookup table. Use DDCA_Feature_Value_Entry * * instead. Functions whose signatures are affected: Function Comments ddca_get_simple_nc_feature_value_name_by_table() Deleted Structs and Functions Comments struct DDCA_Version_Feature_Info used by feature_info functions ddca_get_feature_info_by_vcp_version() deprecated in 0.9.0, returned DDCA_Version_Feature_Info ddca_get_feature_info_by_display() deprecated in 0.9.0, returned DDCA_Version_Feature_Info ddca_free_feature_info() deprecated in 0.9.0 ddca_get_mccs_version_id() deprecated in 0.9.0 ddca_get_simple_sl_value_table() deprecated in 0.9.0, use ddca_get_feature_metadata...() variant ddca_get_simple_nc_feature_value_name_by_display() deprecated in 0.9.0 Deprecated Comments ddca_get_feature_name_by_dref() use ddca_get_feature_metadata() ddca_free_metadata_contents() use ddca_free_feature_metadata() Renamed Function Comments ddca_get_feature_name_by_dref() was ddca_feature_name_by_dref() Modified Functions Comments ddca_get_feature_metadata_by_vspec() returns pointer to new DDCA_Feature_Metadata ddca_get_feature_metadata_by_dref() returns pointer to new DDCA_Feature_Metadata ddca_get_feature_metadata_by_dh() returns pointer to new DDCA_Feature_Metadata The above functions now take a DDCA_Metadata** instead of a DDCA_Metadata* parm, i.e. they allocate a new DDCA_Metadata instance instance instead of filling in an exisitng instance. Funcations Added Comments ddca_free_feature_metadata() replaces ddca_free_metadata_contents() ddca_enable_udf() controls whether user supplied feature definitions are enabled ddca_is_udf_enabled() reports whether usr supplied feature definitions are enabled ddca_report_capabilities_by_dref() handles display-specific user supplied feature definitions ddca_report_capabilities_by_dh() handles display-specific user supplied feature definitions ddca_check_by_dref() ensures user supplied feature defintions are loaded ddca_check_by_dh() ensures user supplied feature defintions are loaded ddca_free_feature_metadata() ddca_report_parsed_capabilities_by_dref() uses user supplied feature definitions ddca_report_parsed_capabilities_by_dh() uses user supplied feature definitions The following flags have been added to field feature_flags in struct DDCA_Feature_Metadata or therir meaning may have been modified, and they may be visible when an instance is returned by the API: Bit flag DDCA_SYNTHETIC metadata was dynamically created for undefined feature DDCA_USER_DEFINED added, metadata is from user supplied feature definition Sample files reflect signature changes of ddca_get_feature_metadata_by_vspec() etc File name Comments demo_capabilities.c demo_get_set_vcp.c demo_vcpinfo.c Miscellaneous Functions Added Comments ddca_report_error_detail() Convenience function that formats DDCA_Error_Detail Removed structs and typedefs related to experimental async support Removed Comments enum DDCA_Queue_Request_Type struct DDCA_Queued_Request function prototype DDCA_Notification_Func function prototype Simple_Callback_Func","title":"Shared Library Changes for Release 0.9.3"},{"location":"c_api_93/#c-api-changes-for-release-093","text":"","title":"C API Changes for Release 0.9.3"},{"location":"c_api_93/#trace-control","text":"API functions to control tracing have been added. This API corresponds to ddcutil command line options --trace , --trcfunc , and --trcfile. Added enum DDCA_Trace_Group, whose values can be ORed together, to specify the classes to be traced. Flag Meaning DDCA_TRC_BASE Base functions DDCA_TRC_I2C I2C layer DDCA_TRC_ADL ADL layer DDCA_TRC_DDC Higher level functions in the DDC layer DDCA_TRC_USB USB connecte didplay DDCA_TRC_TOP ddcutil mailine ** DDCA_TRC_ENV environment command DDCA_TRC_API top level API functions DDCA_TRC_UDF user-defined functions DDCA_TRC_VCP VCP layer, feature definitions DDCA_TRC_DDCIO Low level functions in the DDC layer DDCA_TRC_NONE all tracing disabled DDCA_TRC_ALL all tracing enabled New Function Comments ddca_add_traced_function() turn on tracing for a specific function ddca_add_traced_file() turn on tracing for a specific source file ddca_set_trace_groups() turn on tracing for one or more trace groups","title":"Trace Control"},{"location":"c_api_93/#feature-metadata","text":"To allow for user supplied feature definitions, metadata requests are now generally tied to the display, by specifying a DDCA_Display_Ref or DDCA_Display_Handle instead of the VCP version. That is, when metadata is requested for a feature, we first look to see if there is a user supplied feature definition for the display. Absent that, the VCP version of the display is used to retrieve the appropriate feature definition. Eliminate typedef DDCA_Feature_Value_Table , which is defined as DDCA_Feature_Value_Entry , and is used to reference a feature value lookup table. Use DDCA_Feature_Value_Entry * * instead. Functions whose signatures are affected: Function Comments ddca_get_simple_nc_feature_value_name_by_table() Deleted Structs and Functions Comments struct DDCA_Version_Feature_Info used by feature_info functions ddca_get_feature_info_by_vcp_version() deprecated in 0.9.0, returned DDCA_Version_Feature_Info ddca_get_feature_info_by_display() deprecated in 0.9.0, returned DDCA_Version_Feature_Info ddca_free_feature_info() deprecated in 0.9.0 ddca_get_mccs_version_id() deprecated in 0.9.0 ddca_get_simple_sl_value_table() deprecated in 0.9.0, use ddca_get_feature_metadata...() variant ddca_get_simple_nc_feature_value_name_by_display() deprecated in 0.9.0 Deprecated Comments ddca_get_feature_name_by_dref() use ddca_get_feature_metadata() ddca_free_metadata_contents() use ddca_free_feature_metadata() Renamed Function Comments ddca_get_feature_name_by_dref() was ddca_feature_name_by_dref() Modified Functions Comments ddca_get_feature_metadata_by_vspec() returns pointer to new DDCA_Feature_Metadata ddca_get_feature_metadata_by_dref() returns pointer to new DDCA_Feature_Metadata ddca_get_feature_metadata_by_dh() returns pointer to new DDCA_Feature_Metadata The above functions now take a DDCA_Metadata** instead of a DDCA_Metadata* parm, i.e. they allocate a new DDCA_Metadata instance instance instead of filling in an exisitng instance. Funcations Added Comments ddca_free_feature_metadata() replaces ddca_free_metadata_contents() ddca_enable_udf() controls whether user supplied feature definitions are enabled ddca_is_udf_enabled() reports whether usr supplied feature definitions are enabled ddca_report_capabilities_by_dref() handles display-specific user supplied feature definitions ddca_report_capabilities_by_dh() handles display-specific user supplied feature definitions ddca_check_by_dref() ensures user supplied feature defintions are loaded ddca_check_by_dh() ensures user supplied feature defintions are loaded ddca_free_feature_metadata() ddca_report_parsed_capabilities_by_dref() uses user supplied feature definitions ddca_report_parsed_capabilities_by_dh() uses user supplied feature definitions The following flags have been added to field feature_flags in struct DDCA_Feature_Metadata or therir meaning may have been modified, and they may be visible when an instance is returned by the API: Bit flag DDCA_SYNTHETIC metadata was dynamically created for undefined feature DDCA_USER_DEFINED added, metadata is from user supplied feature definition Sample files reflect signature changes of ddca_get_feature_metadata_by_vspec() etc File name Comments demo_capabilities.c demo_get_set_vcp.c demo_vcpinfo.c","title":"Feature Metadata"},{"location":"c_api_93/#miscellaneous","text":"Functions Added Comments ddca_report_error_detail() Convenience function that formats DDCA_Error_Detail Removed structs and typedefs related to experimental async support Removed Comments enum DDCA_Queue_Request_Type struct DDCA_Queued_Request function prototype DDCA_Notification_Func function prototype Simple_Callback_Func","title":"Miscellaneous"},{"location":"c_api_95/","text":"C API Changes for Release 0.9.5 Display Reference Lifecycle While transient display references can exist internally in the command line version of ddcutil, in the shared library all display references are persistent. They are created during display enumeration at startup. Function ddca_create_display_ref() has been renamed to ddca_get_display_ref() to better indicate that it returns an existing display reference. There is never a need to free a display reference. Function Comment ddca_get_display_ref() Renamed from ddca_create_display_ref() ddca_create_display_ref() Marked as deprecated ddca_free_display_ref() Marked as deprecated, unnecessary Thank you to J\u00fcrgen Altfeld for his questions about this and other aspects of the API that have helped make it more consistent and hopefully easier to use. Thread Error Detail All API functions that return a DDCA_Status value now clear the thread error detail during function initialization. Therefore, a call to ddca_get_error_detail() is guaranteed to either return detailed error information for the immediately prior API call or NULL if no such information exists. The following additional functions now set thead error detail on failure. Function ddca_get_non_table_vcp_value() ddca_get_table_vcp_value() ddca_get_any_value_using_explicit_type() ddca_get_any_value_using_implicit_type() ddca_get_capabilities_string() Miscellaneous Move definitions of DDCA_Build_Option_Flags and DDCA_Capture_Option_Flags from ddcutil_c_api.h to ddcutil_types.h , to facilitate creation of a C++ API, as requested by J\u00fcrgen Altfeld. Some API functions returned DDCRC_ARG when passed an invalid parameter, others returned -EINVAL . All now return DDCRC_ARG . Functions Affected ddca_set_max_tries() ddca_create_mfg_model_sn_display_identifier() ddca_create_edid_display_identifier() ddca_create_display_ref() ddca_get_feature_list_by_dref() ddca_get_feature_name_by_dref() API functions can no longer return DDCRC_UNINITIALIZED as initializion is guaranteed when the shared library is loaded The following functions now return \"const char *\" instead of \"char *\" to emphasize that they return pointers into internal ddcutil data structures that should not be freed. Note that this is a non-upwardly compatible API change that may require client changes. Function ddca_rc_name() ddca_rc_desc() ddca_did_repr() ddca_dref_repr() ddca_dh_repr() ddca_get_feature_name() ddca_feature_list_string() Precondition Failure API function precondition failures reflect an error in the calling client program. How best to deal with them? Multiple design principles apply here. Unfortunately, they conflict: - Libraries should not crash - Programming errors should cause immediate and spectacular failure - Client programs should not have to test for return codes that reflect programming errors. This clutters the code. Java addresses this conundrum through the use of RuntimeExceptions, such as NullPointerException and IllegalArgumentException, which need not be caught, or can be caught at the top level of a program. Unfortunately, C doesn't provide such an elegant solution. Until now, many precondition tests have been done using assert() statements. This is not a long term solution, since assert()s can be disabled when programs are built for production. Other precondition failures have resulted in a return code of DDCRC_ARG . As a first step, the assert() statements and other precondition tests have been unified with a common set of macros. This at least provides more consistent behavior, and will facilitate future changes. For now, a precondition failure results in a message to stderr and a return code of DDCRC_ARG . In the future, this may change to a message followed by library abort. Or the behavior may be controlled by the client using an API call to select the desired behavior. Comments on this design issue are invited. Notes on Freeing Resources ddca_free_ functions fall into two groups, those that specify client side data structures and are referenced by a normal pointer, and those that specify internal library data structures and are referenced by an opaque pointer. Those that specify client side data structures are essentially convenience functions, relieving the client programmer of the details of freeing what may be a complex data structure. These functions always return void. If passed a NULL pointer, they do nothing. Functions that free client data structures ddca_free_error_detail() ddca_free_display_info_list() ddca_free_parsed_capabilities() ddca_free_table_vcp_value() ddca_free_any_vcp_value() ddca_free_feature_metadata() Functions that free internal library data structures take an opaque pointer as an argument. These functions return a DDCA_Status . They return DDCRC_ARG if the pointer is invalid. If the pointer is NULL, the function does nothing and DDCRC_OK is returned. Depending on the function, additional status codes are possible. Whether or not memory is actually freed is a hidden implementation detail, as some opaque pointers reference persistent internal data structures. Functions that free internal library data structures ddca_free_display_identifier() ddca_close_display() Additional Notes: If a function that creates a resource (e.g. ddca_create_busno_display_identifier() ) returns other than DDCRC_OK (0), then the resource is not created and need not be freed. In general, the order in which the ddca_free_ functions are called does not matter. The ddca_free_ functions are not idempotent. Attempting to free an already freed opaque resource will likely return DDCA_ARG , but may result in a segfault. Attempting to free an already freed client side resource will also likely result in a segfault. Newly Deprecated Functions API function ddca_get_formatted_vcp_value() is marked as deprecated and will be removed in a future release. It does not support user defined data types. Previously Deprecated Functions Deleted The following functions and type definitions, along with related constants, were deprecated in Release 0.9.0. They have now been deleted from files ddcutil_c_api.h and ddcutil_types.h *. Function or Typedef Deleted Comment DDCA_MCCS_Version_Id use DDCA_MCCS_Version_Spec ddca_get_mccs_version_id_name() ddca_get_mccs_version_id_desc() ddca_get_display_info_list() use ddca_get_display_info_list2() ddca_get_simple_feature_value_name_by_display() obtain from DDCA_Feature_Metadata ddca_get_edid_by_dref() obtain from DDCA_Feature_Metadata ddca_open_display() use ddca_open_display2() ddca_set_simple_nc_vcp_value() use ddca_set_non_table_vcp_value() ddca_set_continuous_vcp_value() use ddca_set_non_table_vcp_value() Sample Programs The sample client programs have been modified to reflect the API changes. Fixed an incorrect printf() format string in sample program demo_get_set_vcp.c. Reported by J\u00fcrgen Altfeld.","title":"Shared Library Changes for Release 0.9.5"},{"location":"c_api_95/#c-api-changes-for-release-095","text":"","title":"C API Changes for Release 0.9.5"},{"location":"c_api_95/#display-reference-lifecycle","text":"While transient display references can exist internally in the command line version of ddcutil, in the shared library all display references are persistent. They are created during display enumeration at startup. Function ddca_create_display_ref() has been renamed to ddca_get_display_ref() to better indicate that it returns an existing display reference. There is never a need to free a display reference. Function Comment ddca_get_display_ref() Renamed from ddca_create_display_ref() ddca_create_display_ref() Marked as deprecated ddca_free_display_ref() Marked as deprecated, unnecessary Thank you to J\u00fcrgen Altfeld for his questions about this and other aspects of the API that have helped make it more consistent and hopefully easier to use.","title":"Display Reference Lifecycle"},{"location":"c_api_95/#thread-error-detail","text":"All API functions that return a DDCA_Status value now clear the thread error detail during function initialization. Therefore, a call to ddca_get_error_detail() is guaranteed to either return detailed error information for the immediately prior API call or NULL if no such information exists. The following additional functions now set thead error detail on failure. Function ddca_get_non_table_vcp_value() ddca_get_table_vcp_value() ddca_get_any_value_using_explicit_type() ddca_get_any_value_using_implicit_type() ddca_get_capabilities_string()","title":"Thread Error Detail"},{"location":"c_api_95/#miscellaneous","text":"Move definitions of DDCA_Build_Option_Flags and DDCA_Capture_Option_Flags from ddcutil_c_api.h to ddcutil_types.h , to facilitate creation of a C++ API, as requested by J\u00fcrgen Altfeld. Some API functions returned DDCRC_ARG when passed an invalid parameter, others returned -EINVAL . All now return DDCRC_ARG . Functions Affected ddca_set_max_tries() ddca_create_mfg_model_sn_display_identifier() ddca_create_edid_display_identifier() ddca_create_display_ref() ddca_get_feature_list_by_dref() ddca_get_feature_name_by_dref() API functions can no longer return DDCRC_UNINITIALIZED as initializion is guaranteed when the shared library is loaded The following functions now return \"const char *\" instead of \"char *\" to emphasize that they return pointers into internal ddcutil data structures that should not be freed. Note that this is a non-upwardly compatible API change that may require client changes. Function ddca_rc_name() ddca_rc_desc() ddca_did_repr() ddca_dref_repr() ddca_dh_repr() ddca_get_feature_name() ddca_feature_list_string()","title":"Miscellaneous"},{"location":"c_api_95/#precondition-failure","text":"API function precondition failures reflect an error in the calling client program. How best to deal with them? Multiple design principles apply here. Unfortunately, they conflict: - Libraries should not crash - Programming errors should cause immediate and spectacular failure - Client programs should not have to test for return codes that reflect programming errors. This clutters the code. Java addresses this conundrum through the use of RuntimeExceptions, such as NullPointerException and IllegalArgumentException, which need not be caught, or can be caught at the top level of a program. Unfortunately, C doesn't provide such an elegant solution. Until now, many precondition tests have been done using assert() statements. This is not a long term solution, since assert()s can be disabled when programs are built for production. Other precondition failures have resulted in a return code of DDCRC_ARG . As a first step, the assert() statements and other precondition tests have been unified with a common set of macros. This at least provides more consistent behavior, and will facilitate future changes. For now, a precondition failure results in a message to stderr and a return code of DDCRC_ARG . In the future, this may change to a message followed by library abort. Or the behavior may be controlled by the client using an API call to select the desired behavior. Comments on this design issue are invited.","title":"Precondition Failure"},{"location":"c_api_95/#notes-on-freeing-resources","text":"ddca_free_ functions fall into two groups, those that specify client side data structures and are referenced by a normal pointer, and those that specify internal library data structures and are referenced by an opaque pointer. Those that specify client side data structures are essentially convenience functions, relieving the client programmer of the details of freeing what may be a complex data structure. These functions always return void. If passed a NULL pointer, they do nothing. Functions that free client data structures ddca_free_error_detail() ddca_free_display_info_list() ddca_free_parsed_capabilities() ddca_free_table_vcp_value() ddca_free_any_vcp_value() ddca_free_feature_metadata() Functions that free internal library data structures take an opaque pointer as an argument. These functions return a DDCA_Status . They return DDCRC_ARG if the pointer is invalid. If the pointer is NULL, the function does nothing and DDCRC_OK is returned. Depending on the function, additional status codes are possible. Whether or not memory is actually freed is a hidden implementation detail, as some opaque pointers reference persistent internal data structures. Functions that free internal library data structures ddca_free_display_identifier() ddca_close_display() Additional Notes: If a function that creates a resource (e.g. ddca_create_busno_display_identifier() ) returns other than DDCRC_OK (0), then the resource is not created and need not be freed. In general, the order in which the ddca_free_ functions are called does not matter. The ddca_free_ functions are not idempotent. Attempting to free an already freed opaque resource will likely return DDCA_ARG , but may result in a segfault. Attempting to free an already freed client side resource will also likely result in a segfault.","title":"Notes on Freeing Resources"},{"location":"c_api_95/#newly-deprecated-functions","text":"API function ddca_get_formatted_vcp_value() is marked as deprecated and will be removed in a future release. It does not support user defined data types.","title":"Newly Deprecated Functions"},{"location":"c_api_95/#previously-deprecated-functions-deleted","text":"The following functions and type definitions, along with related constants, were deprecated in Release 0.9.0. They have now been deleted from files ddcutil_c_api.h and ddcutil_types.h *. Function or Typedef Deleted Comment DDCA_MCCS_Version_Id use DDCA_MCCS_Version_Spec ddca_get_mccs_version_id_name() ddca_get_mccs_version_id_desc() ddca_get_display_info_list() use ddca_get_display_info_list2() ddca_get_simple_feature_value_name_by_display() obtain from DDCA_Feature_Metadata ddca_get_edid_by_dref() obtain from DDCA_Feature_Metadata ddca_open_display() use ddca_open_display2() ddca_set_simple_nc_vcp_value() use ddca_set_non_table_vcp_value() ddca_set_continuous_vcp_value() use ddca_set_non_table_vcp_value()","title":"Previously Deprecated Functions Deleted"},{"location":"c_api_95/#sample-programs","text":"The sample client programs have been modified to reflect the API changes. Fixed an incorrect printf() format string in sample program demo_get_set_vcp.c. Reported by J\u00fcrgen Altfeld.","title":"Sample Programs"},{"location":"c_api_96/","text":"C API Changes for Release 0.9.6 SONAME control SONAME versioning has been enabled for libddcutil . To differentiate the lastest library from all prior libraries, the current version is 1.0.0, i.e. libddcutil.so.1.0.0. New Functions New Functions Comment ddca_enable_usb_display_detection Control whether USB display detection is enabled ddca_is_usb_display_detection_enabled Indicates if USB display detection is enabled Notes on ddca_enable_display_detection(): Must be called before any function call that triggers display detection. Returns DDCRC_INVALID_OPERATION . if display detection has already occurred. Returns DDCRC_UNIMPLEMENTED if ddcutil was built without USB support. This setting is global to all threads. Changed functions ddca_get_feature_list_by_dref() No longer returns DDCRC_ARG to indicate that the VCP version was unqueried, as this error is no longer possible. DDCRC_ARG now always indicates an invalid display reference. ddca_open_display2() New status code DDCRC_ALREADY_OPEN indicates that the display is already open in the current thread. (As before, DDCRC_LOCKED indicates the display is open in another thread.) Sample Program Changes Fix the cause of a failure in demo_feature_list.c .","title":"Shared Library Changes for Release 0.9.6"},{"location":"c_api_96/#c-api-changes-for-release-096","text":"","title":"C API Changes for Release 0.9.6"},{"location":"c_api_96/#soname-control","text":"SONAME versioning has been enabled for libddcutil . To differentiate the lastest library from all prior libraries, the current version is 1.0.0, i.e. libddcutil.so.1.0.0.","title":"SONAME control"},{"location":"c_api_96/#new-functions","text":"New Functions Comment ddca_enable_usb_display_detection Control whether USB display detection is enabled ddca_is_usb_display_detection_enabled Indicates if USB display detection is enabled Notes on ddca_enable_display_detection(): Must be called before any function call that triggers display detection. Returns DDCRC_INVALID_OPERATION . if display detection has already occurred. Returns DDCRC_UNIMPLEMENTED if ddcutil was built without USB support. This setting is global to all threads.","title":"New Functions"},{"location":"c_api_96/#changed-functions","text":"ddca_get_feature_list_by_dref() No longer returns DDCRC_ARG to indicate that the VCP version was unqueried, as this error is no longer possible. DDCRC_ARG now always indicates an invalid display reference. ddca_open_display2() New status code DDCRC_ALREADY_OPEN indicates that the display is already open in the current thread. (As before, DDCRC_LOCKED indicates the display is open in another thread.)","title":"Changed functions"},{"location":"c_api_96/#sample-program-changes","text":"Fix the cause of a failure in demo_feature_list.c .","title":"Sample Program Changes"},{"location":"c_api_98/","text":"Shared Library Changes for Release 0.9.8 SONAME The libddcutil SONAME is now libddcutil.so.2. It was incremented since libddcutil 0.9.8 is not backward compatible with release 0.9.7. In conformance with Debian practice, the package name is now libddcutil2 . API Changes Structs and Enums Change enum DDCA_Trace_Group added value DDCA_TRC_SLEEP to trace sleep operations enum DDCA_Trace_Options added DDCA_TRCOPT_TIMESTAMP: trace messages should show timestamps enum DDCA_Trace_Options added DDCA_TRCOPT_THREAD_ID trace messages should show thread id struct DDCA_Feature_Metadata added field vcp_version Note: The change to struct DDCA_Feature_Metadata is not backward ABI compatible, resulting in the SONAME bump. New Functions Comments ddca_get_global_sleep_multiplier() set sleep multiplication factor ddca_set_glolbal_sleep_multiplier() get sleep multiplication factor ddca_set_trace_options() set trace message options ddca_dbgrpt_feature_metadata() convenience function for clients libddcutil Development Package The libddcutil development package, named libddcutil-dev on some platforms and libddcutil-devel on others, has the following changes. - Package config file ddcutil.pc is now installed in directory /usr/share/pkgconfig. Previously it was installed in the ddcutil data directory, typically /usr/share/ddcutil/data, and left for the user to install in the proper location. - Cmake configuration file FindDDCUtil.cmake is now installed in /usr/share/cmake/Modules, not the ddcutil data directory (typically /usr/share/ddcutil/data), where it was left for the user to install in the proper location.","title":"Shared Library Changes for Release 0.9.8"},{"location":"c_api_98/#shared-library-changes-for-release-098","text":"","title":"Shared Library Changes for Release 0.9.8"},{"location":"c_api_98/#soname","text":"The libddcutil SONAME is now libddcutil.so.2. It was incremented since libddcutil 0.9.8 is not backward compatible with release 0.9.7. In conformance with Debian practice, the package name is now libddcutil2 .","title":"SONAME"},{"location":"c_api_98/#api-changes","text":"Structs and Enums Change enum DDCA_Trace_Group added value DDCA_TRC_SLEEP to trace sleep operations enum DDCA_Trace_Options added DDCA_TRCOPT_TIMESTAMP: trace messages should show timestamps enum DDCA_Trace_Options added DDCA_TRCOPT_THREAD_ID trace messages should show thread id struct DDCA_Feature_Metadata added field vcp_version Note: The change to struct DDCA_Feature_Metadata is not backward ABI compatible, resulting in the SONAME bump. New Functions Comments ddca_get_global_sleep_multiplier() set sleep multiplication factor ddca_set_glolbal_sleep_multiplier() get sleep multiplication factor ddca_set_trace_options() set trace message options ddca_dbgrpt_feature_metadata() convenience function for clients","title":"API Changes"},{"location":"c_api_98/#libddcutil-development-package","text":"The libddcutil development package, named libddcutil-dev on some platforms and libddcutil-devel on others, has the following changes. - Package config file ddcutil.pc is now installed in directory /usr/share/pkgconfig. Previously it was installed in the ddcutil data directory, typically /usr/share/ddcutil/data, and left for the user to install in the proper location. - Cmake configuration file FindDDCUtil.cmake is now installed in /usr/share/cmake/Modules, not the ddcutil data directory (typically /usr/share/ddcutil/data), where it was left for the user to install in the proper location.","title":"libddcutil Development Package"},{"location":"c_api_99/","text":"Shared Library Changes for Release 0.9.9 Overview Ths release contains a few non-upwardly changes. Consequently, the libddcutil SONAME is now libddcutil.so.3. In conformance with Debian practice, the package name is libddcutil3 . API Changes General API Changes Structs and Enums Change enum DDCA_Trace_Group add value DDCA_TRC_RETRY (small subset of DDC_TRC_IO) enum DDCA_Trace_Options change DDCA_TRCOPT_TIMESTAMP value from x00 to x01 so enum values can be or'd enum DDCA_Feature_Subset_Id add DDCA_SUBSET_CUSTOM struct DDCA_Capabilities add fields: messages, msg_ct Modified Functions Comments ddca_parse_capbabilities_string() use new DDCA_Capabilities fields messages , msg_ct to return messages instead of writing them to the terminal ddca_parse_capbilities_string() return status code DDCRC_BAD_DATA instead of DDCRC_OTHER DDCA_Feature_List Functions Most DDCA_Feature_List functions now take DDCA_Feature_List arguments instead of pointers to DDCA_Feature_List . Always using pointers had made the parameter lists more consistent, but didn't improve clarity. New DDCA_Feature_List Functions Comments ddca_feature_list_eq() compare 2 feature lists for equality Modified DDCA_Feature_List Functions Comments ddca_feature_list_add() returns modified feature list instead of void ddca_feature_list_containts() use DDCA_Feature_List as parm type instead of *DDCA_Feature_List ddca_feature_list_eq() has DDCA_Feature_List as parm type instead of *DDCA_Feature_List ddca_feature_list_or() has DDCA_Feature_List as parm type instead of *DDCA_Feature_List ddca_feature_list_and() has DDCA_Feature_List as parm type instead of *DDCA_Feature_List ddca_feature-list_and_not() has DDCA_Feature_List as parm type instead of *DDCA_Feature_List ddca_feature_list_count has DDCA_Feature_List as parm type instead of *DDCA_Feature_List ddca_feature_list_string has DDCA_Feature_List as parm type instead of *DDCA_Feature_List Tuning The sleep multiplication factor is now set on a per-thread basis New Functions Comments ddca_get_default_sleep_multiplier() set sleep multiplication for new threads ddca_set_default_sleep_multiplier() get sleep multiplication factor for new threads ddca_get_sleep_multiplier() set sleep multiplication factor for current thread ddca_set_sleep_multiplier() get sleep multiplication factor for current thread ddca_enable_sleep_suppression() corresponds to option --sleep-less ddca_is_sleep_suppression_enabled() Deprecated Functions Use Instead ddca_set_global_sleep_multiplier() ddca_set_default_sleep_multiplier() ddca_get_global_sleep_multiplier() ddca_get_default_sleep_multiplier() Statistics Statistics are now gathered on a per-thread basis. Modified Functions Comments ddca_show_stats() add parm include_per_thread_data New Functions Comment ddca_set_thread_description() for use in statistics reports ddca_append_thread_description append to existing thread description ddca_get_thread_description retrieve thread description libddcutil Development Package In addition to changes to files ddca_types.h and ddca_c_api.h , the libddcutil development package, named libddcutil-dev on some platforms and libddcutil-devel on others, has the following changes. The pkg-config file ddcutil.pc is not architecture agnostic. Therefore, it is not installed in the $(datadir) directory (typically /usr/share/pkgconfig). Instead it is installed in the architecture specific ${libdir} directory, e.g. /usr/lib64/x86_64-linux-gnu in Debian/Ubuntu Cmake configuration file FindDDCUtil.cmake is now installed in /usr/share/cmake/Modules, not the ddcutil data directory (typically /usr/share/ddcutil/data), where it was left for the user to install in the proper location.","title":"Shared Library Changes for Release 0.9.9"},{"location":"c_api_99/#shared-library-changes-for-release-099","text":"","title":"Shared Library Changes for Release 0.9.9"},{"location":"c_api_99/#overview","text":"Ths release contains a few non-upwardly changes. Consequently, the libddcutil SONAME is now libddcutil.so.3. In conformance with Debian practice, the package name is libddcutil3 .","title":"Overview"},{"location":"c_api_99/#api-changes","text":"","title":"API Changes"},{"location":"c_api_99/#general-api-changes","text":"Structs and Enums Change enum DDCA_Trace_Group add value DDCA_TRC_RETRY (small subset of DDC_TRC_IO) enum DDCA_Trace_Options change DDCA_TRCOPT_TIMESTAMP value from x00 to x01 so enum values can be or'd enum DDCA_Feature_Subset_Id add DDCA_SUBSET_CUSTOM struct DDCA_Capabilities add fields: messages, msg_ct Modified Functions Comments ddca_parse_capbabilities_string() use new DDCA_Capabilities fields messages , msg_ct to return messages instead of writing them to the terminal ddca_parse_capbilities_string() return status code DDCRC_BAD_DATA instead of DDCRC_OTHER","title":"General API Changes"},{"location":"c_api_99/#ddca_feature_list-functions","text":"Most DDCA_Feature_List functions now take DDCA_Feature_List arguments instead of pointers to DDCA_Feature_List . Always using pointers had made the parameter lists more consistent, but didn't improve clarity. New DDCA_Feature_List Functions Comments ddca_feature_list_eq() compare 2 feature lists for equality Modified DDCA_Feature_List Functions Comments ddca_feature_list_add() returns modified feature list instead of void ddca_feature_list_containts() use DDCA_Feature_List as parm type instead of *DDCA_Feature_List ddca_feature_list_eq() has DDCA_Feature_List as parm type instead of *DDCA_Feature_List ddca_feature_list_or() has DDCA_Feature_List as parm type instead of *DDCA_Feature_List ddca_feature_list_and() has DDCA_Feature_List as parm type instead of *DDCA_Feature_List ddca_feature-list_and_not() has DDCA_Feature_List as parm type instead of *DDCA_Feature_List ddca_feature_list_count has DDCA_Feature_List as parm type instead of *DDCA_Feature_List ddca_feature_list_string has DDCA_Feature_List as parm type instead of *DDCA_Feature_List","title":"DDCA_Feature_List Functions"},{"location":"c_api_99/#tuning","text":"The sleep multiplication factor is now set on a per-thread basis New Functions Comments ddca_get_default_sleep_multiplier() set sleep multiplication for new threads ddca_set_default_sleep_multiplier() get sleep multiplication factor for new threads ddca_get_sleep_multiplier() set sleep multiplication factor for current thread ddca_set_sleep_multiplier() get sleep multiplication factor for current thread ddca_enable_sleep_suppression() corresponds to option --sleep-less ddca_is_sleep_suppression_enabled() Deprecated Functions Use Instead ddca_set_global_sleep_multiplier() ddca_set_default_sleep_multiplier() ddca_get_global_sleep_multiplier() ddca_get_default_sleep_multiplier()","title":"Tuning"},{"location":"c_api_99/#statistics","text":"Statistics are now gathered on a per-thread basis. Modified Functions Comments ddca_show_stats() add parm include_per_thread_data New Functions Comment ddca_set_thread_description() for use in statistics reports ddca_append_thread_description append to existing thread description ddca_get_thread_description retrieve thread description","title":"Statistics"},{"location":"c_api_99/#libddcutil-development-package","text":"In addition to changes to files ddca_types.h and ddca_c_api.h , the libddcutil development package, named libddcutil-dev on some platforms and libddcutil-devel on others, has the following changes. The pkg-config file ddcutil.pc is not architecture agnostic. Therefore, it is not installed in the $(datadir) directory (typically /usr/share/pkgconfig). Instead it is installed in the architecture specific ${libdir} directory, e.g. /usr/lib64/x86_64-linux-gnu in Debian/Ubuntu Cmake configuration file FindDDCUtil.cmake is now installed in /usr/share/cmake/Modules, not the ddcutil data directory (typically /usr/share/ddcutil/data), where it was left for the user to install in the proper location.","title":"libddcutil Development Package"},{"location":"cap_u3011_verbose_output/","text":"ddcutil capabilities Below is the result of executing the ddcutil capabilities command for a Dell U3011 monitor that ddcutil has identified as display number 4. $ ddcutil capabilities --display 4 --verbose Output level: Verbose Reporting DDC data errors: false Trace groups active: none Unparsed capabilities string: (prot(monitor)type(lcd)model(U3011)cmds(01 02 03 07 0C E3 F3)vcp(02 04 05 06 08 10 12 14(01 05 08 0B 0C) 16 18 1A 52 60(01 03 04 0C 0F 11 12) AC AE B2 B6 C6 C8 C9 D6(01 04 05) DC(00 02 03 04 05) DF FD)mccs_ver(2.1)mswhql(1)) MCCS version: 2.1 Commands: Command: 01 (VCP Request) Command: 02 (VCP Response) Command: 03 (VCP Set) Command: 07 (Timing Request) Command: 0c (Save Settings) Command: e3 (Capabilities Reply)ls Command: f3 (Capabilities Request) VCP Features: Feature: 02 (New control value) Feature: 04 (Restore factory defaults) Feature: 05 (Restore factory brightness/contrast defaults) Feature: 06 (Restore factory geometry defaults) Feature: 08 (Restore color defaults) Feature: 10 (Brightness) Feature: 12 (Contrast) Feature: 14 (Select color preset) Values (unparsed): 01 05 08 0B 0C Values ( parsed): 01: sRGB 05: 6500 K 08: 9300 K 0b: User 1 0c: User 2 Feature: 16 (Video gain: Red) Feature: 18 (Video gain: Green) Feature: 1A (Video gain: Blue) Feature: 52 (Active control) Feature: 60 (Input Source) Values (unparsed): 01 03 04 0C 0F 11 12 Values ( parsed): 01: VGA-1 03: DVI-1 04: DVI-2 0c: Component video (YPrPb/YCrCb) 1 0f: DisplayPort-1 11: HDMI-1 12: HDMI-2 Feature: AC (Horizontal frequency) Feature: AE (Vertical frequency) Feature: B2 (Flat panel sub-pixel layout) Feature: B6 (Display technology type) Feature: C6 (Application enable key) Feature: C8 (Display controller type) Feature: C9 (Display firmware level) Feature: D6 (Power mode) Values (unparsed): 01 04 05 Values ( parsed): 01: DPM: On, DPMS: Off 04: DPM: Off, DPMS: Off 05: Write only value to turn off display Feature: DC (Display Mode) Values (unparsed): 00 02 03 04 05 Values ( parsed): 00: Standard/Default mode 02: Mixed 03: Movie 04: User defined 05: Games Feature: DF (VCP Version) Feature: FD (manufacturer specific feature)","title":"ddcutil capabilities example"},{"location":"cap_u3011_verbose_output/#ddcutil-capabilities","text":"Below is the result of executing the ddcutil capabilities command for a Dell U3011 monitor that ddcutil has identified as display number 4. $ ddcutil capabilities --display 4 --verbose Output level: Verbose Reporting DDC data errors: false Trace groups active: none Unparsed capabilities string: (prot(monitor)type(lcd)model(U3011)cmds(01 02 03 07 0C E3 F3)vcp(02 04 05 06 08 10 12 14(01 05 08 0B 0C) 16 18 1A 52 60(01 03 04 0C 0F 11 12) AC AE B2 B6 C6 C8 C9 D6(01 04 05) DC(00 02 03 04 05) DF FD)mccs_ver(2.1)mswhql(1)) MCCS version: 2.1 Commands: Command: 01 (VCP Request) Command: 02 (VCP Response) Command: 03 (VCP Set) Command: 07 (Timing Request) Command: 0c (Save Settings) Command: e3 (Capabilities Reply)ls Command: f3 (Capabilities Request) VCP Features: Feature: 02 (New control value) Feature: 04 (Restore factory defaults) Feature: 05 (Restore factory brightness/contrast defaults) Feature: 06 (Restore factory geometry defaults) Feature: 08 (Restore color defaults) Feature: 10 (Brightness) Feature: 12 (Contrast) Feature: 14 (Select color preset) Values (unparsed): 01 05 08 0B 0C Values ( parsed): 01: sRGB 05: 6500 K 08: 9300 K 0b: User 1 0c: User 2 Feature: 16 (Video gain: Red) Feature: 18 (Video gain: Green) Feature: 1A (Video gain: Blue) Feature: 52 (Active control) Feature: 60 (Input Source) Values (unparsed): 01 03 04 0C 0F 11 12 Values ( parsed): 01: VGA-1 03: DVI-1 04: DVI-2 0c: Component video (YPrPb/YCrCb) 1 0f: DisplayPort-1 11: HDMI-1 12: HDMI-2 Feature: AC (Horizontal frequency) Feature: AE (Vertical frequency) Feature: B2 (Flat panel sub-pixel layout) Feature: B6 (Display technology type) Feature: C6 (Application enable key) Feature: C8 (Display controller type) Feature: C9 (Display firmware level) Feature: D6 (Power mode) Values (unparsed): 01 04 05 Values ( parsed): 01: DPM: On, DPMS: Off 04: DPM: Off, DPMS: Off 05: Write only value to turn off display Feature: DC (Display Mode) Values (unparsed): 00 02 03 04 05 Values ( parsed): 00: Standard/Default mode 02: Mixed 03: Movie 04: User defined 05: Games Feature: DF (VCP Version) Feature: FD (manufacturer specific feature)","title":"ddcutil capabilities"},{"location":"cmd_output/","text":"Command Examples ddcutil detect ddcutil capabilities ddcutil getvcp ddcutil vcpinfo","title":"Command Examples"},{"location":"cmd_output/#command-examples","text":"ddcutil detect ddcutil capabilities ddcutil getvcp ddcutil vcpinfo","title":"Command Examples"},{"location":"colormgt/","text":"Color Management A primary use for ddcutil is as part of color profile management. A monitor calibration is meaningful only if the color settings on the monitor are the same as when the calibration was performed. Normally, monitor settings are changed by pressing buttons on the monitor bezel. Depending on the monitor, the process ranges from annoying to excruciating. ddcutil allows this process to be automated. Command ddcutil dumpvcp saves the current color related monitor settings in a file, and ddcutil loadvcp restores them from a file. VCP feature codes in feature group PROFILE are, if implemented by the monitor, saved by dumpvcp and restored by loadvcp . These are: 10: Brightness 12: Contrast 13: Backlight control 14: Video gain: Red 16: Video gain: Green 18: Video gain: Blue 6B: Backlight level: White 6C: Video black level: Red 6D: Backlight Level: Red 6E: Video black level: Green 6F: Backlight level: Green 70: Video black level: Blue 71: Backlight Level: Blue To see the list of feature codes saved and restored, you can also issue the command: ddcutil vcpinfo profile --terse Color Management Workflow Integration Comments on integration with color management workflow. The ddcutil graphical user interface ddcui can be run along side the monitor adjustment phase at the start of DisplayCal , making it easier to adjust the monitor. C or C++ programs can use the API to access the dump/load services. Conceivably, profile related VCP values could be stored in a custom tag in monitor profile file instead of a separate file. Monitor Lookup Tables Typically, monitor calibration creates a color lookup table that is loaded into the video card. Some advanced monitors have an internal lookup table. These monitors generally have a software development kit with an API for accessing the LUT, and typically thse SDKs support Linux either poorly or not at all. The MCCS specification defines a set of features for accessing the monitor's internal lookup table: 73: LUT size 74: Single point LUT operation 75: Block LUT operation 76: Remote procedure call These are what MCCS categorizes as \"Table\" type features. Reading and writing table type features is implemented in ddcutil , but have not been tested for lack of a monitor to test with. If a monitor were to implement these features, ddcutil should be able to load the LUT. Unfortunately, no monitor with an internal hardware LUT that has yet been tested implements them. In particular, none of the following monitors having a hardware LUT implement the VCP codes: HP Dreamcolor LP2480zx NEC PA241 Eizo CG19 (has only USB interface) Dell U2413","title":"Color Management"},{"location":"colormgt/#color-management","text":"A primary use for ddcutil is as part of color profile management. A monitor calibration is meaningful only if the color settings on the monitor are the same as when the calibration was performed. Normally, monitor settings are changed by pressing buttons on the monitor bezel. Depending on the monitor, the process ranges from annoying to excruciating. ddcutil allows this process to be automated. Command ddcutil dumpvcp saves the current color related monitor settings in a file, and ddcutil loadvcp restores them from a file. VCP feature codes in feature group PROFILE are, if implemented by the monitor, saved by dumpvcp and restored by loadvcp . These are: 10: Brightness 12: Contrast 13: Backlight control 14: Video gain: Red 16: Video gain: Green 18: Video gain: Blue 6B: Backlight level: White 6C: Video black level: Red 6D: Backlight Level: Red 6E: Video black level: Green 6F: Backlight level: Green 70: Video black level: Blue 71: Backlight Level: Blue To see the list of feature codes saved and restored, you can also issue the command: ddcutil vcpinfo profile --terse","title":"Color Management"},{"location":"colormgt/#color-management-workflow-integration","text":"Comments on integration with color management workflow. The ddcutil graphical user interface ddcui can be run along side the monitor adjustment phase at the start of DisplayCal , making it easier to adjust the monitor. C or C++ programs can use the API to access the dump/load services. Conceivably, profile related VCP values could be stored in a custom tag in monitor profile file instead of a separate file.","title":"Color Management Workflow Integration"},{"location":"colormgt/#monitor-lookup-tables","text":"Typically, monitor calibration creates a color lookup table that is loaded into the video card. Some advanced monitors have an internal lookup table. These monitors generally have a software development kit with an API for accessing the LUT, and typically thse SDKs support Linux either poorly or not at all. The MCCS specification defines a set of features for accessing the monitor's internal lookup table: 73: LUT size 74: Single point LUT operation 75: Block LUT operation 76: Remote procedure call These are what MCCS categorizes as \"Table\" type features. Reading and writing table type features is implemented in ddcutil , but have not been tested for lack of a monitor to test with. If a monitor were to implement these features, ddcutil should be able to load the LUT. Unfortunately, no monitor with an internal hardware LUT that has yet been tested implements them. In particular, none of the following monitors having a hardware LUT implement the VCP codes: HP Dreamcolor LP2480zx NEC PA241 Eizo CG19 (has only USB interface) Dell U2413","title":"Monitor Lookup Tables"},{"location":"command_capabilities/","text":"Command capabilities Syntax: capabilities <display-selection-options> Reports the monitor's capabilities string. This string describes, among other things, the VCP Features that the monitor supports and, for non-continuous features where appropriate, the allowed values. Unfortunately, the capabilities string is unreliable. Therefore ddcutil simply presents the string. It does not use the capabilities string when formulating commands and interpeting responses. The capabilities string is unreliable for several reasons: The response to the DDC capabilities request may simply be incorrect. For example, the capabilities response from the HP LP2480zx monitor does not list VCP feature code x10 (brightness) as supported. However, feature code x10 is in fact supported. The only way to know for sure if a monitor implememts a VCP feature code is to try it. A DDC capabilities request requires multiple I2C exchanges, making it both slow and unreliable. Because of its complexity, it is particularly vulnerable to I2C errors. On monitors with paticularly poor I2C implementations it sometimes fails because the maximum number of I2C retries is exceeded. There is no capabilities request defined in the programming interface for USB connected monitors. ddcutil simulates a capabilities response by looking at what USB HID reports exist for feature codes. Note however, that ddcui does make use of the the capabilities string. By default the capabilities command displays the capabilities string in parsed form. Option: --terse Display the unparsed capabilities string. Option: --verbose Display both the unparsed string and its parsed form.","title":"capabilities"},{"location":"command_capabilities/#command-capabilities","text":"Syntax: capabilities <display-selection-options> Reports the monitor's capabilities string. This string describes, among other things, the VCP Features that the monitor supports and, for non-continuous features where appropriate, the allowed values. Unfortunately, the capabilities string is unreliable. Therefore ddcutil simply presents the string. It does not use the capabilities string when formulating commands and interpeting responses. The capabilities string is unreliable for several reasons: The response to the DDC capabilities request may simply be incorrect. For example, the capabilities response from the HP LP2480zx monitor does not list VCP feature code x10 (brightness) as supported. However, feature code x10 is in fact supported. The only way to know for sure if a monitor implememts a VCP feature code is to try it. A DDC capabilities request requires multiple I2C exchanges, making it both slow and unreliable. Because of its complexity, it is particularly vulnerable to I2C errors. On monitors with paticularly poor I2C implementations it sometimes fails because the maximum number of I2C retries is exceeded. There is no capabilities request defined in the programming interface for USB connected monitors. ddcutil simulates a capabilities response by looking at what USB HID reports exist for feature codes. Note however, that ddcui does make use of the the capabilities string. By default the capabilities command displays the capabilities string in parsed form. Option: --terse Display the unparsed capabilities string. Option: --verbose Display both the unparsed string and its parsed form.","title":"Command capabilities"},{"location":"command_detail/","text":"Command Detail Primary Commands detect getvcp setvcp vcpinfo dumpvcp & loadvcp scs Secondary Commands environment usbenvironment probe interrogate chkusbmon Options Display Selection Options Feature Selection Options Performance Other","title":"Command Detail"},{"location":"command_detail/#command-detail","text":"Primary Commands detect getvcp setvcp vcpinfo dumpvcp & loadvcp scs Secondary Commands environment usbenvironment probe interrogate chkusbmon Options Display Selection Options Feature Selection Options Performance Other","title":"Command Detail"},{"location":"command_detect/","text":"Command detect Syntax: detect <options> Scans the system for displays supporting the Monitor Control Command Set (MCCS), most commonly using DDC/CI but alternatively using USB for communication. This command reports the results of the display search, which also is part of most ddcutil commands. Option --async If there are 3 or more monitors and option --async is specified, initial monitor DDC checks are performed in separate threads. improving startup time. Option: --nousb This option disables detection of USB connected displays during ddcutil startup. USB display support is rarely required, as most monitors use DDC/CI, not USB, for MCCS execution. As a practical matter, searching for USB displays has a negligable effect on execution time. This option may be useful if there is a problem with USB display detection. The output varies by verbosity. Normal output: $ ddcutil detect Display 1< I2C bus: /dev/i2c-7 EDID synopsis: Mfg id: ACR Model: Acer X243W Serial number: LAG040064310 Manufacture year: 2007 EDID version: 1.3 VCP version: 2.1 Display 2 I2C bus: /dev/i2c-8 EDID synopsis: Mfg id: DEL Model: DELL P2411H Serial number: F8NDP11G119U Manufacture year: 2011 EDID version: 1.3 VCP version: 2.1 Display 3 I2C bus: /dev/i2c-10 EDID synopsis: Mfg id: HWP Model: HP Z22i Serial number: CNC51301ZP Manufacture year: 2015 EDID version: 1.3 VCP version: 2.2 Display 4 I2C bus: /dev/i2c-14 EDID synopsis: Mfg id: DEL Model: DELL U3011 Serial number: PH5NY2CIANXL Manufacture year: 2012 EDID version: 1.4 VCP version: 2.1 Option: --brief , --terse Presents a summary report of each detected display, in an easily machine readable form. $ ddcutil detect --brief Display 1 I2C bus: /dev/i2c-7 Monitor: ACR:Acer X243W:LAG040064310 Display 2 I2C bus: /dev/i2c-8 Monitor: DEL:DELL P2411H:F8NDP11G119U Display 3 I2C bus: /dev/i2c-10 Monitor: HWP:HP Z22i:CNC51301ZP Display 4 I2C bus: /dev/i2c-14 Monitor: DEL:DELL U3011:PH5NY2CIANXL Option: ***--verbose *** Show additional information, including the EDID. $ ddcutil detect --verbose Display 1 I2C bus: /dev/i2c-7 I2C address 0x50 (EDID) responsive: true Is eDP device: false I2C address 0x37 (DDC) responsive: true /sys/bus/i2c/devices/i2c-7/name: AMDGPU i2c bit bus 0x92 EDID synopsis: Mfg id: ACR Model: Acer X243W Serial number: LAG040064310 Manufacture year: 2007 EDID version: 1.3 Product code: 0 Binary sn: 1952453327 (0x746012cf) Extra descriptor: Video input definition: 0x80 - Digital Input Supported features: DPMS active-off Digital display type: RGB 4:4:4 Standard sRGB color space: False White x,y: 0.313, 0.329 Red x,y: 0.640, 0.330 Green x,y: 0.300, 0.608 Blue x,y: 0.150, 0.060 Extension blocks: 0 EDID source: EDID hex dump: +0 +4 +8 +c 0 4 8 c +0000 00 ff ff ff ff ff ff 00 04 72 00 00 cf 12 60 74 .........r....`t +0010 2e 11 01 03 80 34 20 78 2a ef 95 a3 54 4c 9b 26 .....4 x*...TL.& +0020 0f 50 54 a5 4b 00 81 80 81 00 81 0f 95 00 95 0f .PT.K........... +0030 a9 40 b3 00 01 01 28 3c 80 a0 70 b0 23 40 30 20 .@....(<..p.#@0 +0040 36 00 06 44 21 00 00 1a 00 00 00 fd 00 38 4c 1e 6..D!........8L. +0050 52 11 00 0a 20 20 20 20 20 20 00 00 00 fc 00 41 R... .....A +0060 63 65 72 20 58 32 34 33 57 0a 20 20 00 00 00 ff cer X243W. .... +0070 00 4c 41 47 30 34 30 30 36 34 33 31 30 0a 00 68 .LAG040064310..h VCP version: 2.1 Controller mfg: Mstar Firmware version: 0.3 Monitor returns DDC Null Response for unsupported features: false Display 2 I2C bus: /dev/i2c-8 I2C address 0x50 (EDID) responsive: true Is eDP device: false I2C address 0x37 (DDC) responsive: true /sys/bus/i2c/devices/i2c-8/name: AMDGPU i2c bit bus 0x93 EDID synopsis: Mfg id: DEL Model: DELL P2411H Serial number: F8NDP11G119U Manufacture year: 2011 EDID version: 1.3 Product code: 41070 Binary sn: 825309525 (0x31313955) Extra descriptor: Video input definition: 0x80 - Digital Input Supported features: DPMS standby DPMS suspend DPMS active-off Digital display type: RGB 4:4:4 Standard sRGB color space: False White x,y: 0.313, 0.328 Red x,y: 0.631, 0.351 Green x,y: 0.334, 0.620 Blue x,y: 0.156, 0.051 Extension blocks: 0 EDID source: EDID hex dump: +0 +4 +8 +c 0 4 8 c +0000 00 ff ff ff ff ff ff 00 10 ac 6e a0 55 39 31 31 ..........n.U911 +0010 04 15 01 03 80 35 1e 78 ea bb 04 a1 59 55 9e 28 .....5.x....YU.( +0020 0d 50 54 a5 4b 00 71 4f 81 80 d1 c0 01 01 01 01 .PT.K.qO........ +0030 01 01 01 01 01 01 02 3a 80 18 71 38 2d 40 58 2c .......:..q8-@X, +0040 45 00 13 2b 21 00 00 1e 00 00 00 ff 00 46 38 4e E..+!........F8N +0050 44 50 31 31 47 31 31 39 55 0a 00 00 00 fc 00 44 DP11G119U......D +0060 45 4c 4c 20 50 32 34 31 31 48 0a 20 00 00 00 fd ELL P2411H. .... +0070 00 38 4c 1e 53 11 00 0a 20 20 20 20 20 20 00 63 .8L.S... .c VCP version: 2.1 Controller mfg: Mstar Firmware version: 1.1 Monitor returns DDC Null Response for unsupported features: false Display 3 I2C bus: /dev/i2c-10 I2C address 0x50 (EDID) responsive: true Is eDP device: false I2C address 0x37 (DDC) responsive: true /sys/bus/i2c/devices/i2c-10/name: AMDGPU i2c bit bus 0x95 EDID synopsis: Mfg id: HWP Model: HP Z22i Serial number: CNC51301ZP Manufacture year: 2015 EDID version: 1.3 Product code: 12428 Binary sn: 16843009 (0x01010101) Extra descriptor: Video input definition: 0x80 - Digital Input Supported features: DPMS active-off Digital display type: RGB 4:4:4 Standard sRGB color space: False White x,y: 0.313, 0.329 Red x,y: 0.647, 0.339 Green x,y: 0.307, 0.633 Blue x,y: 0.146, 0.056 Extension blocks: 0 EDID source: EDID hex dump: +0 +4 +8 +c 0 4 8 c +0000 00 ff ff ff ff ff ff 00 22 f0 8c 30 01 01 01 01 ........\"..0.... +0010 0d 19 01 03 80 30 1b 78 2e f8 55 a5 56 4e a2 25 .....0.x..U.VN.% +0020 0e 50 54 a1 08 00 d1 c0 81 c0 81 80 95 00 a9 c0 .PT............. +0030 b3 00 01 01 01 01 02 3a 80 18 71 38 2d 40 58 2c .......:..q8-@X, +0040 45 00 dd 0c 11 00 00 1e 00 00 00 fd 00 32 4c 18 E............2L. +0050 5e 11 00 0a 20 20 20 20 20 20 00 00 00 fc 00 48 ^... .....H +0060 50 20 5a 32 32 69 0a 20 20 20 20 20 00 00 00 ff P Z22i. .... +0070 00 43 4e 43 35 31 33 30 31 5a 50 0a 20 20 00 7c .CNC51301ZP. .| VCP version: 2.2 Controller mfg: Mstar Firmware version: 1.0 Monitor returns DDC Null Response for unsupported features: false Display 4 I2C bus: /dev/i2c-14 I2C address 0x50 (EDID) responsive: true Is eDP device: false I2C address 0x37 (DDC) responsive: true /sys/bus/i2c/devices/i2c-14/name: card0-DP-2 EDID synopsis: Mfg id: DEL Model: DELL U3011 Serial number: PH5NY2CIANXL Manufacture year: 2012 EDID version: 1.4 Product code: 16485 Binary sn: 1095653452 (0x414e584c) Extra descriptor: Video input definition: 0xb5 - Digital Input (DisplayPort) Supported features: DPMS active-off Digital display type: RGB 4:4:4 + YCrCb 4:2:2 Standard sRGB color space: True White x,y: 0.313, 0.329 Red x,y: 0.678, 0.309 Green x,y: 0.210, 0.692 Blue x,y: 0.146, 0.055 Extension blocks: 1 EDID source: EDID hex dump: +0 +4 +8 +c 0 4 8 c +0000 00 ff ff ff ff ff ff 00 10 ac 65 40 4c 58 4e 41 ..........e@LXNA +0010 33 16 01 04 b5 40 28 78 3a 8d 85 ad 4f 35 b1 25 3....@(x:...O5.% +0020 0e 50 54 a5 4b 00 71 4f 81 00 81 80 a9 40 d1 00 .PT.K.qO.....@.. +0030 d1 40 01 01 01 01 e2 68 00 a0 a0 40 2e 60 30 20 .@.....h...@.`0 +0040 36 00 81 91 21 00 00 1a 00 00 00 ff 00 50 48 35 6...!........PH5 +0050 4e 59 32 43 49 41 4e 58 4c 0a 00 00 00 fc 00 44 NY2CIANXL......D +0060 45 4c 4c 20 55 33 30 31 31 0a 20 20 00 00 00 fd ELL U3011. .... +0070 00 31 56 1d 71 1c 00 0a 20 20 20 20 20 20 01 56 .1V.q... .V VCP version: 2.1 Controller mfg: Mstar Firmware version: 1.5 Monitor returns DDC Null Response for unsupported features: false","title":"detect"},{"location":"command_detect/#command-detect","text":"Syntax: detect <options> Scans the system for displays supporting the Monitor Control Command Set (MCCS), most commonly using DDC/CI but alternatively using USB for communication. This command reports the results of the display search, which also is part of most ddcutil commands.","title":"Command detect"},{"location":"command_detect/#option-async","text":"If there are 3 or more monitors and option --async is specified, initial monitor DDC checks are performed in separate threads. improving startup time.","title":"Option --async"},{"location":"command_detect/#option-nousb","text":"This option disables detection of USB connected displays during ddcutil startup. USB display support is rarely required, as most monitors use DDC/CI, not USB, for MCCS execution. As a practical matter, searching for USB displays has a negligable effect on execution time. This option may be useful if there is a problem with USB display detection. The output varies by verbosity. Normal output: $ ddcutil detect Display 1< I2C bus: /dev/i2c-7 EDID synopsis: Mfg id: ACR Model: Acer X243W Serial number: LAG040064310 Manufacture year: 2007 EDID version: 1.3 VCP version: 2.1 Display 2 I2C bus: /dev/i2c-8 EDID synopsis: Mfg id: DEL Model: DELL P2411H Serial number: F8NDP11G119U Manufacture year: 2011 EDID version: 1.3 VCP version: 2.1 Display 3 I2C bus: /dev/i2c-10 EDID synopsis: Mfg id: HWP Model: HP Z22i Serial number: CNC51301ZP Manufacture year: 2015 EDID version: 1.3 VCP version: 2.2 Display 4 I2C bus: /dev/i2c-14 EDID synopsis: Mfg id: DEL Model: DELL U3011 Serial number: PH5NY2CIANXL Manufacture year: 2012 EDID version: 1.4 VCP version: 2.1","title":"Option: --nousb"},{"location":"command_detect/#option-brief-terse","text":"Presents a summary report of each detected display, in an easily machine readable form. $ ddcutil detect --brief Display 1 I2C bus: /dev/i2c-7 Monitor: ACR:Acer X243W:LAG040064310 Display 2 I2C bus: /dev/i2c-8 Monitor: DEL:DELL P2411H:F8NDP11G119U Display 3 I2C bus: /dev/i2c-10 Monitor: HWP:HP Z22i:CNC51301ZP Display 4 I2C bus: /dev/i2c-14 Monitor: DEL:DELL U3011:PH5NY2CIANXL","title":"Option: --brief, --terse"},{"location":"command_detect/#option-verbose","text":"Show additional information, including the EDID. $ ddcutil detect --verbose Display 1 I2C bus: /dev/i2c-7 I2C address 0x50 (EDID) responsive: true Is eDP device: false I2C address 0x37 (DDC) responsive: true /sys/bus/i2c/devices/i2c-7/name: AMDGPU i2c bit bus 0x92 EDID synopsis: Mfg id: ACR Model: Acer X243W Serial number: LAG040064310 Manufacture year: 2007 EDID version: 1.3 Product code: 0 Binary sn: 1952453327 (0x746012cf) Extra descriptor: Video input definition: 0x80 - Digital Input Supported features: DPMS active-off Digital display type: RGB 4:4:4 Standard sRGB color space: False White x,y: 0.313, 0.329 Red x,y: 0.640, 0.330 Green x,y: 0.300, 0.608 Blue x,y: 0.150, 0.060 Extension blocks: 0 EDID source: EDID hex dump: +0 +4 +8 +c 0 4 8 c +0000 00 ff ff ff ff ff ff 00 04 72 00 00 cf 12 60 74 .........r....`t +0010 2e 11 01 03 80 34 20 78 2a ef 95 a3 54 4c 9b 26 .....4 x*...TL.& +0020 0f 50 54 a5 4b 00 81 80 81 00 81 0f 95 00 95 0f .PT.K........... +0030 a9 40 b3 00 01 01 28 3c 80 a0 70 b0 23 40 30 20 .@....(<..p.#@0 +0040 36 00 06 44 21 00 00 1a 00 00 00 fd 00 38 4c 1e 6..D!........8L. +0050 52 11 00 0a 20 20 20 20 20 20 00 00 00 fc 00 41 R... .....A +0060 63 65 72 20 58 32 34 33 57 0a 20 20 00 00 00 ff cer X243W. .... +0070 00 4c 41 47 30 34 30 30 36 34 33 31 30 0a 00 68 .LAG040064310..h VCP version: 2.1 Controller mfg: Mstar Firmware version: 0.3 Monitor returns DDC Null Response for unsupported features: false Display 2 I2C bus: /dev/i2c-8 I2C address 0x50 (EDID) responsive: true Is eDP device: false I2C address 0x37 (DDC) responsive: true /sys/bus/i2c/devices/i2c-8/name: AMDGPU i2c bit bus 0x93 EDID synopsis: Mfg id: DEL Model: DELL P2411H Serial number: F8NDP11G119U Manufacture year: 2011 EDID version: 1.3 Product code: 41070 Binary sn: 825309525 (0x31313955) Extra descriptor: Video input definition: 0x80 - Digital Input Supported features: DPMS standby DPMS suspend DPMS active-off Digital display type: RGB 4:4:4 Standard sRGB color space: False White x,y: 0.313, 0.328 Red x,y: 0.631, 0.351 Green x,y: 0.334, 0.620 Blue x,y: 0.156, 0.051 Extension blocks: 0 EDID source: EDID hex dump: +0 +4 +8 +c 0 4 8 c +0000 00 ff ff ff ff ff ff 00 10 ac 6e a0 55 39 31 31 ..........n.U911 +0010 04 15 01 03 80 35 1e 78 ea bb 04 a1 59 55 9e 28 .....5.x....YU.( +0020 0d 50 54 a5 4b 00 71 4f 81 80 d1 c0 01 01 01 01 .PT.K.qO........ +0030 01 01 01 01 01 01 02 3a 80 18 71 38 2d 40 58 2c .......:..q8-@X, +0040 45 00 13 2b 21 00 00 1e 00 00 00 ff 00 46 38 4e E..+!........F8N +0050 44 50 31 31 47 31 31 39 55 0a 00 00 00 fc 00 44 DP11G119U......D +0060 45 4c 4c 20 50 32 34 31 31 48 0a 20 00 00 00 fd ELL P2411H. .... +0070 00 38 4c 1e 53 11 00 0a 20 20 20 20 20 20 00 63 .8L.S... .c VCP version: 2.1 Controller mfg: Mstar Firmware version: 1.1 Monitor returns DDC Null Response for unsupported features: false Display 3 I2C bus: /dev/i2c-10 I2C address 0x50 (EDID) responsive: true Is eDP device: false I2C address 0x37 (DDC) responsive: true /sys/bus/i2c/devices/i2c-10/name: AMDGPU i2c bit bus 0x95 EDID synopsis: Mfg id: HWP Model: HP Z22i Serial number: CNC51301ZP Manufacture year: 2015 EDID version: 1.3 Product code: 12428 Binary sn: 16843009 (0x01010101) Extra descriptor: Video input definition: 0x80 - Digital Input Supported features: DPMS active-off Digital display type: RGB 4:4:4 Standard sRGB color space: False White x,y: 0.313, 0.329 Red x,y: 0.647, 0.339 Green x,y: 0.307, 0.633 Blue x,y: 0.146, 0.056 Extension blocks: 0 EDID source: EDID hex dump: +0 +4 +8 +c 0 4 8 c +0000 00 ff ff ff ff ff ff 00 22 f0 8c 30 01 01 01 01 ........\"..0.... +0010 0d 19 01 03 80 30 1b 78 2e f8 55 a5 56 4e a2 25 .....0.x..U.VN.% +0020 0e 50 54 a1 08 00 d1 c0 81 c0 81 80 95 00 a9 c0 .PT............. +0030 b3 00 01 01 01 01 02 3a 80 18 71 38 2d 40 58 2c .......:..q8-@X, +0040 45 00 dd 0c 11 00 00 1e 00 00 00 fd 00 32 4c 18 E............2L. +0050 5e 11 00 0a 20 20 20 20 20 20 00 00 00 fc 00 48 ^... .....H +0060 50 20 5a 32 32 69 0a 20 20 20 20 20 00 00 00 ff P Z22i. .... +0070 00 43 4e 43 35 31 33 30 31 5a 50 0a 20 20 00 7c .CNC51301ZP. .| VCP version: 2.2 Controller mfg: Mstar Firmware version: 1.0 Monitor returns DDC Null Response for unsupported features: false Display 4 I2C bus: /dev/i2c-14 I2C address 0x50 (EDID) responsive: true Is eDP device: false I2C address 0x37 (DDC) responsive: true /sys/bus/i2c/devices/i2c-14/name: card0-DP-2 EDID synopsis: Mfg id: DEL Model: DELL U3011 Serial number: PH5NY2CIANXL Manufacture year: 2012 EDID version: 1.4 Product code: 16485 Binary sn: 1095653452 (0x414e584c) Extra descriptor: Video input definition: 0xb5 - Digital Input (DisplayPort) Supported features: DPMS active-off Digital display type: RGB 4:4:4 + YCrCb 4:2:2 Standard sRGB color space: True White x,y: 0.313, 0.329 Red x,y: 0.678, 0.309 Green x,y: 0.210, 0.692 Blue x,y: 0.146, 0.055 Extension blocks: 1 EDID source: EDID hex dump: +0 +4 +8 +c 0 4 8 c +0000 00 ff ff ff ff ff ff 00 10 ac 65 40 4c 58 4e 41 ..........e@LXNA +0010 33 16 01 04 b5 40 28 78 3a 8d 85 ad 4f 35 b1 25 3....@(x:...O5.% +0020 0e 50 54 a5 4b 00 71 4f 81 00 81 80 a9 40 d1 00 .PT.K.qO.....@.. +0030 d1 40 01 01 01 01 e2 68 00 a0 a0 40 2e 60 30 20 .@.....h...@.`0 +0040 36 00 81 91 21 00 00 1a 00 00 00 ff 00 50 48 35 6...!........PH5 +0050 4e 59 32 43 49 41 4e 58 4c 0a 00 00 00 fc 00 44 NY2CIANXL......D +0060 45 4c 4c 20 55 33 30 31 31 0a 20 20 00 00 00 fd ELL U3011. .... +0070 00 31 56 1d 71 1c 00 0a 20 20 20 20 20 20 01 56 .1V.q... .V VCP version: 2.1 Controller mfg: Mstar Firmware version: 1.5 Monitor returns DDC Null Response for unsupported features: false","title":"Option:  ***--verbose ***"},{"location":"command_dumpvcp_loadvcp/","text":"Commands dumpvcp and loadvcp These commands save and restore the current settings of color management related VCP features, i.e. those in group PROFILE. Syntax: dumpvcp <display-selection-options> dumpvcp [<file name>] If no file name is specified on dumpvcp , output is written to directory $HOME/.local/share/ddcutil. VCP Feature values are written in the format described for the getvcp (--terse)[command_getvcp.md#getvcp_terse] option. Syntax: loadvcp <display-selection-options> <file-name> Normally, the display to which the settings are to be applied is taken from the VCP file. In rare cases, this will be insufficient to identify the display, in which the the display selection options are required. If specified, the display selected must be consistent with the identifiers stored in the VCP file. Option: --noverify See setvcp option --noverify Option: --mccs &ltvcp version> When executing dumpvcp , emit output as per the specified MCCS (aka VCP) version, instead of the VCP version obtained from feature xDF (VCP Version). This can affect whether a feature value is output as type TABLE. Option: --verbose Display informational messages regarding verification.","title":"dumpvcp &amp; loadvcp"},{"location":"command_dumpvcp_loadvcp/#commands-dumpvcp-and-loadvcp","text":"These commands save and restore the current settings of color management related VCP features, i.e. those in group PROFILE. Syntax: dumpvcp <display-selection-options> dumpvcp [<file name>] If no file name is specified on dumpvcp , output is written to directory $HOME/.local/share/ddcutil. VCP Feature values are written in the format described for the getvcp (--terse)[command_getvcp.md#getvcp_terse] option. Syntax: loadvcp <display-selection-options> <file-name> Normally, the display to which the settings are to be applied is taken from the VCP file. In rare cases, this will be insufficient to identify the display, in which the the display selection options are required. If specified, the display selected must be consistent with the identifiers stored in the VCP file.","title":"Commands dumpvcp and loadvcp"},{"location":"command_dumpvcp_loadvcp/#option-noverify","text":"See setvcp option --noverify","title":"Option: --noverify"},{"location":"command_dumpvcp_loadvcp/#option-mccs-ltvcp-version","text":"When executing dumpvcp , emit output as per the specified MCCS (aka VCP) version, instead of the VCP version obtained from feature xDF (VCP Version). This can affect whether a feature value is output as type TABLE.","title":"Option: --mccs &amp;ltvcp version&gt;"},{"location":"command_dumpvcp_loadvcp/#option-verbose","text":"Display informational messages regarding verification.","title":"Option: --verbose"},{"location":"command_getvcp/","text":"Command getvcp Syntax: getvcp <display-selection-options> <other options> <feature-code-or-group> Monitor selection options are detailed here . Feature code/group specification is detailed here . If a feature group has been specified, there is normally no message if a feature is unsupported. This rule is not absolute. For some feature-groups it is appropriate to always report that a feature is unsupported. This is also affected by the --show-unsupported option described below. Option: --terse , --brief If --terse is specified on a getvcp command, output is in a format this is easily machine readable. This format is also used by dumpvcp . The format depends on the feature type. In keeping with ddcutil practice, VCP feature codes are shown without a leading hex indicator even though they are hexidecimal values. For a continuous VCP feature, both the current value (in decimal) and maximum value (in decimal) are shown. Output takes the form: VCP feature-code C cur-value-decimal max-value-decimal For example: VCP 10 C 50 100 For a simple non-continuous VCP feature, i.e. one for which only the SL response byte is significant, the value is reported in hex. Output takes the form: VCP feature-code SNC hex-value For example: VCP 60 SNC x03 Complex non-continuous VCP features are ones for which more then 1 response byte is significant. In that case all 4 bytes are reported in hex. Output takes the form: VCP feature-code CNC mh-hex ml-hex sh-hex sl-hex For example: VCP DF CND xff xff x02 x00 Table VCP features report the value as hexidecimal string. Output takes the form: VCP feature-code T hex-string For example: VCP 73 T x01020304 Finally, if a feature is not supported or some other error occurs, this may be reported or there may simply be no output. It is always reported for single feature getvcp requests. It is normally not reported if the request specifies a feature group, which defines a set of features. but see --show-unsupported . If reported, output takes the form: VCP feature-code ERR For example: VCP 84 ERR Option: --verbose The internal representation (bytes MH, ML, SH, SL) is shown. Unsupported features are always reported. Option: --show-unsupported If querying a single feature, getvcp reports an error if the feature is unsupported or some other error occurs. If querying a feature group, e.g. COLOR, output for invalid features is suppressd unless --verbose is specified. The --show-unsupported option forces error messages in all cases. Option: --mccs <vcp-version> Interprets the feature value as per the specified VCP (aka MCCS) version, instead of using the VCP version obtained from VCP feature xDF.","title":"getvcp"},{"location":"command_getvcp/#command-getvcp","text":"Syntax: getvcp <display-selection-options> <other options> <feature-code-or-group> Monitor selection options are detailed here . Feature code/group specification is detailed here . If a feature group has been specified, there is normally no message if a feature is unsupported. This rule is not absolute. For some feature-groups it is appropriate to always report that a feature is unsupported. This is also affected by the --show-unsupported option described below.","title":"Command getvcp"},{"location":"command_getvcp/#option-terse-brief","text":"If --terse is specified on a getvcp command, output is in a format this is easily machine readable. This format is also used by dumpvcp . The format depends on the feature type. In keeping with ddcutil practice, VCP feature codes are shown without a leading hex indicator even though they are hexidecimal values. For a continuous VCP feature, both the current value (in decimal) and maximum value (in decimal) are shown. Output takes the form: VCP feature-code C cur-value-decimal max-value-decimal For example: VCP 10 C 50 100 For a simple non-continuous VCP feature, i.e. one for which only the SL response byte is significant, the value is reported in hex. Output takes the form: VCP feature-code SNC hex-value For example: VCP 60 SNC x03 Complex non-continuous VCP features are ones for which more then 1 response byte is significant. In that case all 4 bytes are reported in hex. Output takes the form: VCP feature-code CNC mh-hex ml-hex sh-hex sl-hex For example: VCP DF CND xff xff x02 x00 Table VCP features report the value as hexidecimal string. Output takes the form: VCP feature-code T hex-string For example: VCP 73 T x01020304 Finally, if a feature is not supported or some other error occurs, this may be reported or there may simply be no output. It is always reported for single feature getvcp requests. It is normally not reported if the request specifies a feature group, which defines a set of features. but see --show-unsupported . If reported, output takes the form: VCP feature-code ERR For example: VCP 84 ERR","title":"Option: --terse, --brief"},{"location":"command_getvcp/#option-verbose","text":"The internal representation (bytes MH, ML, SH, SL) is shown. Unsupported features are always reported.","title":"Option: --verbose"},{"location":"command_getvcp/#option-show-unsupported","text":"If querying a single feature, getvcp reports an error if the feature is unsupported or some other error occurs. If querying a feature group, e.g. COLOR, output for invalid features is suppressd unless --verbose is specified. The --show-unsupported option forces error messages in all cases.","title":"Option: --show-unsupported"},{"location":"command_getvcp/#option-mccs-vcp-version","text":"Interprets the feature value as per the specified VCP (aka MCCS) version, instead of using the VCP version obtained from VCP feature xDF.","title":"Option: --mccs &lt;vcp-version&gt;"},{"location":"command_scs/","text":"Command scs Syntax: scs <display-selection-options> Sends a DDC Save Current Settings request to the display, which saves the current monitor settings to the display's nonvolatile storage. Some displays implement this request, others do not. (See the output of ddcutil capabilities .) Even for most that do, the command has no apparent effect. However, the command is required when settomg a featuer value for at least some Iiyama monitors. Users of models PL2492H and PL2792Q have reported that setvcp commands do not actually change the value unless immediately followed by a scs command. In that case, the setvcp command should use the --noverify option. Otherwise, setvcp internally performs a getvcp operation to check that the new value has actually been set, but retrieves the old value because scs has not occurred. For example: $ setvcp 10 85 # verifcation fails, the value is unchanged $ setvcp 10 85 --noverify $ scs $ getvcp 10 # works after scs","title":"scs"},{"location":"command_scs/#command-scs","text":"Syntax: scs <display-selection-options> Sends a DDC Save Current Settings request to the display, which saves the current monitor settings to the display's nonvolatile storage. Some displays implement this request, others do not. (See the output of ddcutil capabilities .) Even for most that do, the command has no apparent effect. However, the command is required when settomg a featuer value for at least some Iiyama monitors. Users of models PL2492H and PL2792Q have reported that setvcp commands do not actually change the value unless immediately followed by a scs command. In that case, the setvcp command should use the --noverify option. Otherwise, setvcp internally performs a getvcp operation to check that the new value has actually been set, but retrieves the old value because scs has not occurred. For example: $ setvcp 10 85 # verifcation fails, the value is unchanged $ setvcp 10 85 --noverify $ scs $ getvcp 10 # works after scs","title":"Command scs"},{"location":"command_setvcp/","text":"Command setvcp Syntax: setvcp <display-selection-options> (feature-code) [+|-] new-value) * In full generality, the new-value argument to setvcp is a 2 byte number. A handful of monitors have continuous features with values greater than 255. Also, the settable VCP feature x73 (Gamma) has a complex 2 byte encoding. Other than these exceptional casess, all settable values are integer values in the range 0..255, i.e. a single byte. Values can be specified either in decimal form, or as 1 or 2 byte hex numbers, with a leadning 'x'. Examples: $ ddcutil setvcp 10 50 $ ddcutil setvcp 10 0x32 $ ddcutil sdtvcp 73 x5304 Multiple feature / new-value pairs can be given on a single setvcp command. For example: $ ddcutil setvcp 10 50 12 75 It is possible to specify a relative instead of absolute value for a continuous feature by putting \" + \" or \" - \" between the feature id and value. The plus or minus signs must surrounded by spaces to indicate a relative value operation. The new value is adjusted so that it is never less than 0 or greater than the maximum value of the feature. In this situation setvcp first reads the current value before writing the adjusted value. For example, to adjust the brightness value up or down by 5: $ ddcutil setvcp 10 + 5 $ ddcutil setvcp 10 - 5 Option: --noverify When ddcutil sends a Set VCP Feature packet to a display, it receives an acknowlegement at the I2C level that the request packet was received. There have been occasional reports that the setvcp command appeared to succeed, but the new value was not set. Therefore setvcp (and loadvcp ) by default perform a getvcp operation to verify that the new value has actually been set. (Obviously, this verification does not occur for write-only features.) For most monitors, this verification is unnecessary. To improve performance it is possible to skip value verification using the --noverify option. Option: --verbose Display informational messages regarding verification. Option --mccs <vcp version> Parse the new value based on the the specified MCCS (aka VCP) version, instead of the version obtained from feature xDF (VCP Version).","title":"setvcp"},{"location":"command_setvcp/#command-setvcp","text":"Syntax: setvcp <display-selection-options> (feature-code) [+|-] new-value) * In full generality, the new-value argument to setvcp is a 2 byte number. A handful of monitors have continuous features with values greater than 255. Also, the settable VCP feature x73 (Gamma) has a complex 2 byte encoding. Other than these exceptional casess, all settable values are integer values in the range 0..255, i.e. a single byte. Values can be specified either in decimal form, or as 1 or 2 byte hex numbers, with a leadning 'x'. Examples: $ ddcutil setvcp 10 50 $ ddcutil setvcp 10 0x32 $ ddcutil sdtvcp 73 x5304 Multiple feature / new-value pairs can be given on a single setvcp command. For example: $ ddcutil setvcp 10 50 12 75 It is possible to specify a relative instead of absolute value for a continuous feature by putting \" + \" or \" - \" between the feature id and value. The plus or minus signs must surrounded by spaces to indicate a relative value operation. The new value is adjusted so that it is never less than 0 or greater than the maximum value of the feature. In this situation setvcp first reads the current value before writing the adjusted value. For example, to adjust the brightness value up or down by 5: $ ddcutil setvcp 10 + 5 $ ddcutil setvcp 10 - 5","title":"Command setvcp"},{"location":"command_setvcp/#option-noverify","text":"When ddcutil sends a Set VCP Feature packet to a display, it receives an acknowlegement at the I2C level that the request packet was received. There have been occasional reports that the setvcp command appeared to succeed, but the new value was not set. Therefore setvcp (and loadvcp ) by default perform a getvcp operation to verify that the new value has actually been set. (Obviously, this verification does not occur for write-only features.) For most monitors, this verification is unnecessary. To improve performance it is possible to skip value verification using the --noverify option.","title":"Option: --noverify"},{"location":"command_setvcp/#option-verbose","text":"Display informational messages regarding verification.","title":"Option: --verbose"},{"location":"command_setvcp/#option-mccs-vcp-version","text":"Parse the new value based on the the specified MCCS (aka VCP) version, instead of the version obtained from feature xDF (VCP Version).","title":"Option --mccs &lt;vcp version&gt;"},{"location":"command_vcpinfo/","text":"Command vcpinfo Syntax: vcpinfo <display-selection-options> <other options> <feature-code-or-group> This command reports ddcutil 's internal table of MCCS definitions. Monitor selection options are detailed here . Feature code/group specification is detailed here If no feature code or group is specified, ALL is assumed. If there is no definition for a particular feature code, nothing is output. (TO DO: should issue error message if a specific code is given, as opposed to a group, and no definition is found for the feature.) Normal output for a feature definition includes: Feature code Feature name Feature description (will indicate if the feature name varies by MCCS version) MCCS versions in which the feature is defined Feature groups that include the feature MCCS Specification Groups (TO DO: move to verbose output) Feature attributes: RW/RO/WO and type, which may vary by MCCS version Option: --verbose In addition to normal output, reports: For simple non-continuous features, the values defined in the MCCS specification and their names (per version). MCCS specification groups. These are the sections of the MCCS specification in which the feature code appears. (For some features, the specification group varies by MCCS version.) This field is entirely informational. It was impleented to aid in comparing dddcutil 's feature code definitions with the specification. O Option: --brief Outputs just a single line containig the feature code and name. Useful to just get a table of ids. Option --mccs Filters the information returned by vcpinfo to that for the specified MCCS version. For example, $ ddcutil vcpinfo --mccs 2.1","title":"vcpinfo"},{"location":"command_vcpinfo/#command-vcpinfo","text":"Syntax: vcpinfo <display-selection-options> <other options> <feature-code-or-group> This command reports ddcutil 's internal table of MCCS definitions. Monitor selection options are detailed here . Feature code/group specification is detailed here If no feature code or group is specified, ALL is assumed. If there is no definition for a particular feature code, nothing is output. (TO DO: should issue error message if a specific code is given, as opposed to a group, and no definition is found for the feature.) Normal output for a feature definition includes: Feature code Feature name Feature description (will indicate if the feature name varies by MCCS version) MCCS versions in which the feature is defined Feature groups that include the feature MCCS Specification Groups (TO DO: move to verbose output) Feature attributes: RW/RO/WO and type, which may vary by MCCS version","title":"Command vcpinfo"},{"location":"command_vcpinfo/#option-verbose","text":"In addition to normal output, reports: For simple non-continuous features, the values defined in the MCCS specification and their names (per version). MCCS specification groups. These are the sections of the MCCS specification in which the feature code appears. (For some features, the specification group varies by MCCS version.) This field is entirely informational. It was impleented to aid in comparing dddcutil 's feature code definitions with the specification.","title":"Option: --verbose"},{"location":"command_vcpinfo/#o-option-brief","text":"Outputs just a single line containig the feature code and name. Useful to just get a table of ids.","title":"O Option: --brief"},{"location":"command_vcpinfo/#option-mccs","text":"Filters the information returned by vcpinfo to that for the specified MCCS version. For example, $ ddcutil vcpinfo --mccs 2.1","title":"Option --mccs"},{"location":"commands/","text":"Command Overview ddcutil has the following commands: Primary Command Function detect report monitors detected capabilities report a monitor's capabilities string getvcp feature-code-or-group report a single VCP feature value, or a group of values setvcp feature-code new-value set a single VCP feature value vcpinfo (feature-code-or-group) list VCP features codes that ddcutil knows how to interpret dumpvcp filename save color related VCP feature values to a file loadvcp filename restore color related VCP feature values from a file scs execute DDC/CI Save Current Settings operation Secondary Command Function environment explore the ddcutil installation environment (other than USB) usbenvironment explore USB aspects of the ddcutil installation environment probe report the capabilities string and probe the features of a single monitor interrogate collect maximal information for problem diagnosis chkusbmon /dev/hiddevN used by udev rules to test if a USB device represents a monitor A feature code is specified as a hexadecimal number, with or without a leading \"x\". For example, to the current brightness value: $ddcutil getvcp 10 A feature-group is a named set of features. For example: $ ddcutil getvcp all $ ddcutil getvcp color If more than one monitor is attached, the desired monitor can be specified using any of several options. The most useful are: --display <display number> --bus <i2c bus number> To see a list of all attached monitors and their associated identifiers: $ ddcutil detect These sections document ddcutil commands and options in detail: Command Detail Command Options The --help option provides a summary of commands and options, as does the man page: $ ddcutil --help $ man 1 ddcutil Command examples: ddcutil detect ddcutil capabilities ddcutil getvcp ddcutil vcpinfo","title":"Command Overview"},{"location":"commands/#command-overview","text":"ddcutil has the following commands: Primary Command Function detect report monitors detected capabilities report a monitor's capabilities string getvcp feature-code-or-group report a single VCP feature value, or a group of values setvcp feature-code new-value set a single VCP feature value vcpinfo (feature-code-or-group) list VCP features codes that ddcutil knows how to interpret dumpvcp filename save color related VCP feature values to a file loadvcp filename restore color related VCP feature values from a file scs execute DDC/CI Save Current Settings operation Secondary Command Function environment explore the ddcutil installation environment (other than USB) usbenvironment explore USB aspects of the ddcutil installation environment probe report the capabilities string and probe the features of a single monitor interrogate collect maximal information for problem diagnosis chkusbmon /dev/hiddevN used by udev rules to test if a USB device represents a monitor A feature code is specified as a hexadecimal number, with or without a leading \"x\". For example, to the current brightness value: $ddcutil getvcp 10 A feature-group is a named set of features. For example: $ ddcutil getvcp all $ ddcutil getvcp color If more than one monitor is attached, the desired monitor can be specified using any of several options. The most useful are: --display <display number> --bus <i2c bus number> To see a list of all attached monitors and their associated identifiers: $ ddcutil detect These sections document ddcutil commands and options in detail: Command Detail Command Options The --help option provides a summary of commands and options, as does the man page: $ ddcutil --help $ man 1 ddcutil Command examples: ddcutil detect ddcutil capabilities ddcutil getvcp ddcutil vcpinfo","title":"Command Overview"},{"location":"config/","text":"ddcutil Configuration Several aspects of the communication environment must be configured. Ensure the monitor is enabled for DDC communication Nearly all monitors manufactured since the mid 2000's support DDC/CI, as do many made earlier. For most monitors that support DDC/CI, whether DDC/CI comminication is actually enabled is controlled by a setting in the on screen display. The item is typically found in a submenu named something like \"Other Settings\" Video Driver The video driver must support I2C bus communication. All major open source drivers (nouveau, radeon, admdgpu, i915) support I2C bus communication, as does the Nvidia proprietary driver. If using Nvidia's proprietary video driver, special settings may be necessary. See Special Nvidia Driver Settings For the Rapberry Pi, see the section Raspberry Pi . Ensure that the /dev/i2c-N devices exist Typically, the I2C buses are exposed as devices named /dev/i2c-N. Kernel module i2c-dev must be loaded to create the /dev/i2c-N devices. See Kernel Module Configuration Grant read/write permission for the /dev/i2c-N devices representing monitors ddcutil users require read/write permission to /dev/i2c-N devices. With varying complexity, this can be effected in many ways. Run ddcutil as root. Grant everyone RW access to the /dev/i2c devices for the current boot. $ sudo chmod a+rw /dev/i2c-* Assign the /dev/i2c devices to a group (normally i2c) and assign users who will run ddcutil to that group. For details, see I2C Device Permissions . USB connected monitors For details about USB device permissions for those monitors using USB instead of I2C to communicate the Monitor Control Command Set, see Device Permissions . Installation Diagnostics If ddcutil installs successfully but execution fails, command ddcutil environment can be used to probe the I2C environment and may provide clues as to the problem. For USB connected monitors, use command ddcutil usbenvironment . Linux command i2cdetect (typically found in package i2ctools ) provides an independent check of whether the DDC slave address (X37) is active on an I2C bus.","title":"Configuration and Installation Diagnostics"},{"location":"config/#ddcutil-configuration","text":"Several aspects of the communication environment must be configured.","title":"ddcutil Configuration"},{"location":"config/#ensure-the-monitor-is-enabled-for-ddc-communication","text":"Nearly all monitors manufactured since the mid 2000's support DDC/CI, as do many made earlier. For most monitors that support DDC/CI, whether DDC/CI comminication is actually enabled is controlled by a setting in the on screen display. The item is typically found in a submenu named something like \"Other Settings\"","title":"Ensure the monitor is enabled for DDC communication"},{"location":"config/#video-driver","text":"The video driver must support I2C bus communication. All major open source drivers (nouveau, radeon, admdgpu, i915) support I2C bus communication, as does the Nvidia proprietary driver. If using Nvidia's proprietary video driver, special settings may be necessary. See Special Nvidia Driver Settings For the Rapberry Pi, see the section Raspberry Pi .","title":"Video Driver"},{"location":"config/#ensure-that-the-devi2c-n-devices-exist","text":"Typically, the I2C buses are exposed as devices named /dev/i2c-N. Kernel module i2c-dev must be loaded to create the /dev/i2c-N devices. See Kernel Module Configuration","title":"Ensure that the /dev/i2c-N devices exist"},{"location":"config/#grant-readwrite-permission-for-the-devi2c-n-devices-representing-monitors","text":"ddcutil users require read/write permission to /dev/i2c-N devices. With varying complexity, this can be effected in many ways. Run ddcutil as root. Grant everyone RW access to the /dev/i2c devices for the current boot. $ sudo chmod a+rw /dev/i2c-* Assign the /dev/i2c devices to a group (normally i2c) and assign users who will run ddcutil to that group. For details, see I2C Device Permissions . USB connected monitors For details about USB device permissions for those monitors using USB instead of I2C to communicate the Monitor Control Command Set, see Device Permissions .","title":"Grant read/write permission for the /dev/i2c-N devices representing monitors"},{"location":"config/#installation-diagnostics","text":"If ddcutil installs successfully but execution fails, command ddcutil environment can be used to probe the I2C environment and may provide clues as to the problem. For USB connected monitors, use command ddcutil usbenvironment . Linux command i2cdetect (typically found in package i2ctools ) provides an independent check of whether the DDC slave address (X37) is active on an I2C bus.","title":"Installation Diagnostics"},{"location":"config_file/","text":"Configuration File Most ddcutil command line options, other than those for display or feature selection, can be specified in a configuration file. Options can also be specified for libddcutil and ddcui . ddcutil first looks for file ddcutil/ddcutilrc in the XDG_CONFIG_HOME directory, and then on the XDG_CONFIG_DIRS search path. Normally this will be $HOME/.config/ddcutil/ddcutilrc ddcutilrc is a standard style INI file, It has the following sections: Section name Purpose [global] Always apply [ddcutil] Applies to command ddcutil [ddcui] Applies to command ddcui [libddcutil] Used to configure shared library libddcutil Within each section, key options specifies an option string. Command options for monitor or feature selection cannot be specified. For ddcutil and ddcui , the options string obtained from the configuration file is used to prefix the command line options. For libddcutil , the option string is read directly when the shared library is initialized. For example: # This is a comment line [global] ; Combined with all other options strings options : --edid-read-size 256 [ddcutil] * This is a comment too options : --sleep-multiplier .5 --maxtries \"3,5,3\" [libddcutil] ; And this is a comment. Leading spaces in a line are ignored options: --noverify Section names and keys are case insensitive","title":"Configuration File"},{"location":"config_file/#configuration-file","text":"Most ddcutil command line options, other than those for display or feature selection, can be specified in a configuration file. Options can also be specified for libddcutil and ddcui . ddcutil first looks for file ddcutil/ddcutilrc in the XDG_CONFIG_HOME directory, and then on the XDG_CONFIG_DIRS search path. Normally this will be $HOME/.config/ddcutil/ddcutilrc ddcutilrc is a standard style INI file, It has the following sections: Section name Purpose [global] Always apply [ddcutil] Applies to command ddcutil [ddcui] Applies to command ddcui [libddcutil] Used to configure shared library libddcutil Within each section, key options specifies an option string. Command options for monitor or feature selection cannot be specified. For ddcutil and ddcui , the options string obtained from the configuration file is used to prefix the command line options. For libddcutil , the option string is read directly when the shared library is initialized. For example: # This is a comment line [global] ; Combined with all other options strings options : --edid-read-size 256 [ddcutil] * This is a comment too options : --sleep-multiplier .5 --maxtries \"3,5,3\" [libddcutil] ; And this is a comment. Leading spaces in a line are ignored options: --noverify Section names and keys are case insensitive","title":"Configuration File"},{"location":"config_steps/","text":"Post-Installation Checklist This page outlines steps that may be required to configure ddcutil after it has been installed. Kernel Module i2c-dev ddcutil requires kernel module i2c-dev. If it is not built into your kernel, it must be loaded explicly. To do so, add a file into directory /etc/modules-load.d with the single line: i2c-dev For details, see Kernel Module Configuration . I2C Device Permissions Permissions must be granted in order for users other than root to run ddcutil . On some distributions, including Debian and Ubuntu, all /dev/i2c devices are assigned to group i2c by installation of required package i2c-tools . All that is necessary is to add ddcutil users to group i2c : $ sudo usermod <user-name> -aG i2c If installing from some other distribution or from source, additional configuration may be required. See I2C Device Permissions . Proprietary Nvidia Driver The proprietary Nvidia video driver sometimes requires special settings for I2C communication. See Special Nvidia Driver Settings . Configuration Diagnostics If ddcutil installs successfully but execution fails, command ddcutil environment can be used to probe the I2C environment and may provide clues as to the problem. For USB connected monitors, use command ddcutil usbenvironment . See Secondary Commands . Linux command i2cdetect (found in required package i2ctools ) provides an independent check of whether the DDC slave address (X37) is active on an I2C bus. Shared Library Configuration When installing from source, additional configuration may be required to use shared library libddcutil if it is installed under /usr/local. See Shared Library Configuration . Note that libddcutil is NOT required to run ddcutil . Additional Information See also ddcutil Configuration .","title":"Post-Installation Checklist"},{"location":"config_steps/#post-installation-checklist","text":"This page outlines steps that may be required to configure ddcutil after it has been installed.","title":"Post-Installation Checklist"},{"location":"config_steps/#kernel-module-i2c-dev","text":"ddcutil requires kernel module i2c-dev. If it is not built into your kernel, it must be loaded explicly. To do so, add a file into directory /etc/modules-load.d with the single line: i2c-dev For details, see Kernel Module Configuration .","title":"Kernel Module i2c-dev"},{"location":"config_steps/#i2c-device-permissions","text":"Permissions must be granted in order for users other than root to run ddcutil . On some distributions, including Debian and Ubuntu, all /dev/i2c devices are assigned to group i2c by installation of required package i2c-tools . All that is necessary is to add ddcutil users to group i2c : $ sudo usermod <user-name> -aG i2c If installing from some other distribution or from source, additional configuration may be required. See I2C Device Permissions .","title":"I2C Device Permissions"},{"location":"config_steps/#proprietary-nvidia-driver","text":"The proprietary Nvidia video driver sometimes requires special settings for I2C communication. See Special Nvidia Driver Settings .","title":"Proprietary Nvidia Driver"},{"location":"config_steps/#configuration-diagnostics","text":"If ddcutil installs successfully but execution fails, command ddcutil environment can be used to probe the I2C environment and may provide clues as to the problem. For USB connected monitors, use command ddcutil usbenvironment . See Secondary Commands . Linux command i2cdetect (found in required package i2ctools ) provides an independent check of whether the DDC slave address (X37) is active on an I2C bus.","title":"Configuration Diagnostics"},{"location":"config_steps/#shared-library-configuration","text":"When installing from source, additional configuration may be required to use shared library libddcutil if it is installed under /usr/local. See Shared Library Configuration . Note that libddcutil is NOT required to run ddcutil .","title":"Shared Library Configuration"},{"location":"config_steps/#additional-information","text":"See also ddcutil Configuration .","title":"Additional Information"},{"location":"ddc_null_response/","text":"DDC Null Message Per section 6.4 of the Display Data Channel Command Interface Standard, Version 1.1, October 29, 2004: A DDC NULL message from display to host is used in the following cases: - To detect that the display is DDC/CI capable (by reading it at 0x6Fh I2C slave address) - To tell the host that the display does not have any answer to give the host (not ready or not expected) - The \"Enable Application Report\" has not been sent before using Application Messages The second bullet point causes ambiguity: In the context of a getting a VCP value or reading the capabilities string, a Null Message normally indicates that the display is not ready to process a DDC message. The proper response in this case is to sleep for an extended period and retry. Some monitors use the Null Message to indicate an unsupported feature, instead of returning a normal response with the Unsupported Feature bit set. The proper response in this case is to not retry. However, it is still possible that a monitor that users the Null Message to indicate an unsupported feature also on occasion uses the Null Message to indicate an error. The unfortunate consequence is that multiple retries will occur in cases where the Null Message is used to indicate VCP value not found, slowing down operation for those monitors. DDC attempts to read VCP feature 0x00, which never exists, during the monitor detection phase to determine if a monitor uses the Null Message to indicated unsupported. This is used to control whether a persistent Null Message response is interpreted by higher levels of ddcutil as an error or unsupported feature indication.","title":"DDC Null Message"},{"location":"ddc_null_response/#ddc-null-message","text":"Per section 6.4 of the Display Data Channel Command Interface Standard, Version 1.1, October 29, 2004: A DDC NULL message from display to host is used in the following cases: - To detect that the display is DDC/CI capable (by reading it at 0x6Fh I2C slave address) - To tell the host that the display does not have any answer to give the host (not ready or not expected) - The \"Enable Application Report\" has not been sent before using Application Messages The second bullet point causes ambiguity: In the context of a getting a VCP value or reading the capabilities string, a Null Message normally indicates that the display is not ready to process a DDC message. The proper response in this case is to sleep for an extended period and retry. Some monitors use the Null Message to indicate an unsupported feature, instead of returning a normal response with the Unsupported Feature bit set. The proper response in this case is to not retry. However, it is still possible that a monitor that users the Null Message to indicate an unsupported feature also on occasion uses the Null Message to indicate an error. The unfortunate consequence is that multiple retries will occur in cases where the Null Message is used to indicate VCP value not found, slowing down operation for those monitors. DDC attempts to read VCP feature 0x00, which never exists, during the monitor detection phase to determine if a monitor uses the Null Message to indicated unsupported. This is used to control whether a persistent Null Message response is interpreted by higher levels of ddcutil as an error or unsupported feature indication.","title":"DDC Null Message"},{"location":"ddc_vs_i2c/","text":"DDC vs I2C The relationship between DDC and I2C is a source of confusion. Making matters worse, the terms are often used interchangably. This section attempts to clarify the relationship. I2C is a low level, slow speed specification of a 2 wire protocol for sending and receiving bytes. DDC/CI is layered on top of that protocol, describing particular sequences of bytes that are communicated between a master device (the host computer) and a slave device (a monitor) at address x37 on an I2C bus. By analogy, DDC is as a subclass of superclass I2C, that is DDC obeys the rules of I2C, but is more specific. For example, only certain byte sequences are legal. SMBUS is another protocol based on I2C. For details on I2C, see the References section . ddcutil reads from and writes to the userspace /dev-i2c devices which present a file system like abstraction of an I2C bus. It leaves the bit-banging to the video device drivers, e.g. amdgpu, nouveau. Some time ago the Monitor Control Command Set (MCCS) specification took on the role of defining the virtual control panel (VCP) feature codes processed by DDC/CI. The DDC/CI specification references the MCCS spec. Later, a protocol (the VESA UBS Monitor Control Class Specification ) was defined for carrying MCCS over USB, without use of DDC/CI. Nonetheless this usage is also referred to casually as \"DDC\".","title":"DDC vs I2C"},{"location":"ddc_vs_i2c/#ddc-vs-i2c","text":"The relationship between DDC and I2C is a source of confusion. Making matters worse, the terms are often used interchangably. This section attempts to clarify the relationship. I2C is a low level, slow speed specification of a 2 wire protocol for sending and receiving bytes. DDC/CI is layered on top of that protocol, describing particular sequences of bytes that are communicated between a master device (the host computer) and a slave device (a monitor) at address x37 on an I2C bus. By analogy, DDC is as a subclass of superclass I2C, that is DDC obeys the rules of I2C, but is more specific. For example, only certain byte sequences are legal. SMBUS is another protocol based on I2C. For details on I2C, see the References section . ddcutil reads from and writes to the userspace /dev-i2c devices which present a file system like abstraction of an I2C bus. It leaves the bit-banging to the video device drivers, e.g. amdgpu, nouveau. Some time ago the Monitor Control Command Set (MCCS) specification took on the role of defining the virtual control panel (VCP) feature codes processed by DDC/CI. The DDC/CI specification references the MCCS spec. Later, a protocol (the VESA UBS Monitor Control Class Specification ) was defined for carrying MCCS over USB, without use of DDC/CI. Nonetheless this usage is also referred to casually as \"DDC\".","title":"DDC vs I2C"},{"location":"ddccontrol/","text":"Comparison with ddccontrol The program ddccontrol appears to be unmaintained, and has been dropped from distributions. It is brittle in ways that I surmise reflect the services availble at the time it was written. In particular: ddcctontrol , as it is normally built (based on configure options that control conditional compilation), programs the I2C devcies directly at the PCI level. It has dedicated code for each of several video card interfaces (e.g. nvidia, sis, intel740, intell 810). ddcutil , on the other hand, relies exclusively on the the i2c-dev userspace interface to I2C. This should make it less fragile to video card variations. ddccontrol uses a monitor attribute database to interpret VCP feature codes. With MCCS 2.0 and greater, VCP feature code definitions are largely standardized. ddcutil uses the MCCS specification to interpret VCP feature values, and considerable effort has gone into understanding that specification, particularly the variation among versions. Unlike ddccontrol , ddcutil makes no attempt to interpret values for feature codes designated as manufacturer specific (E0..FF).","title":"Comparison with ddccontrol"},{"location":"ddccontrol/#comparison-with-ddccontrol","text":"The program ddccontrol appears to be unmaintained, and has been dropped from distributions. It is brittle in ways that I surmise reflect the services availble at the time it was written. In particular: ddcctontrol , as it is normally built (based on configure options that control conditional compilation), programs the I2C devcies directly at the PCI level. It has dedicated code for each of several video card interfaces (e.g. nvidia, sis, intel740, intell 810). ddcutil , on the other hand, relies exclusively on the the i2c-dev userspace interface to I2C. This should make it less fragile to video card variations. ddccontrol uses a monitor attribute database to interpret VCP feature codes. With MCCS 2.0 and greater, VCP feature code definitions are largely standardized. ddcutil uses the MCCS specification to interpret VCP feature values, and considerable effort has gone into understanding that specification, particularly the variation among versions. Unlike ddccontrol , ddcutil makes no attempt to interpret values for feature codes designated as manufacturer specific (E0..FF).","title":"Comparison with ddccontrol"},{"location":"ddcui_faq/","text":"ddcui Frequently Asked Questions See also the main ddcutil Frequently Asked Questions . Console message qt.qpa.xcb: QXcbConnection: XCB error: 3 (BadWindow) This warning message can occur when closing a dialog box, such as Feature Selection . It is a known bug in Qt, and will be fixed in an upcoming Qt release. (The fix has been applied to Qt 6.5.0 Beta1.) The message can be ignored.","title":"ddcui Frequently Asked Questions"},{"location":"ddcui_faq/#ddcui-frequently-asked-questions","text":"See also the main ddcutil Frequently Asked Questions .","title":"ddcui Frequently Asked Questions"},{"location":"ddcui_faq/#console-message-qtqpaxcb-qxcbconnection-xcb-error-3-badwindow","text":"This warning message can occur when closing a dialog box, such as Feature Selection . It is a known bug in Qt, and will be fixed in an upcoming Qt release. (The fix has been applied to Qt 6.5.0 Beta1.) The message can be ignored.","title":"Console message qt.qpa.xcb: QXcbConnection: XCB error: 3 (BadWindow)"},{"location":"ddcui_main/","text":"ddcui Overview ddcui is a graphical user user interface for ddcutil , implemented using Qt. It is beta quality code, Some features are not fully implemented. and various corner cases are as yet unaddressed. Views The application has 3 views: Summary , Capabilities , and Features The Summary View for a monitor reports basic monitor information, similar to the output shown by command ddcutil detect --verbose . The view exists for every monitor detected, whether or not it supports DDC/CI. The Capabilities View for a monitor reports its raw capabilities string, and also a parsed interpretation based on the Monitor Control Command Set (MCCS) specification. This is comparable to the output shown by command ddcutil capabilities --verbose . The view exists only for monitors that support DDC/CI. The Features View for a monitor reports the value of every monitor feature. Modifyable feature values can also be changed. The view exists only for monitors that support DDC/CI. Source code and prebuilt packages: Code is available on GitHub . Some prebuilt packages are available on Copr and Launchpad The latest ddcui release is 0.2.0 , It requires ddcutil release 1.2.0 or later. For instructions on how to build ddcui , see Building ddcui . Prebuilt packages can be found on: launchpad for Ubuntu, Debian, and derivatives. Note that on launchpad ddcui and ddcutil are found together. copr for Fedora, openSUSE, Centos. Note that on copr ddcui and ddcutil are found together. Unexpected Behavior Incorrect values shown It is possible for feature values reported in ddcui to become out of sync with actual monitor values. If feature values are changed using the monitor's On Screen Display. If feature values are changed by another program, including the command line program ddcutil . Some monitors will change their state (e.g. red gain) when the value in the GUI changes. However, the monitor still reports the old value, which is shown in ddcui . This is a bug in the monitor's DDC/CI implementation. Conversely, some monitors will report a newly set value, but the observed state of the monitor is unchanged. Again, this is a bug in the monitor's DDC/CI implementation. In some, but not all, cases, ddcui can be resynced with the actual monitor settings using menu item Actions->Rescan Monitor Values Accidentally changing a feature value When swiping the mouse or using the mouse wheel to scroll the VCP Features section, it is possible to accidentally move a slider that changes a continuous feature value. Optionally, the UI behavior can be altered to require that the control key be held down in order to move a slider. This behavior is modified using dialog Options->User Interface Options->Require control key to move sliders . Pages with additional ddcui information: - Command line options - Building ddcui - Prebuilt Packages - ddcui Release Notes","title":"Overview"},{"location":"ddcui_main/#ddcui-overview","text":"ddcui is a graphical user user interface for ddcutil , implemented using Qt. It is beta quality code, Some features are not fully implemented. and various corner cases are as yet unaddressed.","title":"ddcui Overview"},{"location":"ddcui_main/#views","text":"The application has 3 views: Summary , Capabilities , and Features The Summary View for a monitor reports basic monitor information, similar to the output shown by command ddcutil detect --verbose . The view exists for every monitor detected, whether or not it supports DDC/CI. The Capabilities View for a monitor reports its raw capabilities string, and also a parsed interpretation based on the Monitor Control Command Set (MCCS) specification. This is comparable to the output shown by command ddcutil capabilities --verbose . The view exists only for monitors that support DDC/CI. The Features View for a monitor reports the value of every monitor feature. Modifyable feature values can also be changed. The view exists only for monitors that support DDC/CI.","title":"Views"},{"location":"ddcui_main/#source-code-and-prebuilt-packages","text":"Code is available on GitHub . Some prebuilt packages are available on Copr and Launchpad The latest ddcui release is 0.2.0 , It requires ddcutil release 1.2.0 or later. For instructions on how to build ddcui , see Building ddcui . Prebuilt packages can be found on: launchpad for Ubuntu, Debian, and derivatives. Note that on launchpad ddcui and ddcutil are found together. copr for Fedora, openSUSE, Centos. Note that on copr ddcui and ddcutil are found together.","title":"Source code and prebuilt packages:"},{"location":"ddcui_main/#unexpected-behavior","text":"","title":"Unexpected Behavior"},{"location":"ddcui_main/#incorrect-values-shown","text":"It is possible for feature values reported in ddcui to become out of sync with actual monitor values. If feature values are changed using the monitor's On Screen Display. If feature values are changed by another program, including the command line program ddcutil . Some monitors will change their state (e.g. red gain) when the value in the GUI changes. However, the monitor still reports the old value, which is shown in ddcui . This is a bug in the monitor's DDC/CI implementation. Conversely, some monitors will report a newly set value, but the observed state of the monitor is unchanged. Again, this is a bug in the monitor's DDC/CI implementation. In some, but not all, cases, ddcui can be resynced with the actual monitor settings using menu item Actions->Rescan Monitor Values","title":"Incorrect values shown"},{"location":"ddcui_main/#accidentally-changing-a-feature-value","text":"When swiping the mouse or using the mouse wheel to scroll the VCP Features section, it is possible to accidentally move a slider that changes a continuous feature value. Optionally, the UI behavior can be altered to require that the control key be held down in order to move a slider. This behavior is modified using dialog Options->User Interface Options->Require control key to move sliders . Pages with additional ddcui information: - Command line options - Building ddcui - Prebuilt Packages - ddcui Release Notes","title":"Accidentally changing a feature value"},{"location":"ddcui_next_release_notes/","text":"Github Branch 0.4.0-dev Requires libddcutil.so.5.x.x from ddcutil 2.0.0-dev or later. Added options: --syslog <log level> controls what messages are written to the system log by ddcui and libddcutil . Valid levels are NEVER , ERROR , WARNING , NOTICE , INFO , and DEBUG . The default is NOTICE . --noconfig , --disable-config-file . Do not obtain options from configuration file $HOME/.config/ddcutil/ddcutilrc. --libopts \"options\" . Passes an option string to the shared library. This string is appended to the libddcutil option string obtained from the ddcutil configuration file. Several ddcui command line options existed to pass options to the shared library. These can now be passed using option --libopts . and have been eliminated: --nousb --trace --trcfunc --trcfile Building ddcui : cmake option DDCUTIL_PROJECT_DIR specifies the root directory of project ddcutil . This allows for building ddcui using the latest development version of libddcutil without having to install it. e.g. cmake -D DDCUTIL_PROJECT_DIR=/my/ddcutil/project/dir","title":"Preliminary Notes for the Next ddcui Release"},{"location":"ddcui_next_release_notes/#github-branch-040-dev","text":"Requires libddcutil.so.5.x.x from ddcutil 2.0.0-dev or later. Added options: --syslog <log level> controls what messages are written to the system log by ddcui and libddcutil . Valid levels are NEVER , ERROR , WARNING , NOTICE , INFO , and DEBUG . The default is NOTICE . --noconfig , --disable-config-file . Do not obtain options from configuration file $HOME/.config/ddcutil/ddcutilrc. --libopts \"options\" . Passes an option string to the shared library. This string is appended to the libddcutil option string obtained from the ddcutil configuration file. Several ddcui command line options existed to pass options to the shared library. These can now be passed using option --libopts . and have been eliminated: --nousb --trace --trcfunc --trcfile Building ddcui : cmake option DDCUTIL_PROJECT_DIR specifies the root directory of project ddcutil . This allows for building ddcui using the latest development version of libddcutil without having to install it. e.g. cmake -D DDCUTIL_PROJECT_DIR=/my/ddcutil/project/dir","title":"Github Branch 0.4.0-dev"},{"location":"ddcui_options/","text":"ddcui Command Line Options Command line options of interest to general users: Options passed to libddcutil Option Comments --sleep-multiplier=<number> Sleep adjustment factor, can include decimal point, e.g. .1, 10 --ddc Report DDC protocol and data errors to terminal --nousb Skip detection of monitors that communicate using USB --udf Enable User Defined Features (Default) --noudf Disable User Defined Features --maxtries=<comma separated list> Max try adjustment --trace=<trace group name> Group to trace --trcfile=<file name> File to trace --trcfunc=<function name> Function to trace (selected functions only) Options both processed by ddcui and passed to libddcutil Option Comments --timestamp, --ts Preface trace messages with timestamp --thread-id, --tid Preface trace messages with process id The remaining options are processed solely by ddcui . They correspond to settings in the Options menu, or to the initial Model selection Options that change the initial settings for the Feature Selection dialog: Option Comments --feature-set=<name> Initial feature set to show --custom-feature-set=\"<feature list>\" --only-capabilities Restrict values to those in the capabilities string --all-capabilities Always include values in capabilities string --show-unsupported Report unsupported features in feature-set --force-latest-nc-value-names Take the names for NC values from the latest applicable MCCS spec Note that --only-capabilities and all-capabiites are applicable in different contexts: - --only-capabilities applies when the feature group selected is MCCS , COLOR , MANUFACTURER - --all-capabilities applies when the feature group is MCCS Features in the custom <feature list> are specified as 2 byte hex numbers, with or without leading \"x\" or trailing \"h\". To specify more than one feature, separate the feature codes by commas or blanks, and enclose the entire list in quotation marks. For example: --feature-set \"10 x12 14h\" Options that change the initial settings for the NC Values Source dialog: Option Comments --nc-values-source=<source> Primary source of NC values: MCCS, Capabilities, Both Options that change the initial settings for User Interface Options dialog: Option Comments --require-control-key Control key must be pressed to move slider Initial display selection: Option Comments --model=<model name> Other options processed solely by ddcui Option Comments --styles List available Qt styles --style=style-name Use the specified Qt style --version, -V Report version information","title":"Command Line Options"},{"location":"ddcui_options/#ddcui-command-line-options","text":"Command line options of interest to general users: Options passed to libddcutil Option Comments --sleep-multiplier=<number> Sleep adjustment factor, can include decimal point, e.g. .1, 10 --ddc Report DDC protocol and data errors to terminal --nousb Skip detection of monitors that communicate using USB --udf Enable User Defined Features (Default) --noudf Disable User Defined Features --maxtries=<comma separated list> Max try adjustment --trace=<trace group name> Group to trace --trcfile=<file name> File to trace --trcfunc=<function name> Function to trace (selected functions only) Options both processed by ddcui and passed to libddcutil Option Comments --timestamp, --ts Preface trace messages with timestamp --thread-id, --tid Preface trace messages with process id The remaining options are processed solely by ddcui . They correspond to settings in the Options menu, or to the initial Model selection Options that change the initial settings for the Feature Selection dialog: Option Comments --feature-set=<name> Initial feature set to show --custom-feature-set=\"<feature list>\" --only-capabilities Restrict values to those in the capabilities string --all-capabilities Always include values in capabilities string --show-unsupported Report unsupported features in feature-set --force-latest-nc-value-names Take the names for NC values from the latest applicable MCCS spec Note that --only-capabilities and all-capabiites are applicable in different contexts: - --only-capabilities applies when the feature group selected is MCCS , COLOR , MANUFACTURER - --all-capabilities applies when the feature group is MCCS Features in the custom <feature list> are specified as 2 byte hex numbers, with or without leading \"x\" or trailing \"h\". To specify more than one feature, separate the feature codes by commas or blanks, and enclose the entire list in quotation marks. For example: --feature-set \"10 x12 14h\" Options that change the initial settings for the NC Values Source dialog: Option Comments --nc-values-source=<source> Primary source of NC values: MCCS, Capabilities, Both Options that change the initial settings for User Interface Options dialog: Option Comments --require-control-key Control key must be pressed to move slider Initial display selection: Option Comments --model=<model name> Other options processed solely by ddcui Option Comments --styles List available Qt styles --style=style-name Use the specified Qt style --version, -V Report version information","title":"ddcui Command Line Options"},{"location":"ddcui_release_notes/","text":"ddcui Release Notes Release 0.3.0 For notes on the release currently in devlopment, see Preliminary Notes for the Next ddcui Release . 05 August 2022 General User Interface Changes CTL-Q terminates ddcui (does not apply within dialog boxes) Errors opening /dev/i2c and /dev/usb/hiddev devices are reported using a message box instead of being written to the terminal. These errors typically reflect lack of permissions (Linux error EACCESS). Optionally requiring the control key to be pressed when changing feature values now applies to all changes, not just those made using sliders. (The option is set using command line option --require-control-key or the UI Options dialog box.). The tab key was not jumping to the OK and Cancel buttons in option dialogs. Feature Value Handling For simple NC values, do not include the SH field in validation when changing a value. It has been observed that there exist monitors (e.g. Dell U4320) for which the high order byte of feature x60 (Input Source) can be non-zero. EBUSY Errors As of libddcutil release 1.3.0, the shared library has been modified to avoid the code path in driver i2c-dev that can produce EBUSY errors. Options --force-slave-address and --disable-force-slave-address , introduced in Release 0.2.1, are deprecated and no longer have any effect. For details see Device Busy (EBUSY) Errors in the release notes for ddcutil 1.3.0. Release 0.2.2 22 February 2022 Critical Bug Fix Fix an erroneous assert() statement that could cause a compilation failure or segfault in the handling of features X62 (Speaker Volume). Release 0.2.1 02 February 2022 Handling EBUSY Errors New command line option --force-slave-address enables ddcui to take control of DDC communication with a display from a conflicting program, notably display driver ddcci. For details, see Option: --force-slave-address and Device Busy Errors in the main ddcutil documentation. CMakeLists.txt Cleanup The minimum required version of CMake is set to 3.10. The CMakeLists.txt script is known to work in Ubuntu 18.04, which has CMake 13.10. It may work for earlier CMake versions; the cmake_minimum_required() statement can be edited to allow execution, Most messages from the script, issued using the message() statement. are defined to have message level VERBOSE. By default, these are not shown, reducing output clutter. Using cmake command line option --log-level=verbose will cause them to be shown. However, message level verbose did not exist prior to release 3.15. In that case the messages are unconditionally issued. If ccache is installed, cmake command line option --use-cache controls whether ccache is used to reduce build time. The default is --use-cache=yes . Better support for CMAKE_BUILD_TYPE. The default is -DCMAKE_BUILD_TYPE=DEBUG . Option Removed: Use Latest Feature Values Option \"Use Latest Feature Values\" in the NC Feature Values dialog, and corresponding command line option --use-latest-nc-values have been removed. This option told ddcui to use the NC values for the most recent MCCS specification, as opposed to the MCCS version that the monitor reports. This option was hard to explain and convoluted to implement. The User Defined Features facility makes it unnecessary, since that facility can be used to define the NC values for a monitor feature. Miscellaneous Disable selecting the Capabilities and Feature views for a monitor if it doesn't support DDC/CI, or the capabilities string cannot be read. Disable all view selection if no monitor is detected. Release 0.2.0 25 November 2021 While far from complete, this release should be suitable for general use. The code base has been extensively reworked. This section summarizes user visible changes since release 0.1.2. ddcui 0.2.0 requires at least libddcutil.so.4.1.0 from ddcutil package 1.2.0 or later. Enhanced Feature Representation In MCCS 2.2 and 3.0, some features have both a set of special values and a continuous range. These include x62 (Audio Volume), x63 (Audio Balance) , x87 (Audio Tebble), X91 (Audio Bass), and x93 (Audio Balance). The widget for these features has both a slider/spinbox for the continuous range and a combo-box for the special values. Non-Continuous Feature Values There are three interrelated mechanisms for addressing unexpected values for a simple Non-Continuous feature. The monitor may report a feature value that is not listed in the capabilities string or the Monitor Control Command Set. In this situation the value is still listed in the combo box even if another value is subsequently selected. When presenting simple Non-Continuous feature, ddcui uses the values/name table specified for the monitor's MCCS version. Sometimes monitors use feature values defined in a later version. The Use latest MCCS values checkbox in the NC Feature Values dialog specifies that the NC value table for the highest possible MCCS version be used. This can also be specified by command line option --force-latest-nc-value-names . Supply a User Defined Feature definition. See User Defined Features . Redetect Monitors For situations where a display is attached or detached, Menubar option Actions->Redetect Monitors can be used to redetect displays. The plan is for this to happen automatically in a future release. Miscellaneous User Interface Changes The Other Options dialog has been renamed to NC Feature Values . Help screen content has been revised and extended. General user interface cleanup Desktop Integration Install ddcui.desktop in /usr/share/applications. Install icons in /usr/share/icons/hicolor. An icon is also installed in /usr/share/pixmaps as Gnome Classic only looks in the latter directory. Install ddcui.appdata.xml in /usr/share/metainfo. Use icon \"video-display\" from Oxygen theme as it already exists under an open source license. Configuration File Configuration file, typically $HOME/.config/ddcutil/ddcutilrc, is shared with ddcutil and libddcutil . Options can specified for the ddcui command line, and also for passing directly to the shared library. See page Configuration File . Invocation Several command line options that were simply passed to libddcutil have been removed from the command line, as they can now be be specified instead in the [libddcutil section of configuration file ddcutilrc . These include --udf , --no-udf , --nousb , --maxtries , -- sleep-multiplier , --sleep-less , --less-sleep , --no-less-sleep , --dynamic-sleep-adjustment . Command line option --help does not report development related options. Use --help-development or --help-all to see them. Building ddcui qmake is no longer supported. Use cmake. Release 0.1.2 29 June 2020 Bug fixes: The combo boxes for simple Non-Continuous values appeared empty instead of showing the current value and list of allowed values. Release 0.1.1 24 June 2020 Command Line Options Several command line options have been added. See Command Line Options User Defined (aka Custom) Feature Set Custom feature sets enable the user to specify exactly which features are to be shown in the Features view. Feature Slection Dialog changes: Radio button Custom has been added as an alternative to MCCS , Capabilities , etc. for feature set selection. When Custom is clicked, an edit box enables entry of the feature codes to be included. These are entered as two character hex values, with or without a leading \"x' or trailing \"h\". The values are separated by commas and/or blanks. Command line option --custom-feature-set specifies the custom feature set from the command line. For example: $ddcutil --custom-feature-set \"10 x12, 01h\"","title":"ddcui Release Notes"},{"location":"ddcui_release_notes/#ddcui-release-notes","text":"","title":"ddcui Release Notes"},{"location":"ddcui_release_notes/#release-030","text":"For notes on the release currently in devlopment, see Preliminary Notes for the Next ddcui Release . 05 August 2022","title":"Release 0.3.0"},{"location":"ddcui_release_notes/#general-user-interface-changes","text":"CTL-Q terminates ddcui (does not apply within dialog boxes) Errors opening /dev/i2c and /dev/usb/hiddev devices are reported using a message box instead of being written to the terminal. These errors typically reflect lack of permissions (Linux error EACCESS). Optionally requiring the control key to be pressed when changing feature values now applies to all changes, not just those made using sliders. (The option is set using command line option --require-control-key or the UI Options dialog box.). The tab key was not jumping to the OK and Cancel buttons in option dialogs.","title":"General User Interface Changes"},{"location":"ddcui_release_notes/#feature-value-handling","text":"For simple NC values, do not include the SH field in validation when changing a value. It has been observed that there exist monitors (e.g. Dell U4320) for which the high order byte of feature x60 (Input Source) can be non-zero.","title":"Feature Value Handling"},{"location":"ddcui_release_notes/#ebusy-errors","text":"As of libddcutil release 1.3.0, the shared library has been modified to avoid the code path in driver i2c-dev that can produce EBUSY errors. Options --force-slave-address and --disable-force-slave-address , introduced in Release 0.2.1, are deprecated and no longer have any effect. For details see Device Busy (EBUSY) Errors in the release notes for ddcutil 1.3.0.","title":"EBUSY Errors"},{"location":"ddcui_release_notes/#release-022","text":"22 February 2022","title":"Release 0.2.2"},{"location":"ddcui_release_notes/#critical-bug-fix","text":"Fix an erroneous assert() statement that could cause a compilation failure or segfault in the handling of features X62 (Speaker Volume).","title":"Critical Bug Fix"},{"location":"ddcui_release_notes/#release-021","text":"02 February 2022","title":"Release 0.2.1"},{"location":"ddcui_release_notes/#handling-ebusy-errors","text":"New command line option --force-slave-address enables ddcui to take control of DDC communication with a display from a conflicting program, notably display driver ddcci. For details, see Option: --force-slave-address and Device Busy Errors in the main ddcutil documentation.","title":"Handling EBUSY Errors"},{"location":"ddcui_release_notes/#cmakeliststxt-cleanup","text":"The minimum required version of CMake is set to 3.10. The CMakeLists.txt script is known to work in Ubuntu 18.04, which has CMake 13.10. It may work for earlier CMake versions; the cmake_minimum_required() statement can be edited to allow execution, Most messages from the script, issued using the message() statement. are defined to have message level VERBOSE. By default, these are not shown, reducing output clutter. Using cmake command line option --log-level=verbose will cause them to be shown. However, message level verbose did not exist prior to release 3.15. In that case the messages are unconditionally issued. If ccache is installed, cmake command line option --use-cache controls whether ccache is used to reduce build time. The default is --use-cache=yes . Better support for CMAKE_BUILD_TYPE. The default is -DCMAKE_BUILD_TYPE=DEBUG .","title":"CMakeLists.txt Cleanup"},{"location":"ddcui_release_notes/#option-removed-use-latest-feature-values","text":"Option \"Use Latest Feature Values\" in the NC Feature Values dialog, and corresponding command line option --use-latest-nc-values have been removed. This option told ddcui to use the NC values for the most recent MCCS specification, as opposed to the MCCS version that the monitor reports. This option was hard to explain and convoluted to implement. The User Defined Features facility makes it unnecessary, since that facility can be used to define the NC values for a monitor feature.","title":"Option Removed: Use Latest Feature Values"},{"location":"ddcui_release_notes/#miscellaneous","text":"Disable selecting the Capabilities and Feature views for a monitor if it doesn't support DDC/CI, or the capabilities string cannot be read. Disable all view selection if no monitor is detected.","title":"Miscellaneous"},{"location":"ddcui_release_notes/#release-020","text":"25 November 2021 While far from complete, this release should be suitable for general use. The code base has been extensively reworked. This section summarizes user visible changes since release 0.1.2. ddcui 0.2.0 requires at least libddcutil.so.4.1.0 from ddcutil package 1.2.0 or later.","title":"Release 0.2.0"},{"location":"ddcui_release_notes/#enhanced-feature-representation","text":"In MCCS 2.2 and 3.0, some features have both a set of special values and a continuous range. These include x62 (Audio Volume), x63 (Audio Balance) , x87 (Audio Tebble), X91 (Audio Bass), and x93 (Audio Balance). The widget for these features has both a slider/spinbox for the continuous range and a combo-box for the special values.","title":"Enhanced Feature Representation"},{"location":"ddcui_release_notes/#non-continuous-feature-values","text":"There are three interrelated mechanisms for addressing unexpected values for a simple Non-Continuous feature. The monitor may report a feature value that is not listed in the capabilities string or the Monitor Control Command Set. In this situation the value is still listed in the combo box even if another value is subsequently selected. When presenting simple Non-Continuous feature, ddcui uses the values/name table specified for the monitor's MCCS version. Sometimes monitors use feature values defined in a later version. The Use latest MCCS values checkbox in the NC Feature Values dialog specifies that the NC value table for the highest possible MCCS version be used. This can also be specified by command line option --force-latest-nc-value-names . Supply a User Defined Feature definition. See User Defined Features .","title":"Non-Continuous Feature Values"},{"location":"ddcui_release_notes/#redetect-monitors","text":"For situations where a display is attached or detached, Menubar option Actions->Redetect Monitors can be used to redetect displays. The plan is for this to happen automatically in a future release.","title":"Redetect Monitors"},{"location":"ddcui_release_notes/#miscellaneous-user-interface-changes","text":"The Other Options dialog has been renamed to NC Feature Values . Help screen content has been revised and extended. General user interface cleanup","title":"Miscellaneous User Interface Changes"},{"location":"ddcui_release_notes/#desktop-integration","text":"Install ddcui.desktop in /usr/share/applications. Install icons in /usr/share/icons/hicolor. An icon is also installed in /usr/share/pixmaps as Gnome Classic only looks in the latter directory. Install ddcui.appdata.xml in /usr/share/metainfo. Use icon \"video-display\" from Oxygen theme as it already exists under an open source license.","title":"Desktop Integration"},{"location":"ddcui_release_notes/#configuration-file","text":"Configuration file, typically $HOME/.config/ddcutil/ddcutilrc, is shared with ddcutil and libddcutil . Options can specified for the ddcui command line, and also for passing directly to the shared library. See page Configuration File .","title":"Configuration File"},{"location":"ddcui_release_notes/#invocation","text":"Several command line options that were simply passed to libddcutil have been removed from the command line, as they can now be be specified instead in the [libddcutil section of configuration file ddcutilrc . These include --udf , --no-udf , --nousb , --maxtries , -- sleep-multiplier , --sleep-less , --less-sleep , --no-less-sleep , --dynamic-sleep-adjustment . Command line option --help does not report development related options. Use --help-development or --help-all to see them.","title":"Invocation"},{"location":"ddcui_release_notes/#building-ddcui","text":"qmake is no longer supported. Use cmake.","title":"Building ddcui"},{"location":"ddcui_release_notes/#release-012","text":"29 June 2020 Bug fixes: The combo boxes for simple Non-Continuous values appeared empty instead of showing the current value and list of allowed values.","title":"Release 0.1.2"},{"location":"ddcui_release_notes/#release-011","text":"24 June 2020","title":"Release 0.1.1"},{"location":"ddcui_release_notes/#command-line-options","text":"Several command line options have been added. See Command Line Options","title":"Command Line Options"},{"location":"ddcui_release_notes/#user-defined-aka-custom-feature-set","text":"Custom feature sets enable the user to specify exactly which features are to be shown in the Features view. Feature Slection Dialog changes: Radio button Custom has been added as an alternative to MCCS , Capabilities , etc. for feature set selection. When Custom is clicked, an edit box enables entry of the feature codes to be included. These are entered as two character hex values, with or without a leading \"x' or trailing \"h\". The values are separated by commas and/or blanks. Command line option --custom-feature-set specifies the custom feature set from the command line. For example: $ddcutil --custom-feature-set \"10 x12, 01h\"","title":"User Defined (aka Custom) Feature Set"},{"location":"ddcutil_usage/","text":"ddcutil Usage Applications Using the ddcutil command line program VDU Controls ddcrelight Controls a yoctopuce light sensor. Gnome brightness control or at Applications Using libddcutil KDE Powerdevil, if macro USE_DDCUTIL is defined ddcui APIs Rust Crates Some Clever Scripting Use udev and ddcutil to automatically change input source","title":"Applications using ddcutil"},{"location":"ddcutil_usage/#ddcutil-usage","text":"","title":"ddcutil Usage"},{"location":"ddcutil_usage/#applications-using-the-ddcutil-command-line-program","text":"VDU Controls ddcrelight Controls a yoctopuce light sensor. Gnome brightness control or at","title":"Applications Using the ddcutil command line program"},{"location":"ddcutil_usage/#applications-using-libddcutil","text":"KDE Powerdevil, if macro USE_DDCUTIL is defined ddcui","title":"Applications Using libddcutil"},{"location":"ddcutil_usage/#apis","text":"Rust Crates","title":"APIs"},{"location":"ddcutil_usage/#some-clever-scripting","text":"Use udev and ddcutil to automatically change input source","title":"Some Clever Scripting"},{"location":"debug_options/","text":"Tracing Option: --trace <trace-group> Each function in the code base, other than utility functions, is assigned to a trace group. This option enables trace messages for a group. Can be specified more than once to trace multiple groups. Option: --trcfunc <function name> Enable trace messages in a particular function. Can be specified more than once to trace multiple functions. Option: --trcfile <file name> Enable trace messages in a single file. The argument is a simple file name, e.g. \"ddc_services.c\". Can be specified more than once to trace multiple files. Option: --timestamp , --ts Prefix trace messages with the number of seconds since ddcutil startup Option: --wall-timestamp , --wts Prefix trace messages with the current clock time. Option: --thread_id , --tid Prefix trace messages with the a thread id number. This is the Linux thread id. Option: --syslog Write trace messages to the system log as well as the currently active trace message destination (typically the terminal). Other Debug Options Option: --force Override some checks. Usually fatal. Option: -excp Portions of the ddcutil code base use an exception-like mechanism that can record the individual errors that contribute to a master error. If this option is specified, the exceptions are displayed before converting them to a single status code.","title":"Debugging Options"},{"location":"debug_options/#tracing","text":"","title":"Tracing"},{"location":"debug_options/#option-trace-trace-group","text":"Each function in the code base, other than utility functions, is assigned to a trace group. This option enables trace messages for a group. Can be specified more than once to trace multiple groups.","title":"Option: --trace &lt;trace-group&gt;"},{"location":"debug_options/#option-trcfunc-function-name","text":"Enable trace messages in a particular function. Can be specified more than once to trace multiple functions.","title":"Option: --trcfunc &lt;function name&gt;"},{"location":"debug_options/#option-trcfile-file-name","text":"Enable trace messages in a single file. The argument is a simple file name, e.g. \"ddc_services.c\". Can be specified more than once to trace multiple files.","title":"Option: --trcfile  &lt;file name&gt;"},{"location":"debug_options/#option-timestamp-ts","text":"Prefix trace messages with the number of seconds since ddcutil startup","title":"Option: --timestamp, --ts"},{"location":"debug_options/#option-wall-timestamp-wts","text":"Prefix trace messages with the current clock time.","title":"Option: --wall-timestamp, --wts"},{"location":"debug_options/#option-thread_id-tid","text":"Prefix trace messages with the a thread id number. This is the Linux thread id.","title":"Option: --thread_id, --tid"},{"location":"debug_options/#option-syslog","text":"Write trace messages to the system log as well as the currently active trace message destination (typically the terminal).","title":"Option: --syslog"},{"location":"debug_options/#other-debug-options","text":"","title":"Other Debug Options"},{"location":"debug_options/#option-force","text":"Override some checks. Usually fatal.","title":"Option: --force"},{"location":"debug_options/#option-excp","text":"Portions of the ddcutil code base use an exception-like mechanism that can record the individual errors that contribute to a master error. If this option is specified, the exceptions are displayed before converting them to a single status code.","title":"Option: -excp"},{"location":"detect_verbose_output/","text":"ddcutil detect The following example shows verbose output of ddcutil detect command on a system with 4 monitors attached. $ ddcutil detect --verbose Output level: Verbose Reporting DDC data errors: false Trace groups active: none Display 1 Bus: /dev/i2c-0 Supports DDC: true EDID synopsis: Mfg id: DEL Model: DELL P2411H Serial number: F8NDP11G119U Manufacture year: 2011 EDID version: 1.3 EDID hex dump: +0 +4 +8 +c 0 4 8 c +0000 00 ff ff ff ff ff ff 00 10 ac 6e a0 55 39 31 31 ..........n.U911 +0010 04 15 01 03 80 35 1e 78 ea bb 04 a1 59 55 9e 28 .....5.x....YU.( +0020 0d 50 54 a5 4b 00 71 4f 81 80 d1 c0 01 01 01 01 .PT.K.qO........ +0030 01 01 01 01 01 01 02 3a 80 18 71 38 2d 40 58 2c .......:..q8-@X, +0040 45 00 13 2b 21 00 00 1e 00 00 00 ff 00 46 38 4e E..+!........F8N +0050 44 50 31 31 47 31 31 39 55 0a 00 00 00 fc 00 44 DP11G119U......D +0060 45 4c 4c 20 50 32 34 31 31 48 0a 20 00 00 00 fd ELL P2411H. .... +0070 00 38 4c 1e 53 11 00 0a 20 20 20 20 20 20 00 63 .8L.S... .c VCP version: 2.1 Controller mfg: Mstar Firmware version: 1.1 Display 2 Bus: /dev/i2c-3 Supports DDC: true EDID synopsis: Mfg id: ACI Model: VE247 Serial number: AALMQS027787 Manufacture year: 2010 EDID version: 1.3 EDID hex dump: +0 +4 +8 +c 0 4 8 c +0000 00 ff ff ff ff ff ff 00 04 69 93 24 01 01 01 01 .........i.$.... +0010 2c 14 01 03 80 35 1e 78 ea 2c c5 a4 56 50 a1 28 ,....5.x.,..VP.( +0020 0f 50 54 bf ef 00 71 4f 81 80 81 40 95 00 a9 40 .PT...qO...@...@ +0030 b3 00 d1 c0 01 01 02 3a 80 18 71 38 2d 40 58 2c .......:..q8-@X, +0040 45 00 13 2b 21 00 00 1e 00 00 00 fd 00 32 4c 1e E..+!........2L. +0050 53 11 00 0a 20 20 20 20 20 20 00 00 00 fc 00 56 S... .....V +0060 45 32 34 37 0a 20 20 20 20 20 20 20 00 00 00 ff E247. .... +0070 00 41 41 4c 4d 51 53 30 32 37 37 38 37 0a 00 9e .AALMQS027787... VCP version: 2.0 Controller mfg: RealTek Firmware version: 2.0 Display 3 Bus: /dev/i2c-5 Supports DDC: true EDID synopsis: Mfg id: ACR Model: Acer X243W Serial number: LAG040064310 Manufacture year: 2007 EDID version: 1.3 EDID hex dump: +0 +4 +8 +c 0 4 8 c +0000 00 ff ff ff ff ff ff 00 04 72 00 00 cf 12 60 74 .........r....`t +0010 2e 11 01 03 80 34 20 78 2a ef 95 a3 54 4c 9b 26 .....4 x*...TL.& +0020 0f 50 54 a5 4b 00 81 80 81 00 81 0f 95 00 95 0f .PT.K........... +0030 a9 40 b3 00 01 01 28 3c 80 a0 70 b0 23 40 30 20 .@....(<..p.#@0 +0040 36 00 06 44 21 00 00 1a 00 00 00 fd 00 38 4c 1e 6..D!........8L. +0050 52 11 00 0a 20 20 20 20 20 20 00 00 00 fc 00 41 R... .....A +0060 63 65 72 20 58 32 34 33 57 0a 20 20 00 00 00 ff cer X243W. .... +0070 00 4c 41 47 30 34 30 30 36 34 33 31 30 0a 00 68 .LAG040064310..h VCP version: 2.1 Controller mfg: Mstar Firmware version: 0.3 Display 4 Bus: /dev/i2c-6 Supports DDC: true EDID synopsis: Mfg id: DEL Model: DELL U3011 Serial number: PH5NY2CIANXL Manufacture year: 2012 EDID version: 1.4 EDID hex dump: +0 +4 +8 +c 0 4 8 c +0000 00 ff ff ff ff ff ff 00 10 ac 65 40 4c 58 4e 41 ..........e@LXNA +0010 33 16 01 04 b5 40 28 78 3a 8d 85 ad 4f 35 b1 25 3....@(x:...O5.% +0020 0e 50 54 a5 4b 00 71 4f 81 00 81 80 a9 40 d1 00 .PT.K.qO.....@.. +0030 d1 40 01 01 01 01 e2 68 00 a0 a0 40 2e 60 30 20 .@.....h...@.`0 +0040 36 00 81 91 21 00 00 1a 00 00 00 ff 00 50 48 35 6...!........PH5 +0050 4e 59 32 43 49 41 4e 58 4c 0a 00 00 00 fc 00 44 NY2CIANXL......D +0060 45 4c 4c 20 55 33 30 31 31 0a 20 20 00 00 00 fd ELL U3011. .... +0070 00 31 56 1d 71 1c 00 0a 20 20 20 20 20 20 01 56 .1V.q... .V VCP version: 2.1 Controller mfg: Mstar Firmware version: 1.5","title":"ddcutil detect example"},{"location":"detect_verbose_output/#ddcutil-detect","text":"The following example shows verbose output of ddcutil detect command on a system with 4 monitors attached. $ ddcutil detect --verbose Output level: Verbose Reporting DDC data errors: false Trace groups active: none Display 1 Bus: /dev/i2c-0 Supports DDC: true EDID synopsis: Mfg id: DEL Model: DELL P2411H Serial number: F8NDP11G119U Manufacture year: 2011 EDID version: 1.3 EDID hex dump: +0 +4 +8 +c 0 4 8 c +0000 00 ff ff ff ff ff ff 00 10 ac 6e a0 55 39 31 31 ..........n.U911 +0010 04 15 01 03 80 35 1e 78 ea bb 04 a1 59 55 9e 28 .....5.x....YU.( +0020 0d 50 54 a5 4b 00 71 4f 81 80 d1 c0 01 01 01 01 .PT.K.qO........ +0030 01 01 01 01 01 01 02 3a 80 18 71 38 2d 40 58 2c .......:..q8-@X, +0040 45 00 13 2b 21 00 00 1e 00 00 00 ff 00 46 38 4e E..+!........F8N +0050 44 50 31 31 47 31 31 39 55 0a 00 00 00 fc 00 44 DP11G119U......D +0060 45 4c 4c 20 50 32 34 31 31 48 0a 20 00 00 00 fd ELL P2411H. .... +0070 00 38 4c 1e 53 11 00 0a 20 20 20 20 20 20 00 63 .8L.S... .c VCP version: 2.1 Controller mfg: Mstar Firmware version: 1.1 Display 2 Bus: /dev/i2c-3 Supports DDC: true EDID synopsis: Mfg id: ACI Model: VE247 Serial number: AALMQS027787 Manufacture year: 2010 EDID version: 1.3 EDID hex dump: +0 +4 +8 +c 0 4 8 c +0000 00 ff ff ff ff ff ff 00 04 69 93 24 01 01 01 01 .........i.$.... +0010 2c 14 01 03 80 35 1e 78 ea 2c c5 a4 56 50 a1 28 ,....5.x.,..VP.( +0020 0f 50 54 bf ef 00 71 4f 81 80 81 40 95 00 a9 40 .PT...qO...@...@ +0030 b3 00 d1 c0 01 01 02 3a 80 18 71 38 2d 40 58 2c .......:..q8-@X, +0040 45 00 13 2b 21 00 00 1e 00 00 00 fd 00 32 4c 1e E..+!........2L. +0050 53 11 00 0a 20 20 20 20 20 20 00 00 00 fc 00 56 S... .....V +0060 45 32 34 37 0a 20 20 20 20 20 20 20 00 00 00 ff E247. .... +0070 00 41 41 4c 4d 51 53 30 32 37 37 38 37 0a 00 9e .AALMQS027787... VCP version: 2.0 Controller mfg: RealTek Firmware version: 2.0 Display 3 Bus: /dev/i2c-5 Supports DDC: true EDID synopsis: Mfg id: ACR Model: Acer X243W Serial number: LAG040064310 Manufacture year: 2007 EDID version: 1.3 EDID hex dump: +0 +4 +8 +c 0 4 8 c +0000 00 ff ff ff ff ff ff 00 04 72 00 00 cf 12 60 74 .........r....`t +0010 2e 11 01 03 80 34 20 78 2a ef 95 a3 54 4c 9b 26 .....4 x*...TL.& +0020 0f 50 54 a5 4b 00 81 80 81 00 81 0f 95 00 95 0f .PT.K........... +0030 a9 40 b3 00 01 01 28 3c 80 a0 70 b0 23 40 30 20 .@....(<..p.#@0 +0040 36 00 06 44 21 00 00 1a 00 00 00 fd 00 38 4c 1e 6..D!........8L. +0050 52 11 00 0a 20 20 20 20 20 20 00 00 00 fc 00 41 R... .....A +0060 63 65 72 20 58 32 34 33 57 0a 20 20 00 00 00 ff cer X243W. .... +0070 00 4c 41 47 30 34 30 30 36 34 33 31 30 0a 00 68 .LAG040064310..h VCP version: 2.1 Controller mfg: Mstar Firmware version: 0.3 Display 4 Bus: /dev/i2c-6 Supports DDC: true EDID synopsis: Mfg id: DEL Model: DELL U3011 Serial number: PH5NY2CIANXL Manufacture year: 2012 EDID version: 1.4 EDID hex dump: +0 +4 +8 +c 0 4 8 c +0000 00 ff ff ff ff ff ff 00 10 ac 65 40 4c 58 4e 41 ..........e@LXNA +0010 33 16 01 04 b5 40 28 78 3a 8d 85 ad 4f 35 b1 25 3....@(x:...O5.% +0020 0e 50 54 a5 4b 00 71 4f 81 00 81 80 a9 40 d1 00 .PT.K.qO.....@.. +0030 d1 40 01 01 01 01 e2 68 00 a0 a0 40 2e 60 30 20 .@.....h...@.`0 +0040 36 00 81 91 21 00 00 1a 00 00 00 ff 00 50 48 35 6...!........PH5 +0050 4e 59 32 43 49 41 4e 58 4c 0a 00 00 00 fc 00 44 NY2CIANXL......D +0060 45 4c 4c 20 55 33 30 31 31 0a 20 20 00 00 00 fd ELL U3011. .... +0070 00 31 56 1d 71 1c 00 0a 20 20 20 20 20 20 01 56 .1V.q... .V VCP version: 2.1 Controller mfg: Mstar Firmware version: 1.5","title":"ddcutil detect"},{"location":"display_selection/","text":"Display Selection With the exception of detect , all primary ddcutil commands operate on a single monitor. If there are multiple DDC capable monitors, one must be selected. Display detection, which is explicitly reported by ddcutil detect , assigns each MCCS capable monitor a display number, starting from 1. First are the I2C connected displays in I2C bus order, followed by any displays using USB for communication. If no display is specified on the command line, the first display is chosen. If more than one monitor is attached, the desired monitor can be specified using the following options: Option Note --display <display number> --bus <i2c bus number> alt: -b <i2c bus number> --usb <usb bus number>.<usb device number> --hiddev <usb hiddev device number> --edid <256 character hex string> --mfg <mfg code> 3 character mfg id from EDID --model <model name> model name from EDID --sn <serial number> ASCII serial number from EDID Any combination of manufacturer code, model name and serial number can be used together to identify a monitor. The first monitor to satisfy all the specified criteria is selected. To see a list of all attached monitors and their associated identifiers: $ ddcutil detect See also: ddcutil detect example","title":"Display Selection"},{"location":"display_selection/#display-selection","text":"With the exception of detect , all primary ddcutil commands operate on a single monitor. If there are multiple DDC capable monitors, one must be selected. Display detection, which is explicitly reported by ddcutil detect , assigns each MCCS capable monitor a display number, starting from 1. First are the I2C connected displays in I2C bus order, followed by any displays using USB for communication. If no display is specified on the command line, the first display is chosen. If more than one monitor is attached, the desired monitor can be specified using the following options: Option Note --display <display number> --bus <i2c bus number> alt: -b <i2c bus number> --usb <usb bus number>.<usb device number> --hiddev <usb hiddev device number> --edid <256 character hex string> --mfg <mfg code> 3 character mfg id from EDID --model <model name> model name from EDID --sn <serial number> ASCII serial number from EDID Any combination of manufacturer code, model name and serial number can be used together to identify a monitor. The first monitor to satisfy all the specified criteria is selected. To see a list of all attached monitors and their associated identifiers: $ ddcutil detect See also: ddcutil detect example","title":"Display Selection"},{"location":"displayport/","text":"DDC Over DisplayPort Sometimes, DDC works over a HDMI or DVI connection but not over DisplayPort. Occasionally the converse is true. This section describes how DDC, or more precisely I2C, is communicated over DisplayPort, and may prove helpful when analyzing DDC communication problems. I2C is a simple serial protocol that uses 2 signaling lines, referred to as SCL and SDA, sometimes referred to as DDC clock and DDC data, along with their associated grounds. These are pins 12/15 on a HD15 VGA connector, 6/7 on a DVI connector, and 15/16 on a HDMI connector. DVI and HDMI use the same protocol, TMDS (Transition Minimized Differential Signaling) for transmitting video information. While more recent versions of HDMI have additional capabilities, e.g. Ethernet, CEC, for video and DDC of monitor communication DVI and HDMI are equivalent, except for bandwidth. It's possible to connect a DVI output on a host to a HDMI input on a monitor, or vice-versa, using a simple DVI<->HDMI cable. DisplayPort, on ther other hand, uses its own packetized protocol for video. It also has a secondary Auxilliary (AUX) channel (and pins) for non-video communication. DisplayPort does not have the I2C SLA/SLC pins. Instead, the logical I2C signals are converted at each end into messages on the AUX channel. Put another way, DDC is implemented using the AUX channel, but the AUX channel itself is not DDC. The \"multiplexing\" of I2C over the AUX channel is transparent to all but the lowest level of I2C software at each end. It is possible to connect the DisplayPort output on a host to a DVI or HDMI input on a monitor using an \"active\", or sometimes a \"passive\", adapter. Most active adapters connect a DisplayPort output on the host to a DVI or HDMI input on the monitor. An active adapter converts the DisplayPort video signal to the TMDS video signal used by DVI or HDMI. It also converts the I2C signals on the AUX channel to and from the physical SDA and SCL signals on the DVI/HDMI connector. To the host, it appears that it is communicating with a DisplayPort input on the monitor. To the monitor it appears that it is communicating with a HDMI or DVI output on the host. There are active adapters that convert a DVI/HDMI output on the host to a DisplayPort input on the monitor. These adapters are uncommon, and are much more expensive. There do not appear to be any adapters that operate in both directions. Active adapters will be labeled \"Active\". If the video adapter implements Display Port Dual Mode, also known as DP++, then it is possible to use a \"passive adapter\" between the DisplayPort output on the host and the HDMI/DVI input on the monitor. When the host detects that its DisplayPort output is connected to a HDMI/DVI monitor input instead of a DisplayPort input, it shifts to \"alternate\" mode, treating its DisplayPort connector as if it were a weird DVI/HDMI connector. It uses TMDS for the video signal, and uses the AUX channel pins as simple SDA/SCL pins. A \"passive\" adapter simply routes wires appropriately, and adjusts voltage levels. Host DisplayPort connectors that support dual mode should be marked as such. The marker is a D with a P inside, and two + signs to the left, one above the other. Most DisplayPort connectors on recent video cards are dual mode. Unfortunately, they are not always marked as such. A video adapter may have a limitation on the number of DisplayPort outputs that can operate in dual mode. In that case, active adapters are required. For futher details of DisplayPort, its Wikipedia page is an excellent resource.","title":"DDC and DisplayPort"},{"location":"displayport/#ddc-over-displayport","text":"Sometimes, DDC works over a HDMI or DVI connection but not over DisplayPort. Occasionally the converse is true. This section describes how DDC, or more precisely I2C, is communicated over DisplayPort, and may prove helpful when analyzing DDC communication problems. I2C is a simple serial protocol that uses 2 signaling lines, referred to as SCL and SDA, sometimes referred to as DDC clock and DDC data, along with their associated grounds. These are pins 12/15 on a HD15 VGA connector, 6/7 on a DVI connector, and 15/16 on a HDMI connector. DVI and HDMI use the same protocol, TMDS (Transition Minimized Differential Signaling) for transmitting video information. While more recent versions of HDMI have additional capabilities, e.g. Ethernet, CEC, for video and DDC of monitor communication DVI and HDMI are equivalent, except for bandwidth. It's possible to connect a DVI output on a host to a HDMI input on a monitor, or vice-versa, using a simple DVI<->HDMI cable. DisplayPort, on ther other hand, uses its own packetized protocol for video. It also has a secondary Auxilliary (AUX) channel (and pins) for non-video communication. DisplayPort does not have the I2C SLA/SLC pins. Instead, the logical I2C signals are converted at each end into messages on the AUX channel. Put another way, DDC is implemented using the AUX channel, but the AUX channel itself is not DDC. The \"multiplexing\" of I2C over the AUX channel is transparent to all but the lowest level of I2C software at each end. It is possible to connect the DisplayPort output on a host to a DVI or HDMI input on a monitor using an \"active\", or sometimes a \"passive\", adapter. Most active adapters connect a DisplayPort output on the host to a DVI or HDMI input on the monitor. An active adapter converts the DisplayPort video signal to the TMDS video signal used by DVI or HDMI. It also converts the I2C signals on the AUX channel to and from the physical SDA and SCL signals on the DVI/HDMI connector. To the host, it appears that it is communicating with a DisplayPort input on the monitor. To the monitor it appears that it is communicating with a HDMI or DVI output on the host. There are active adapters that convert a DVI/HDMI output on the host to a DisplayPort input on the monitor. These adapters are uncommon, and are much more expensive. There do not appear to be any adapters that operate in both directions. Active adapters will be labeled \"Active\". If the video adapter implements Display Port Dual Mode, also known as DP++, then it is possible to use a \"passive adapter\" between the DisplayPort output on the host and the HDMI/DVI input on the monitor. When the host detects that its DisplayPort output is connected to a HDMI/DVI monitor input instead of a DisplayPort input, it shifts to \"alternate\" mode, treating its DisplayPort connector as if it were a weird DVI/HDMI connector. It uses TMDS for the video signal, and uses the AUX channel pins as simple SDA/SCL pins. A \"passive\" adapter simply routes wires appropriately, and adjusts voltage levels. Host DisplayPort connectors that support dual mode should be marked as such. The marker is a D with a P inside, and two + signs to the left, one above the other. Most DisplayPort connectors on recent video cards are dual mode. Unfortunately, they are not always marked as such. A video adapter may have a limitation on the number of DisplayPort outputs that can operate in dual mode. In that case, active adapters are required. For futher details of DisplayPort, its Wikipedia page is an excellent resource.","title":"DDC Over DisplayPort"},{"location":"faq/","text":"Frequently Asked Questions ddcutil does not identify a DDC/CI capable monitor. Check the following: Is DDC/CI enabled in the monitor's On Screen Display? Is driver i2c-dev loaded? Does the current user have permission to access the I2C bus associated with the monitor? Command ddcutil environment will analyze your system environment and make suggestions. See enviroment Command ddcutil doesn't work on my laptop. Laptop displays do not support DDC/CI. But recent laptops use Embedded Display Port (eDP) panels which have an I2C interface. Why doesn't ddcutil work? The I2C connection on eDP panels implements slave address x50, which allows programs to read the EDID in the expected way. However, it does not implement slave address x37, i.e. it does not support DDC/CI. If eDP panels did implement DDC/CI, ddcutil would support it. For each I2C bus that could possibly be associated with a monitor, as part of display detection ddcutil attempts to read the EDID at slave address x50. If successful, it then attempts to communicate on slave address x37. If that fails, and display detection is occurring in the context of ddcutil detect --verbose , ddcutil then looks for a possible reason, and checks to see if the display is a laptop. If so, it then reports that laptops to not support DDC/CI. ddcutil is slow. Typically, ddcutil spends 90% of its elapsed time in waits mandated by the DDC/CI protocol. Two options can have a big impact on performance: Option --bus . If the /dev/i2c bus number of the monitor is given, ddcutil skips the initial phase of searching the /dev/i2c devices for monitors. Note that if this option is specified, no other monitor selection option such as --display should be specified. Option --sleep-multiplier . This option adjusts the length of time ddcutil spends in DDC/CI mandated waits. For example, if the DDC/CI protocol specifies a 40 ms wait between the time a command is sent to the monitor and the time a reply is read, and --sleep-multiplier .2 is given, ddcutil will only wait (.2 x 40 ms) = 8 ms. Some monitors have been found to communicate successfully with --sleep-multiplier values as low as .1. On the other hand, some monitors with poor DDC/CI implementations perform better if the sleep time is increased by using a value greater than 1. ddcutil can't communicate with a monitor when it's plugged into a docking station. ddcutil does work when the monitor is plugged directly into the laptop. The problem affects DisplayPort, DVI, and HDMI connectors on the dock. This is a problem with newer docking stations that implement DisplayPort Multi Stream Transport. Until kernel release 5.11, the drm driver layer did not implement I2C writes. For the gory details, see this thread on the Intel-gfx developers list. I'm using Nvidia's proprietary driver. ddcutil doesn't seem to be be working. Symptoms include \"DDC communication failed\" on ddcutil detect , and lots of \"Maximum retries exceeded\" errors on command ddcutil getvcp known . You may need the Nvidia secret handshake. See Special Nvidia Driver Settings . The capabilities command reports the MCCS (aka VCP) version, but elsewhere ddcutil says the version is unknown. DDC/CI has two ways to get the the MCCS version: As part of the capabilities string returned in response to a DDC Capabilities Request. As the response to a VCP Feature Request for feature xDF (VCP Version). Sometimes they disagree. Command ddcutil capabilities reports the response to the DDC Capabilities Request. However, ddcutil regards this output as purely informational. (See capabilities command ) ddcutil therefore relies on VCP feature code xDF to determine the VCP version. (For USB connected monitors, it queries HID usage x00800004.) It is possible that feature code xDF is unsupported, even though the capabilities response specifies a version. The output of the capabilities command is incorrect. For example, a Dell P2210 monitor has VGA, DVI, and DisplayPort inputs, but capabilities only reports: Feature: 60 (Input Source) Values (unparsed): 01 03 Values ( parsed): 01: VGA-1 03: DVI-1 The capabilities string reported by a monitor is often incorrect. While the ddcutil capabilities command parses and reports the string, this is solely informational. The only way to know for sure if a monitor supports a VCP Feature Code is by testing using the getvcp and setvcp commands. The following command will attempt to read all VCP codes that ddcutil understands, other than those that are write-only: ddcutil getvcp known To attempt to read all possible VCP codes, whether understood by ddcutil or not, except for those that are known to be write-only: ddcutil getvcp scan To see all the values defined for a non-continuous (NC) feature code, i.e. one with discrete values, use the vcpinfo command with the --verbose option. For example, to see all the values defined in the Monitor Control Command Specification for VCP feature x60 (Input Source): # ddcutil vcpinfo 60 --verbose VCP code 60: Input Source Selects active video source MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes (v2.0): Read Write, Non-Continuous (simple) Attributes (v2.1): Read Write, Non-Continuous (simple) Attributes (v3.0): Read Write, Table (normal) Attributes (v2.2): Read Write, Non-Continuous (simple) Simple NC values: 0x01: VGA-1 0x02: VGA-2 0x03: DVI-1 0x04: DVI-2 0x05: Composite video 1 0x06: Composite video 2 0x07: S-Video-1 0x08: S-Video-2 0x09: Tuner-1 0x0a: Tuner-2 0x0b: Tuner-3 0x0c: Component video (YPrPb/YCrCb) 1 0x0d: Component video (YPrPb/YCrCb) 2 0x0e: Component video (YPrPb/YCrCb) 3 0x0f: DisplayPort-1 0x10: DisplayPort-2 0x11: HDMI-1 0x12: HDMI-2 In practice, any given monitor will implement only a few of the NC values, and some monitors will implement undocumented values. The only way to know for sure is by testing. ddcutil detect --verbose reports that both I2C address x50 (EDID) and x37 (DDC) are responsive, but DDC communication fails. There can be any number of reasons for this situation. Check that DDC/CI communication is enabled in the monitor's on-screen display? It has been observed in the case of a Tegra video card using the nouveau driver. See also the discussions of duplicate entries for a DisplayPort monitor , and of failures with newer docking stations . The same DisplayPort connected monitor appears twice in the output of ddcutil detect . Sometimes the same DisplayPort connected monitor is detected at 2 different I2C bus numbers. ddcutil detect reads the EDID at on both buses, but typically DDC communication succeeds on only 1 bus. ddcutil attempts to filter out the invalid bus. The invalid bus appears to be related to the DisplayPort multistream facility. You can ignore the invalid entry. The detect command reports different EDIDs depending on how the monitor is connected to the video card. Strange as it may seem at first, a monitor can have more than one EDID. The EDID for a VGA connection will have a different video input definition (byte x14) than that for a digital connection. The VGA version of the EDID will have timing information. The detect command reports that I2C bus address x30 (EDID block number) is inactive. EDID version 1.4 allows for addtional 128 byte EDID blocks. I2C bus address x30 specifies which block to read. These blocks generally contain extended timing information. ddcutil is interested only in the contents of the first EDID block. The check of bus address x30 is purely informational. setvcp does not change the feature value Several Iilyama monitor models require that command scs (Save Current Settings) be issued immediately after a feature value is set. setvcp must be invoked with the --noverify option, followed immediately by scs . The monitor supports Dynamic Contrast Range (DCR). setvcp for feature x10 (brightness) does not change the value At least some monitors with Dynamic Contrast Range (DCR) disable feature x10 (brightness) and possibly other features when DCR is enabled. This has been reported with both Lenovo and Benq monitors. The new value for feature x10 is different from the value specified on setvcp It is common for the new value of a Continuous feature to be off by 1 from the specified value. This appears to be the result of integer to floating point to integer conversion in the monitor. At least one monitor (Dell 2407wfp) does not allow setting brightness less than 30. setvcp values in the range 0..50 are mapped to to 30..50. ddcutil hangs on Radeon RX 5xxx and 6xxx cards (Navi and Navi2 GPU) There have been multiple reports of ddcutil command failures on Radeon cards with the Navi and Navi2 GPUs (RX 5xxx and RX 6xxx cards). In some cases ddcutil hangs. (See for example issues Stop poking AMDGPU SMU I2C #194 , Screen freeze when changing brightness #223 ).. The SMU related hang should have been fixed as of kernel 5.14.4. ddcutil has had a workaround since release 1.1.0. In other cases, the monitor's EDID is simply not detected. If your kernel version is 5.14.4 or later, I suggest you file a bug report at the amd driver issue list . Include: - drm output - the kernel log file (/var/log/kernel on Ubuntu) - output of the following commands $ sudo ps -aux | grep ddcutil $ sudo awk ' {print FILENAME \": \" $0 } ' /sys/bus/i2c/devices/*/name Does ddcutil work in containers? User Nikolay Dandanov has reported success running ddcutil in a Docker container: I defined a new Arch Linux image for Docker using the following simple Dockerfile : FROM archlinux:latest RUN pacman --noconfirm -Syu && \\ pacman --noconfirm -S ddcutil && \\ rm -rf ~/.cache/* I saved this to a file named Dockerfile and built a Docker image using ~~~docker build -t ddcutil:v0.0.1~~~. I then ran the container and also mapped all i2c devices (otherwise, these were not available in the container): docker run $(for dev in `ls /dev/i2c*`; do echo \"--device $dev \"; done) -it --name ddcutil ddcutil:v0.0.1 Questions about building ddcutil configure complains that a required package does not exist, but it is installed on my system. When building ddcutil , error messages from pkg-config (which is called by configure) can be misleading. If configure complains that a package is not found but it seems to be installed, it's likely that what's missing is the associated development package (with a suffix like \"-dev\").","title":"Frequently Asked Questions"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"faq/#ddcutil-does-not-identify-a-ddcci-capable-monitor","text":"Check the following: Is DDC/CI enabled in the monitor's On Screen Display? Is driver i2c-dev loaded? Does the current user have permission to access the I2C bus associated with the monitor? Command ddcutil environment will analyze your system environment and make suggestions. See enviroment Command","title":"ddcutil does not identify a DDC/CI capable monitor."},{"location":"faq/#ddcutil-doesnt-work-on-my-laptop","text":"Laptop displays do not support DDC/CI.","title":"ddcutil doesn't work on my laptop."},{"location":"faq/#but-recent-laptops-use-embedded-display-port-edp-panels-which-have-an-i2c-interface-why-doesnt-ddcutil-work","text":"The I2C connection on eDP panels implements slave address x50, which allows programs to read the EDID in the expected way. However, it does not implement slave address x37, i.e. it does not support DDC/CI. If eDP panels did implement DDC/CI, ddcutil would support it. For each I2C bus that could possibly be associated with a monitor, as part of display detection ddcutil attempts to read the EDID at slave address x50. If successful, it then attempts to communicate on slave address x37. If that fails, and display detection is occurring in the context of ddcutil detect --verbose , ddcutil then looks for a possible reason, and checks to see if the display is a laptop. If so, it then reports that laptops to not support DDC/CI.","title":"But recent laptops use Embedded Display Port (eDP) panels which have an I2C interface.  Why doesn't ddcutil work?"},{"location":"faq/#ddcutil-is-slow","text":"Typically, ddcutil spends 90% of its elapsed time in waits mandated by the DDC/CI protocol. Two options can have a big impact on performance: Option --bus . If the /dev/i2c bus number of the monitor is given, ddcutil skips the initial phase of searching the /dev/i2c devices for monitors. Note that if this option is specified, no other monitor selection option such as --display should be specified. Option --sleep-multiplier . This option adjusts the length of time ddcutil spends in DDC/CI mandated waits. For example, if the DDC/CI protocol specifies a 40 ms wait between the time a command is sent to the monitor and the time a reply is read, and --sleep-multiplier .2 is given, ddcutil will only wait (.2 x 40 ms) = 8 ms. Some monitors have been found to communicate successfully with --sleep-multiplier values as low as .1. On the other hand, some monitors with poor DDC/CI implementations perform better if the sleep time is increased by using a value greater than 1.","title":"ddcutil is slow."},{"location":"faq/#ddcutil-cant-communicate-with-a-monitor-when-its-plugged-into-a-docking-station","text":"ddcutil does work when the monitor is plugged directly into the laptop. The problem affects DisplayPort, DVI, and HDMI connectors on the dock. This is a problem with newer docking stations that implement DisplayPort Multi Stream Transport. Until kernel release 5.11, the drm driver layer did not implement I2C writes. For the gory details, see this thread on the Intel-gfx developers list.","title":"ddcutil can't communicate with a monitor when it's plugged into a docking station."},{"location":"faq/#im-using-nvidias-proprietary-driver-ddcutil-doesnt-seem-to-be-be-working","text":"Symptoms include \"DDC communication failed\" on ddcutil detect , and lots of \"Maximum retries exceeded\" errors on command ddcutil getvcp known . You may need the Nvidia secret handshake. See Special Nvidia Driver Settings .","title":"I'm using Nvidia's proprietary driver.  ddcutil doesn't seem to be be working."},{"location":"faq/#the-capabilities-command-reports-the-mccs-aka-vcp-version-but-elsewhere-ddcutil-says-the-version-is-unknown","text":"DDC/CI has two ways to get the the MCCS version: As part of the capabilities string returned in response to a DDC Capabilities Request. As the response to a VCP Feature Request for feature xDF (VCP Version). Sometimes they disagree. Command ddcutil capabilities reports the response to the DDC Capabilities Request. However, ddcutil regards this output as purely informational. (See capabilities command ) ddcutil therefore relies on VCP feature code xDF to determine the VCP version. (For USB connected monitors, it queries HID usage x00800004.) It is possible that feature code xDF is unsupported, even though the capabilities response specifies a version.","title":"The capabilities command reports the MCCS (aka VCP) version, but elsewhere ddcutil says the version is unknown."},{"location":"faq/#the-output-of-the-capabilities-command-is-incorrect","text":"For example, a Dell P2210 monitor has VGA, DVI, and DisplayPort inputs, but capabilities only reports: Feature: 60 (Input Source) Values (unparsed): 01 03 Values ( parsed): 01: VGA-1 03: DVI-1 The capabilities string reported by a monitor is often incorrect. While the ddcutil capabilities command parses and reports the string, this is solely informational. The only way to know for sure if a monitor supports a VCP Feature Code is by testing using the getvcp and setvcp commands. The following command will attempt to read all VCP codes that ddcutil understands, other than those that are write-only: ddcutil getvcp known To attempt to read all possible VCP codes, whether understood by ddcutil or not, except for those that are known to be write-only: ddcutil getvcp scan To see all the values defined for a non-continuous (NC) feature code, i.e. one with discrete values, use the vcpinfo command with the --verbose option. For example, to see all the values defined in the Monitor Control Command Specification for VCP feature x60 (Input Source): # ddcutil vcpinfo 60 --verbose VCP code 60: Input Source Selects active video source MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes (v2.0): Read Write, Non-Continuous (simple) Attributes (v2.1): Read Write, Non-Continuous (simple) Attributes (v3.0): Read Write, Table (normal) Attributes (v2.2): Read Write, Non-Continuous (simple) Simple NC values: 0x01: VGA-1 0x02: VGA-2 0x03: DVI-1 0x04: DVI-2 0x05: Composite video 1 0x06: Composite video 2 0x07: S-Video-1 0x08: S-Video-2 0x09: Tuner-1 0x0a: Tuner-2 0x0b: Tuner-3 0x0c: Component video (YPrPb/YCrCb) 1 0x0d: Component video (YPrPb/YCrCb) 2 0x0e: Component video (YPrPb/YCrCb) 3 0x0f: DisplayPort-1 0x10: DisplayPort-2 0x11: HDMI-1 0x12: HDMI-2 In practice, any given monitor will implement only a few of the NC values, and some monitors will implement undocumented values. The only way to know for sure is by testing.","title":"The output of the capabilities command is incorrect."},{"location":"faq/#ddcutil-detect-verbose-reports-that-both-i2c-address-x50-edid-and-x37-ddc-are-responsive-but-ddc-communication-fails","text":"There can be any number of reasons for this situation. Check that DDC/CI communication is enabled in the monitor's on-screen display? It has been observed in the case of a Tegra video card using the nouveau driver. See also the discussions of duplicate entries for a DisplayPort monitor , and of failures with newer docking stations .","title":"ddcutil detect --verbose reports that both I2C address x50 (EDID) and x37 (DDC) are responsive, but DDC communication fails."},{"location":"faq/#the-same-displayport-connected-monitor-appears-twice-in-the-output-of-ddcutil-detect","text":"Sometimes the same DisplayPort connected monitor is detected at 2 different I2C bus numbers. ddcutil detect reads the EDID at on both buses, but typically DDC communication succeeds on only 1 bus. ddcutil attempts to filter out the invalid bus. The invalid bus appears to be related to the DisplayPort multistream facility. You can ignore the invalid entry.","title":"The same DisplayPort connected monitor appears twice in the output of ddcutil detect."},{"location":"faq/#the-detect-command-reports-different-edids-depending-on-how-the-monitor-is-connected-to-the-video-card","text":"Strange as it may seem at first, a monitor can have more than one EDID. The EDID for a VGA connection will have a different video input definition (byte x14) than that for a digital connection. The VGA version of the EDID will have timing information.","title":"The detect command reports different EDIDs depending on how the monitor is connected to the video card."},{"location":"faq/#the-detect-command-reports-that-i2c-bus-address-x30-edid-block-number-is-inactive","text":"EDID version 1.4 allows for addtional 128 byte EDID blocks. I2C bus address x30 specifies which block to read. These blocks generally contain extended timing information. ddcutil is interested only in the contents of the first EDID block. The check of bus address x30 is purely informational.","title":"The detect command reports that I2C bus address x30 (EDID block number) is inactive."},{"location":"faq/#setvcp-does-not-change-the-feature-value","text":"Several Iilyama monitor models require that command scs (Save Current Settings) be issued immediately after a feature value is set. setvcp must be invoked with the --noverify option, followed immediately by scs .","title":"setvcp does not change the feature value"},{"location":"faq/#the-monitor-supports-dynamic-contrast-range-dcr-setvcp-for-feature-x10-brightness-does-not-change-the-value","text":"At least some monitors with Dynamic Contrast Range (DCR) disable feature x10 (brightness) and possibly other features when DCR is enabled. This has been reported with both Lenovo and Benq monitors.","title":"The monitor supports Dynamic Contrast Range (DCR). setvcp for feature x10 (brightness) does not change the value"},{"location":"faq/#the-new-value-for-feature-x10-is-different-from-the-value-specified-on-setvcp","text":"It is common for the new value of a Continuous feature to be off by 1 from the specified value. This appears to be the result of integer to floating point to integer conversion in the monitor. At least one monitor (Dell 2407wfp) does not allow setting brightness less than 30. setvcp values in the range 0..50 are mapped to to 30..50.","title":"The new value for feature x10 is different from the value specified on setvcp"},{"location":"faq/#ddcutil-hangs-on-radeon-rx-5xxx-and-6xxx-cards-navi-and-navi2-gpu","text":"There have been multiple reports of ddcutil command failures on Radeon cards with the Navi and Navi2 GPUs (RX 5xxx and RX 6xxx cards). In some cases ddcutil hangs. (See for example issues Stop poking AMDGPU SMU I2C #194 , Screen freeze when changing brightness #223 ).. The SMU related hang should have been fixed as of kernel 5.14.4. ddcutil has had a workaround since release 1.1.0. In other cases, the monitor's EDID is simply not detected. If your kernel version is 5.14.4 or later, I suggest you file a bug report at the amd driver issue list . Include: - drm output - the kernel log file (/var/log/kernel on Ubuntu) - output of the following commands $ sudo ps -aux | grep ddcutil $ sudo awk ' {print FILENAME \": \" $0 } ' /sys/bus/i2c/devices/*/name","title":"ddcutil hangs on Radeon RX 5xxx and 6xxx cards (Navi and Navi2 GPU)"},{"location":"faq/#does-ddcutil-work-in-containers","text":"User Nikolay Dandanov has reported success running ddcutil in a Docker container: I defined a new Arch Linux image for Docker using the following simple Dockerfile : FROM archlinux:latest RUN pacman --noconfirm -Syu && \\ pacman --noconfirm -S ddcutil && \\ rm -rf ~/.cache/* I saved this to a file named Dockerfile and built a Docker image using ~~~docker build -t ddcutil:v0.0.1~~~. I then ran the container and also mapped all i2c devices (otherwise, these were not available in the container): docker run $(for dev in `ls /dev/i2c*`; do echo \"--device $dev \"; done) -it --name ddcutil ddcutil:v0.0.1","title":"Does ddcutil work in containers?"},{"location":"faq/#questions-about-building-ddcutil","text":"","title":"Questions about building ddcutil"},{"location":"faq/#configure-complains-that-a-required-package-does-not-exist-but-it-is-installed-on-my-system","text":"When building ddcutil , error messages from pkg-config (which is called by configure) can be misleading. If configure complains that a package is not found but it seems to be installed, it's likely that what's missing is the associated development package (with a suffix like \"-dev\").","title":"configure complains that a required package does not exist, but it is installed on my system."},{"location":"feature_selection/","text":"Feature Selection Commands getvcp , setvcp , and vcpinfo operate on a single VCP feature. Additionally, getvcp and vcpinfo can specify a named group of features. The feature-code argument to vcpinfo , getvcp , and setvcp is a hexadecimal feature number, with or without a leading \"x\" or \"0x\", for example: $ ddcutil getvcp 10 $ ddcutil vcpinfo x10 $ ddcutil getvcp 0x10 The feature-group argument to getvcp and vcpinfo is a named collection of features. The most useful are: Name Description KNOWN feature codes defined in MCCS SCAN scan all feature codes x00..xff COLOR color related features PROFILE features saved by dumpvcp (subset of COLOR) TABLE features of type Table For example: $ ddcutil getvcp known There many more feature groups. Most were created to help analyze the Monitor Control Command Set specification, and are not of general interest. For a complete list of feature groups, use the --help option. The following options subset a feature-group : Option: --no-table Exclude table type feature codes. This applies when a feature group is specfied, unless it is the TABLE feature group. It does not apply when a single feature code is specified. This is the default. Option: --show-table Include table type feature codes in all contexts. Option: --show-table Features of type Table exist only in Monitor Control Command Spec Version 3.0, which no known monitor has implemented. Performing getvcp on a feature of type Table which does not exist is costly in terms of elapsed time. Therefore, Table type features are excluded from all feature groups except for group SCAN , which tries to read every possible feature code except for those known to be write-only, and group TABLE , as that would be nonsensical. This option causes such features to be included in all feature groups. Option: --rw Include only feature codes that are read-write. Option: --ro Include only feature codes that are read-only. Option: --wo Include only feature codes that are write-only. Applies only to vcpinfo .","title":"Feature Selection"},{"location":"feature_selection/#feature-selection","text":"Commands getvcp , setvcp , and vcpinfo operate on a single VCP feature. Additionally, getvcp and vcpinfo can specify a named group of features. The feature-code argument to vcpinfo , getvcp , and setvcp is a hexadecimal feature number, with or without a leading \"x\" or \"0x\", for example: $ ddcutil getvcp 10 $ ddcutil vcpinfo x10 $ ddcutil getvcp 0x10 The feature-group argument to getvcp and vcpinfo is a named collection of features. The most useful are: Name Description KNOWN feature codes defined in MCCS SCAN scan all feature codes x00..xff COLOR color related features PROFILE features saved by dumpvcp (subset of COLOR) TABLE features of type Table For example: $ ddcutil getvcp known There many more feature groups. Most were created to help analyze the Monitor Control Command Set specification, and are not of general interest. For a complete list of feature groups, use the --help option. The following options subset a feature-group :","title":"Feature Selection"},{"location":"feature_selection/#option-no-table","text":"Exclude table type feature codes. This applies when a feature group is specfied, unless it is the TABLE feature group. It does not apply when a single feature code is specified. This is the default.","title":"Option: --no-table"},{"location":"feature_selection/#option-show-table","text":"Include table type feature codes in all contexts.","title":"Option: --show-table"},{"location":"feature_selection/#option-show-table_1","text":"Features of type Table exist only in Monitor Control Command Spec Version 3.0, which no known monitor has implemented. Performing getvcp on a feature of type Table which does not exist is costly in terms of elapsed time. Therefore, Table type features are excluded from all feature groups except for group SCAN , which tries to read every possible feature code except for those known to be write-only, and group TABLE , as that would be nonsensical. This option causes such features to be included in all feature groups.","title":"Option: --show-table"},{"location":"feature_selection/#option-rw","text":"Include only feature codes that are read-write.","title":"Option: --rw "},{"location":"feature_selection/#option-ro","text":"Include only feature codes that are read-only.","title":"Option: --ro "},{"location":"feature_selection/#option-wo","text":"Include only feature codes that are write-only. Applies only to vcpinfo .","title":"Option: --wo"},{"location":"getvcp_known_u3011_output/","text":"ddcutil getvcp The following example shows the values of all VCP Feature Codes that ddcutil understands for a Dell U3011 monitor attached at bus /dev/i2c-6. $ ddcutil getvcp known --bus 6 VCP code 0x02 (New control value ): One or more new control values have been saved (0x02) VCP code 0x0b (Color temperature increment ): Invalid value: 0 VCP code 0x0c (Color temperature request ): 3000 + 2 * (feature 0B color temp increment) degree(s) Kelvin VCP code 0x0e (Clock ): current value = 50, max value = 100 VCP code 0x10 (Brightness ): current value = 57, max value = 100 VCP code 0x12 (Contrast ): current value = 56, max value = 100 VCP code 0x14 (Select color preset ): sRGB (sl=0x01) VCP code 0x16 (Video gain: Red ): current value = 100, max value = 100 VCP code 0x18 (Video gain: Green ): current value = 100, max value = 100 VCP code 0x1a (Video gain: Blue ): current value = 100, max value = 100 VCP code 0x1e (Auto setup ): Auto setup not active (sl=0x00) VCP code 0x20 (Horizontal Position (Phase) ): current value = 50, max value = 100 VCP code 0x30 (Vertical Position (Phase) ): current value = 50, max value = 100 VCP code 0x3e (Clock phase ): current value = 31, max value = 100 VCP code 0x52 (Active control ): Value: 0x14 VCP code 0x59 (6 axis saturation: Red ): current value = 50, max value = 100 VCP code 0x5a (6 axis saturation: Yellow ): current value = 50, max value = 100 VCP code 0x5b (6 axis saturation: Green ): current value = 50, max value = 100 VCP code 0x5c (6 axis saturation: Cyan ): current value = 50, max value = 100 VCP code 0x5d (6 axis saturation: Blue ): current value = 50, max value = 100 VCP code 0x5e (6 axis saturation: Magenta ): current value = 50, max value = 100 VCP code 0x60 (Input Source ): DisplayPort-1 (sl=0x0f) VCP code 0x6c (Video black level: Red ): current value = 50, max value = 100 VCP code 0x6e (Video black level: Green ): current value = 50, max value = 100 VCP code 0x70 (Video black level: Blue ): current value = 50, max value = 100 VCP code 0x87 (Sharpness ): current value = 8, max value = 100 VCP code 0x8a (Color Saturation ): current value = 50, max value = 100 VCP code 0x90 (Hue ): current value = 50, max value = 100 VCP code 0x9b (6 axis hue control: Red ): current value = 50, max value = 100 VCP code 0x9c (6 axis hue control: Yellow ): current value = 50, max value = 100 VCP code 0x9d (6 axis hue control: Green ): current value = 50, max value = 100 VCP code 0x9e (6 axis hue control: Cyan ): current value = 50, max value = 100 VCP code 0x9f (6 axis hue control: Blue ): current value = 50, max value = 100 VCP code 0xa0 (6 axis hue control: Magenta ): current value = 50, max value = 100 VCP code 0xac (Horizontal frequency ): 32864 hz VCP code 0xae (Vertical frequency ): 59.80 hz VCP code 0xb2 (Flat panel sub-pixel layout ): Red/Green/Blue vertical stripe (sl=0x01) VCP code 0xb4 (Source Timing Mode ): mh=0x00, ml=0x02, sh=0x00, sl=0x01 VCP code 0xb6 (Display technology type ): LCD (active matrix) (sl=0x03) VCP code 0xc0 (Display usage time ): Usage time (hours) = 5199 (0x00144f) mh=0x00, ml=0x00, sh=0x14, sl=0x4f VCP code 0xc6 (Application enable key ): 0x45cc VCP code 0xc8 (Display controller type ): Mfg: Mstar (sl=0x05), controller number: mh=0x00, ml=0x94, sh=0x85 VCP code 0xc9 (Display firmware level ): 1.5 VCP code 0xca (OSD ): OSD Enabled (sl=0x02) VCP code 0xcc (OSD Language ): English (sl=0x02) VCP code 0xd6 (Power mode ): DPM: On, DPMS: Off (sl=0x01) VCP code 0xdc (Display Mode ): Standard/Default mode (sl=0x00) VCP code 0xdf (VCP Version ): 2.1","title":"ddcutil getvcp example"},{"location":"getvcp_known_u3011_output/#ddcutil-getvcp","text":"The following example shows the values of all VCP Feature Codes that ddcutil understands for a Dell U3011 monitor attached at bus /dev/i2c-6. $ ddcutil getvcp known --bus 6 VCP code 0x02 (New control value ): One or more new control values have been saved (0x02) VCP code 0x0b (Color temperature increment ): Invalid value: 0 VCP code 0x0c (Color temperature request ): 3000 + 2 * (feature 0B color temp increment) degree(s) Kelvin VCP code 0x0e (Clock ): current value = 50, max value = 100 VCP code 0x10 (Brightness ): current value = 57, max value = 100 VCP code 0x12 (Contrast ): current value = 56, max value = 100 VCP code 0x14 (Select color preset ): sRGB (sl=0x01) VCP code 0x16 (Video gain: Red ): current value = 100, max value = 100 VCP code 0x18 (Video gain: Green ): current value = 100, max value = 100 VCP code 0x1a (Video gain: Blue ): current value = 100, max value = 100 VCP code 0x1e (Auto setup ): Auto setup not active (sl=0x00) VCP code 0x20 (Horizontal Position (Phase) ): current value = 50, max value = 100 VCP code 0x30 (Vertical Position (Phase) ): current value = 50, max value = 100 VCP code 0x3e (Clock phase ): current value = 31, max value = 100 VCP code 0x52 (Active control ): Value: 0x14 VCP code 0x59 (6 axis saturation: Red ): current value = 50, max value = 100 VCP code 0x5a (6 axis saturation: Yellow ): current value = 50, max value = 100 VCP code 0x5b (6 axis saturation: Green ): current value = 50, max value = 100 VCP code 0x5c (6 axis saturation: Cyan ): current value = 50, max value = 100 VCP code 0x5d (6 axis saturation: Blue ): current value = 50, max value = 100 VCP code 0x5e (6 axis saturation: Magenta ): current value = 50, max value = 100 VCP code 0x60 (Input Source ): DisplayPort-1 (sl=0x0f) VCP code 0x6c (Video black level: Red ): current value = 50, max value = 100 VCP code 0x6e (Video black level: Green ): current value = 50, max value = 100 VCP code 0x70 (Video black level: Blue ): current value = 50, max value = 100 VCP code 0x87 (Sharpness ): current value = 8, max value = 100 VCP code 0x8a (Color Saturation ): current value = 50, max value = 100 VCP code 0x90 (Hue ): current value = 50, max value = 100 VCP code 0x9b (6 axis hue control: Red ): current value = 50, max value = 100 VCP code 0x9c (6 axis hue control: Yellow ): current value = 50, max value = 100 VCP code 0x9d (6 axis hue control: Green ): current value = 50, max value = 100 VCP code 0x9e (6 axis hue control: Cyan ): current value = 50, max value = 100 VCP code 0x9f (6 axis hue control: Blue ): current value = 50, max value = 100 VCP code 0xa0 (6 axis hue control: Magenta ): current value = 50, max value = 100 VCP code 0xac (Horizontal frequency ): 32864 hz VCP code 0xae (Vertical frequency ): 59.80 hz VCP code 0xb2 (Flat panel sub-pixel layout ): Red/Green/Blue vertical stripe (sl=0x01) VCP code 0xb4 (Source Timing Mode ): mh=0x00, ml=0x02, sh=0x00, sl=0x01 VCP code 0xb6 (Display technology type ): LCD (active matrix) (sl=0x03) VCP code 0xc0 (Display usage time ): Usage time (hours) = 5199 (0x00144f) mh=0x00, ml=0x00, sh=0x14, sl=0x4f VCP code 0xc6 (Application enable key ): 0x45cc VCP code 0xc8 (Display controller type ): Mfg: Mstar (sl=0x05), controller number: mh=0x00, ml=0x94, sh=0x85 VCP code 0xc9 (Display firmware level ): 1.5 VCP code 0xca (OSD ): OSD Enabled (sl=0x02) VCP code 0xcc (OSD Language ): English (sl=0x02) VCP code 0xd6 (Power mode ): DPM: On, DPMS: Off (sl=0x01) VCP code 0xdc (Display Mode ): Standard/Default mode (sl=0x00) VCP code 0xdf (VCP Version ): 2.1","title":"ddcutil getvcp"},{"location":"i2c_permissions/","text":"I2C Device Permissions ddcutil requires read/write access to /dev/i2c devices, or more precisely all /dev/i2c devices associated with video cards. It can, of course, be run as root. (For USB devices, see USB Device Permissions ). As of release 1.4.0, ddcutil installs udev rule 60-ddcutil.rules that grants read/write access to the logged on user. Granting I2C Device Permissions on Versions Prior to 1.4.0 On Debian, Ubuntu, and likely other Debian derived distributions, most of the work has already been done. Package ddcutil requires package i2c-tools. Installation of package i2c-tools creates group i2c (if it does not alreay exist), and assigns that group to the /dev/i2c devices using a udev rule. All that is necessary is to add users who will use ddcutil to group i2c : $ sudo usermod <user-name> -aG i2c On other than Debian derived distributions, additional steps may be necessary. If group i2c does not already exist, the following command will create it: $ sudo groupadd --system i2c Then add your userid to group i2c as above. A sample udev rule for giving group i2c RW permission on the /dev/i2c devices can be found in distributed file 45-ddcutil-i2c.rules . Its exact location varies by distribution, but commonly the file is found in directory /usr/share/ddcutil/data. The file can be copied to /etc/udev/rules.d, but do check that this rule does not conflict with others in that directory. $ sudo cp /usr/share/ddcutil/data/45-ddcutil-i2c.rules /etc/udev/rules.d For testing, it may be simpler to give everyone permission to write to /dev/i2c-* for the current boot: $ sudo chmod a+rw /dev/i2c-*","title":"I2C Device Permissions"},{"location":"i2c_permissions/#i2c-device-permissions","text":"ddcutil requires read/write access to /dev/i2c devices, or more precisely all /dev/i2c devices associated with video cards. It can, of course, be run as root. (For USB devices, see USB Device Permissions ). As of release 1.4.0, ddcutil installs udev rule 60-ddcutil.rules that grants read/write access to the logged on user.","title":"I2C Device Permissions"},{"location":"i2c_permissions/#granting-i2c-device-permissions-on-versions-prior-to-140","text":"On Debian, Ubuntu, and likely other Debian derived distributions, most of the work has already been done. Package ddcutil requires package i2c-tools. Installation of package i2c-tools creates group i2c (if it does not alreay exist), and assigns that group to the /dev/i2c devices using a udev rule. All that is necessary is to add users who will use ddcutil to group i2c : $ sudo usermod <user-name> -aG i2c On other than Debian derived distributions, additional steps may be necessary. If group i2c does not already exist, the following command will create it: $ sudo groupadd --system i2c Then add your userid to group i2c as above. A sample udev rule for giving group i2c RW permission on the /dev/i2c devices can be found in distributed file 45-ddcutil-i2c.rules . Its exact location varies by distribution, but commonly the file is found in directory /usr/share/ddcutil/data. The file can be copied to /etc/udev/rules.d, but do check that this rule does not conflict with others in that directory. $ sudo cp /usr/share/ddcutil/data/45-ddcutil-i2c.rules /etc/udev/rules.d For testing, it may be simpler to give everyone permission to write to /dev/i2c-* for the current boot: $ sudo chmod a+rw /dev/i2c-*","title":"Granting I2C Device Permissions on Versions Prior to 1.4.0"},{"location":"install/","text":"Installing ddcutil and ddcui From Prebuilt Packages Prebuilt packages fall into 2 groups, those maintained as part of the ddcutil project (upstream), and those in Linux distribution repositories (downstream). If no prebuilt package is available for your distribution and architecture, ddcutil can be built from source . Prebuilt Packages Maintained by the ddcutil Project These packages are rebuilt with each ddcutil release. openSUSE Build Service ddcutil packages for some Debian, openSUSE, and Ubuntu releases are available for download from the openSUSE Build Service, including official openSUSE builds. The graphical user interface, ddcui is not available from OBS. There's not one clean link for downloading OBS packages, so here are several. Add repository and download package ddcutil . This is all you will need if just installing the command line version of ddcutil. All ddcutil packages Packages for both the command line and shared library version of ddcutil . Note that the development package is named libddcutil-devel on RPM based distributions (SUSE, Fedora) and libddcutil-dev on dpkg based distributions (Debian, Ubuntu). File system view Launchpad The ddcutil Launchpad PPA contains builds of both ddcutil and ddcui for recent Ubuntu releases. These builds are also suitable for other recemt Debian derivative distributions. Builds exist for the following architectures: amd64, arm64, armhf, i386, ppc64el. To use this PPA repository, issue the following commands: $ sudo add-apt-repository ppa:rockowitz/ddcutil $ sudo apt-get update Alternatively, you can manually add lines like the following to /etc/apt/sources.list, or to a file in /etc/apt/sources.list.d deb http://ppa.launchpad.net/rockowitz/ddcutil/ubuntu cosmic main deb-src http://ppa.launchpad.net/rockowitz/ddcutil/ubuntu cosmic main Fedora COPR Fedora COPR contains ddcutil builds for recent Fedora and openSuse releases. It also contains ddcuti builds for Fedora. Builds for both ddcutil and ddcui are found in repository rockowitz/ddcutil . To use this COPR repository, issue the following command: $ sudo dnf copr enable rockowitz/ddcutil Note: dnf-plugins-core must be installed. Alternatively, you can download a repository file found on the ddcutil copr page and save it in /etc/yum.repos.d. Prebuilt Packages Maintained by Linux Distributions ddcutil is included in many Linux distribution. In particular, it is included in Arch, Debian (and hence its derivatives such as Ubuntu), Fedora, Gentoo, Manjaro, openSUSE, and Rapbian. For an up to date list of Linux distributions that include ddcutil , see the Repology web site. Bear in mind that the version of ddcutil found in Linux distributions is often several releases behind the \"upstream\" release, or may only contain the standalone command-line version.","title":"Install ddcutil From Prebuilt Packages"},{"location":"install/#installing-ddcutil-and-ddcui-from-prebuilt-packages","text":"Prebuilt packages fall into 2 groups, those maintained as part of the ddcutil project (upstream), and those in Linux distribution repositories (downstream). If no prebuilt package is available for your distribution and architecture, ddcutil can be built from source .","title":"Installing ddcutil and ddcui From Prebuilt Packages"},{"location":"install/#prebuilt-packages-maintained-by-the-ddcutil-project","text":"These packages are rebuilt with each ddcutil release.","title":"Prebuilt Packages Maintained by the ddcutil Project"},{"location":"install/#opensuse-build-service","text":"ddcutil packages for some Debian, openSUSE, and Ubuntu releases are available for download from the openSUSE Build Service, including official openSUSE builds. The graphical user interface, ddcui is not available from OBS. There's not one clean link for downloading OBS packages, so here are several. Add repository and download package ddcutil . This is all you will need if just installing the command line version of ddcutil. All ddcutil packages Packages for both the command line and shared library version of ddcutil . Note that the development package is named libddcutil-devel on RPM based distributions (SUSE, Fedora) and libddcutil-dev on dpkg based distributions (Debian, Ubuntu). File system view","title":"openSUSE Build Service"},{"location":"install/#launchpad","text":"The ddcutil Launchpad PPA contains builds of both ddcutil and ddcui for recent Ubuntu releases. These builds are also suitable for other recemt Debian derivative distributions. Builds exist for the following architectures: amd64, arm64, armhf, i386, ppc64el. To use this PPA repository, issue the following commands: $ sudo add-apt-repository ppa:rockowitz/ddcutil $ sudo apt-get update Alternatively, you can manually add lines like the following to /etc/apt/sources.list, or to a file in /etc/apt/sources.list.d deb http://ppa.launchpad.net/rockowitz/ddcutil/ubuntu cosmic main deb-src http://ppa.launchpad.net/rockowitz/ddcutil/ubuntu cosmic main","title":"Launchpad"},{"location":"install/#fedora-copr","text":"Fedora COPR contains ddcutil builds for recent Fedora and openSuse releases. It also contains ddcuti builds for Fedora. Builds for both ddcutil and ddcui are found in repository rockowitz/ddcutil . To use this COPR repository, issue the following command: $ sudo dnf copr enable rockowitz/ddcutil Note: dnf-plugins-core must be installed. Alternatively, you can download a repository file found on the ddcutil copr page and save it in /etc/yum.repos.d.","title":"Fedora COPR"},{"location":"install/#prebuilt-packages-maintained-by-linux-distributions","text":"ddcutil is included in many Linux distribution. In particular, it is included in Arch, Debian (and hence its derivatives such as Ubuntu), Fedora, Gentoo, Manjaro, openSUSE, and Rapbian. For an up to date list of Linux distributions that include ddcutil , see the Repology web site. Bear in mind that the version of ddcutil found in Linux distributions is often several releases behind the \"upstream\" release, or may only contain the standalone command-line version.","title":"Prebuilt Packages Maintained by Linux Distributions"},{"location":"install_config_main/","text":"Installation and Configuration Post-Installation Checklist Install ddcutil From Pre-Built Packages Building From Source Shared Library Configuration Configuration and Installation Diagnostics I2C Device Permissions USB Device Permissions Kernel Module Configuration Special Nvidia Driver Settings Virtual Machines Raspberry Pi Notes on Specific Monitors Notes on Particular Configurations","title":"Installation and Configuration"},{"location":"install_config_main/#installation-and-configuration","text":"Post-Installation Checklist Install ddcutil From Pre-Built Packages Building From Source Shared Library Configuration Configuration and Installation Diagnostics I2C Device Permissions USB Device Permissions Kernel Module Configuration Special Nvidia Driver Settings Virtual Machines Raspberry Pi Notes on Specific Monitors Notes on Particular Configurations","title":"Installation and Configuration"},{"location":"instrumentation_options/","text":"Instrumentation Option: --ddc If option --ddc is specified, ddcutil reports protocol errors that it detects. These may reflect I2C bus errors, or deviations by monitors from the MCCS specfication. Most I2C errors cause a retry. Most monitors are very clean. Some, particularly older monitors, are very dirty. Option: --statistics [<stats-type] Can be written as --stats . This option causes ddcutil to report execution statistics. It takes the following optional arguments: Argument Action tries Report retry statistics errors Report I2C/DDC error counts calls Report system call counts and time elapsed Report elapsed time summary time Synonum for elapsed all Report all statistics (default) --stats calls implies --stats elapsed Statistics can be voluminous. To see only the elapsed execution time, use argument ELAPSED (alternatively TIME ). For example $ ddcutil detect --stats elapsed Note: --stats tries seperately reports multi-part read and multi-part write tries. This reflects how statistics are implementated. As a practical matter, no monitor has ever been seen that has features of type Table , so the multi-part write statistics will always be zero. Per-thread statistics Statistics are now broken down by thread. This is primarily of use in the shared library. These additional per-thread statistics are shown when --verbose is specified along with --stats .","title":"Instrumentation Options"},{"location":"instrumentation_options/#instrumentation","text":"","title":"Instrumentation"},{"location":"instrumentation_options/#option-ddc","text":"If option --ddc is specified, ddcutil reports protocol errors that it detects. These may reflect I2C bus errors, or deviations by monitors from the MCCS specfication. Most I2C errors cause a retry. Most monitors are very clean. Some, particularly older monitors, are very dirty.","title":"Option: --ddc"},{"location":"instrumentation_options/#option-statistics-stats-type","text":"Can be written as --stats . This option causes ddcutil to report execution statistics. It takes the following optional arguments: Argument Action tries Report retry statistics errors Report I2C/DDC error counts calls Report system call counts and time elapsed Report elapsed time summary time Synonum for elapsed all Report all statistics (default) --stats calls implies --stats elapsed Statistics can be voluminous. To see only the elapsed execution time, use argument ELAPSED (alternatively TIME ). For example $ ddcutil detect --stats elapsed Note: --stats tries seperately reports multi-part read and multi-part write tries. This reflects how statistics are implementated. As a practical matter, no monitor has ever been seen that has features of type Table , so the multi-part write statistics will always be zero.","title":"Option: --statistics &nbsp; [&lt;stats-type]"},{"location":"instrumentation_options/#per-thread-statistics","text":"Statistics are now broken down by thread. This is primarily of use in the shared library. These additional per-thread statistics are shown when --verbose is specified along with --stats .","title":"Per-thread statistics"},{"location":"kernel_module/","text":"Kernel Module Configuration Kernel module i2c-dev must be loaded. On some distributions, it is built into the Linux kernel. If not, it must be loaded explicitly. To see if i2c-dev is built into the kernel, issue the following command: grep i2c-dev.ko /lib/modules/`uname -r`/modules.builtin If i2c-dev is not built in, add the line \"i2c_dev\" to /etc/modules or a file containing the single line: i2c_dev to directory /etc/modules-load.d From the freedesktop.org systemd doc: systemd-modules-load.service(8) reads files from the [following]directories which contain kernel modules to load during boot in a static list. /etc/modules-load.d/ .conf /run/modules-load.d/ .conf /usr/lib/modules-load.d/*.conf Each configuration file is named in the style of /etc/modules-load.d/program.conf.","title":"Kernel Module Configuration"},{"location":"kernel_module/#kernel-module-configuration","text":"Kernel module i2c-dev must be loaded. On some distributions, it is built into the Linux kernel. If not, it must be loaded explicitly. To see if i2c-dev is built into the kernel, issue the following command: grep i2c-dev.ko /lib/modules/`uname -r`/modules.builtin If i2c-dev is not built in, add the line \"i2c_dev\" to /etc/modules or a file containing the single line: i2c_dev to directory /etc/modules-load.d From the freedesktop.org systemd doc: systemd-modules-load.service(8) reads files from the [following]directories which contain kernel modules to load during boot in a static list. /etc/modules-load.d/ .conf /run/modules-load.d/ .conf /usr/lib/modules-load.d/*.conf Each configuration file is named in the style of /etc/modules-load.d/program.conf.","title":"Kernel Module Configuration"},{"location":"lg/","text":"Notes on LG monitors Radare2 Reverse Engineering Framework LG Monitor Firmware Extraction Can't switch inputs over DDC/CI on LG Ultragear 27GP850-B Reverse Engineering LG 49WL95C-W","title":"Lg"},{"location":"lg/#notes-on-lg-monitors","text":"Radare2 Reverse Engineering Framework LG Monitor Firmware Extraction Can't switch inputs over DDC/CI on LG Ultragear 27GP850-B Reverse Engineering LG 49WL95C-W","title":"Notes on LG monitors"},{"location":"libddcutil_options/","text":"libddcutil options Using the configuration file , it is possible to pass options directly to shared library ddcutil . The option string is read and processed when libddcutil is initialized. (Bear in mind that the shared library is not used by the command line program ddcutil . Specifying libddcutil options in this context has no effect.) Generally speaking, any ddcutil option, other than those for display and feature selection, can be passed to libddcutil . In addition, the following option is recognized only by libddcutil. : Option --libddcutil-trace-file libddcutil can redirect all output that would normally be sent to the terminal to a trace file instead, allowng for tracing when there is no terminal to which to write. This option specifies the file name. The file name specified can be either absolute or relative. If relative, the directory is resolved as per the definition of XDG_STATE_HOME in the XDG desktop specification. Typically, this is $HOME/.local/state/ddcutil.","title":"libddcutil Options"},{"location":"libddcutil_options/#libddcutil-options","text":"Using the configuration file , it is possible to pass options directly to shared library ddcutil . The option string is read and processed when libddcutil is initialized. (Bear in mind that the shared library is not used by the command line program ddcutil . Specifying libddcutil options in this context has no effect.) Generally speaking, any ddcutil option, other than those for display and feature selection, can be passed to libddcutil . In addition, the following option is recognized only by libddcutil. :","title":"libddcutil options"},{"location":"libddcutil_options/#option-libddcutil-trace-file","text":"libddcutil can redirect all output that would normally be sent to the terminal to a trace file instead, allowng for tracing when there is no terminal to which to write. This option specifies the file name. The file name specified can be either absolute or relative. If relative, the directory is resolved as per the definition of XDG_STATE_HOME in the XDG desktop specification. Typically, this is $HOME/.local/state/ddcutil.","title":"Option --libddcutil-trace-file"},{"location":"libddcutil_release_notes/","text":"Shared Library Release Notes For detailed release notes for shared library libddcutil , including API changes, see: Shared Library Changes for Release 0.9.0 Shared Library Changes for Release 0.9.3 Shared Library Changes for Release 0.9.5 Shared Library Changes for Release 0.9.8 Shared Library Changes for Release 0.9.9 Shared Library Changes for Release 1.0.0 Shared Library Changes for Release 1.1.0 Shared Library Changes for Release 1.2.0 Shared Library Changes for Release 1.3.0 Shared Library Changes for Release 1.4.0 For draft notes on the next shared library release, see: Shared Library Changes for the Current Development Version","title":"Shared Library Release Notes"},{"location":"libddcutil_release_notes/#shared-library-release-notes","text":"For detailed release notes for shared library libddcutil , including API changes, see: Shared Library Changes for Release 0.9.0 Shared Library Changes for Release 0.9.3 Shared Library Changes for Release 0.9.5 Shared Library Changes for Release 0.9.8 Shared Library Changes for Release 0.9.9 Shared Library Changes for Release 1.0.0 Shared Library Changes for Release 1.1.0 Shared Library Changes for Release 1.2.0 Shared Library Changes for Release 1.3.0 Shared Library Changes for Release 1.4.0 For draft notes on the next shared library release, see: Shared Library Changes for the Current Development Version","title":"Shared Library Release Notes"},{"location":"mccs_background/","text":"Monitor Control Command Set MCCS Terminology Monitor settings are referred to as Virtual Control Panel (VCP) features. Features are numbered from 0..255, and by convention are referred to using the hex representation, e.g. 1A for blue level. MCCS designates features as being one of three types: Continuous (C): Able to take any value up to some maximum Non-continuous (NC): Able to take only a designated set of values Table (T): Used for \"raw\" data such as a video LUT This clean distinction broke down as the MCCS specification evolved. Some features have changed category. ddcutil distinguishes between \"simple\" NC fields, which are encoded using only a single byte (in field SL) and for which there is a simple list of possible values, and \"complex\" NC fields, where an algorithm must be applied to interpret the bytes of a feature value. This is a ddcutil distinction and not part of the MCCS specification. Most features are both readable and writable (RW). Some, such as VCP Version (DF), are read-only (RO), while others, such as Restore Factory Defaults (02) are write-only. MCCS Versions Version 1, September 1998 Initial version. Seen only on very old monitors. Version 2.0, October 2003 A major update to the standard. It introduced \"complex\" NC features, in particular VCP Version (feature DF). Version 2.1, May 2005 A minor update to the standard, including clarifications. Version 3.0, July 2006 Not upwardly compatible with Version 2.1. Did not achieve industry acceptance. I know of no monitors implementing MCCS 3.0. Version 2.2, July 2009 Extends version 2.1, incorporating most of the new features from Version 3.0 in a manner upwardly compatible with 2.1. Version 2.2a, July 2011 Minor revision to Version 2.2. Note that Version 2.2 was issued after Version 3.0, Therefore, when ddcutil reports MCCS versions it orders them 1.0, 2.0, 2.1, 3.0, 2.2.","title":"Monitor Control Command Set"},{"location":"mccs_background/#monitor-control-command-set","text":"","title":"Monitor Control Command Set"},{"location":"mccs_background/#mccs-terminology","text":"Monitor settings are referred to as Virtual Control Panel (VCP) features. Features are numbered from 0..255, and by convention are referred to using the hex representation, e.g. 1A for blue level. MCCS designates features as being one of three types: Continuous (C): Able to take any value up to some maximum Non-continuous (NC): Able to take only a designated set of values Table (T): Used for \"raw\" data such as a video LUT This clean distinction broke down as the MCCS specification evolved. Some features have changed category. ddcutil distinguishes between \"simple\" NC fields, which are encoded using only a single byte (in field SL) and for which there is a simple list of possible values, and \"complex\" NC fields, where an algorithm must be applied to interpret the bytes of a feature value. This is a ddcutil distinction and not part of the MCCS specification. Most features are both readable and writable (RW). Some, such as VCP Version (DF), are read-only (RO), while others, such as Restore Factory Defaults (02) are write-only.","title":"MCCS Terminology"},{"location":"mccs_background/#mccs-versions","text":"Version 1, September 1998 Initial version. Seen only on very old monitors. Version 2.0, October 2003 A major update to the standard. It introduced \"complex\" NC features, in particular VCP Version (feature DF). Version 2.1, May 2005 A minor update to the standard, including clarifications. Version 3.0, July 2006 Not upwardly compatible with Version 2.1. Did not achieve industry acceptance. I know of no monitors implementing MCCS 3.0. Version 2.2, July 2009 Extends version 2.1, incorporating most of the new features from Version 3.0 in a manner upwardly compatible with 2.1. Version 2.2a, July 2011 Minor revision to Version 2.2. Note that Version 2.2 was issued after Version 3.0, Therefore, when ddcutil reports MCCS versions it orders them 1.0, 2.0, 2.1, 3.0, 2.2.","title":"MCCS Versions"},{"location":"monitor_notes/","text":"Notes on Specific Monitors The following list describes some monitors that have been tested or reported by users. It highlights the variability in DDC implementation among monitors. AOC Q2775 VCP Version: 2.2 Controller Manufacturer: Mstar Controller Model: mh=0xff, ml=0x16, sh=0x00 Firmware version: 0.7 Manufacture year: 2016 Feature x0B: Color temperature increment: 100 deg Kelvin Feature x0C: Color temperature request: 100 Caclculated color temperature = 3000 + 100 * 100 = 3000+10000 = 13000 deg Kelvin (nonsensical) Capabilities string has controller manufacturer name in model() field. Apple Cinema Display A1082 Has both I2C and USB interfaces. VCP Version: 2.0 Controller Manufacturer: unspecified Controller Model: unspecified Firmware version: unspecified Manufacture year: 2005 I2C interface has more VCP features than USB interface. USB interface does not report VCP version (feature DF). Able to read EDID over USB. Capabilities string does not begin and end with parentheses. Asus MG279 The capabilities string is malformed. Asus PG329Q VCP version 2.2 Controller Manufacturer: Novatek Firmware version: 0.36 Manufacture year: 2020 The EDID contains neither an ASCII nor a binary serial number. Asus ROG PG279Q VCP version: 2.2 Controller Manufacturer: manufacturer defined controller Controller Model: Firmware version: 5.57, 5.59 Maufacture year: 2017, 2018 Does not support VCP codes x0B and X0C. Does not support feature x60 - Input Source Does not respond to getvcp of unsupported VCP codes by setting the unsupported feature flag in the GETVCP response. Requests for unsupported features return garbage bytes, the requests fail by exceeding retries. The output of the capabilities command does appear to accurately report which features are supported. Asus VE247 VCP version: 2.0 Controller Manufacturer: RealTek Controller Model: mh=x00, ml=x24, sh=x82 Firmware version: 2.0 Maufacture year: 2010 Responds to unknown VCP codes using the DDC NULL message instead of setting the Unsupported VCP code bit in the GETVCP response. Sensible responses to VCP codes x0B and x0C. Asus VS248 The value of feature x60 (Input Source) can be changed only from the currently active input. BenQ GW2480 VCP Version: 2.1 Controller Manufacturer: Mstar Controller Model: mh=0x00, ml=0x58, sh=0x00 Firmware version: 3.10 Manufacture year: 2018 Color temperature increment (x0b) = 50 degrees Kelvin Color temperature request (x0c) = 70 Requested color temperature = (3000 deg Kelvin) + 70 * (50 degrees Kelvin) = 6500 degrees Kelvin Brightness and possibly other color related features are disabled when Dynamic Contrast Range (DCR) is enabled (using OSD). BenQ XL2411Z VCP version: 2.2 Controller Manufacturer: Mstar Controller Model: mh=x00 mh=x00, ml-x85, sh=x56 Firmware version: 2.1 Manufacture year: 2013 Feature x0B: Color temperature increment: 50 deg Kelvin Feature x0C: Color temperature request: 0 Caclculated color temperature = 3000 + (0*50) = 3000 deg Kelvin (nonsensical) Responds to VCP feature x60 (Input Source) even though this is not documented in the capabilities string. Dell AW3418DW VCP Version: 2.2 Controller Manufacturer: manufacturer designed (sl=0xff) Controller Model: mh=0x01 ml=0x08 sh=0x04 Firmware version: 4.133 Manufacture year: 2017 Feature x0B: Color temperature increment: unsupported Feature x0C: Color temperature request: unsupported Reading unsupported feature 0x00 returns normally, with ml=ml=sh=sl=0. The unsupported feature bit is not set. Reading any other unsupported feature value results in an IOCTL failure with Linux errno=EIO (5). Dell P2411 VCP version: 2.1 Controller Manufacturer: Mstar Controller Model: mh=x00, ml=x00, sh=x56 Firmware version: 1.1 Manufacture year: 2011 Lots of I2C errors. Heavily dependant on retries. The CAPABILITIES command sometimes fails, even with maximum retries. More recently, works with nouveau driver, but fails with proprietary Nvidia driver. Reports VCP code 0B (color temperature increment) as 1 degree Kelvin, which makes the GETVCP response to VCP code 0C (color temperature request) nonsensical. Dell P2715Q VCP version: 2.1 Controller Manufacturer: Mstar (sl=x05) Controller Model: mh=x00, ml=x00,x sh=x56 Firmware version: 2.1 Manufacture year: 2015 Feature x0B, Color temperature increment: unsupported Feature x0C, Color temperature request: unsupported very clean, no DDC retries needed Dell S3422DWG VCP version: 2.1 Controller Manufacturer: RealTek (sl=0x09) Controller Model: mh=0x00, ml=0x27, sh=0x17 Firmware version: 65.3 Manufacture year: 2021 Github user Noctivans has posted extensive notes detailing what he discovered on how to control Picture In Picture/Picture By Picture using undocumented features. Dell Ultrasharp 1905FP Does not support DDC. Dell Ultrasharp U2413 VCP version: 2.1 Controller Manufacturer: STMicroelectronics (sl=x0d) Controller Model: mh=x00, ml=x93, sh=x01 Firmware version: 2.1 Manufacture year: 2013 This monitor has a hardware LUT, however LUT loading not supported using standard VCP feature codes. Responds to VCP feature xc0 (Display Usage Time), but returns 0. Color temperature: color temp increment (feature 0B): unsupported color temp request (feature 0C): unsupported Dell 2407wfp VCP version: 2.0 Controller Manufacturer: Genesis Controller Model: mh=0xff, ml=0xff, sh=0x4a Firmware version: 29.1 Cannot set brightness less than 30. setvcp values in the range 0..50 are mapped to the range 30..50 User eskampie created the following table. Requested setvcp value Observed OSD value 0 30 10 34 20 38 30 42 40 46 50 50 60 60 70 70 80 80 90 90 100 100 Dell U2518D VCP Version: 2,1 Controller Manufacturer: MStar Controller Model: mh=0x00, ml=0x00, sh=0x56 Firmware version: 2.1 Manufacture year: 2018 Features 0B, 0C are unsupported. Attempting to set feature x12 (contrast) less than 25 results in a value of 25. However, it is possible to set a lower contrast value in the OSD . Unlike the Dell 2404wfp feature x10 (brightness) can be set to any value between 0..100. Clean implementation, no I2c retries required. Dell U3011 VCP version: 2.1 Controller manufacturer: Mstar Controller Model: mh=x00, ml=x94, sh=x85 Firmware version: 1.5 Manufacture year: 2012 If a value is set using SETVCP, the new value takes effect and may appear in the on-screen display. However, GETVCP (or the verification option) sometimes still retieves the old value, not the new one. More specifically: Feature Name Code Notes Contrast x12 values below x25 take effect but the old value is returned Video Gain: Red x16 Values below 100 take effect, but the GETVCP reports 100 Video Gain: Green x18 Ditto Video Gain: Blue x1a Ditto Display Mode xdc Reports VCP code x0B (color temperature increment) as 1 degree Kelvin, which makes the GETVCP response to VCP code x0C (color temperature request) nonsensical. Color temperature: color temp increment (feature 0B): 1 deg K color temp request (feature 0C): 2 calculated color temp = 3000 + (x0c_val * x0b_val) = 3000 + (1 * 2) = 3002 degrees Kelvin Dell Ultrasharp U3415W VCP version: 2.1 Controller manufacturer: Realtek (sl=x09) Controller Model: mh=x00, ml=x11, sh=x11 Firmware version: 65.1 Manufacture year: 2015 Neither feature 0B (color temperature increment) or 0C (color temperature request) are listed in the capabilities string. However, querying feature 0B does work. Querying feature 0C fails. Color temperature: color temp increment (feature 0B): 100 deg K color temp request (feature 0C): query fails Dell U3818DW VCP version: 2.1 Controller Manufacturer: RealTek Controller Model: mh=0x00, ml=0x11, sh=0x11 Firmware version: 65.1 Manufacture year: 2017 Fails to set the Unsupported VCP Code bit in the getvcp response packet for unsupported features. Eizo Coloredge CG19 VCP version: unreported Controller manufacturer and model: unreported (VCP feature code C8 unsupported) Firmware version: unreported (VCP feature code C9 unsupported) Reports EDID at I2C bus address x50. Does not support DDC over I2C (bus address x37). Does implement MCCS over USB, and appears to conform to the USB Monitor Control Class Specification. However, it appears that the more sophisticated monitor features such as LUT loading use manufacturer specific USB HID reports. Unable to read EDID over USB, even though the HID Report for EDID can be located. To set color related VCP feature values, Custom Color mode must be selected. If set to sRGB or Calibrated, the SETVCP command will appear to succeed, but will have no effect. (In sRGB mode, Brightness can be set, in Calibrated mode it cannot.) Eizo EV2785 Reports EDID ad I2c bus address x.50. Does not support DDC/CI (bus address x37). Uses USB for monitor control, but uses manufacturer-defined usage pages for communication, i.e. does not support the USB Monitor Control Class Specification . Electriq 244MKHDR VCP version: 2.2 Controller manufacturer and model: Realtek 0.1 Firmware version: 0.1 This is a marketer rebrand of a monitor created by some Chinese company, possibly Meirun. The 3 character manufacturer id \"WAM\" is not registered. The serial number reported is \"demoset-1\", The values reported by the monitor for features x10 (brightness) and x12 (contrast) are not those shown in the OSD. For details, see ddcutil issue 200: Electriq 24 inch monitor - brightness works but getvcp range doesn't match OSD range . Feature x60 (input source) reports invalid value x00 as the current input. Feature xCA (OSD/Button Control) reports that the OSD is disabled, even though it is enabled. Gateway Diamondtron VX920 VCP version: Unspecified, implies 1.0 Controller manufacturer and model: Unknown (VCP feature code C8 unsupported) Firmware version: Unknown (VCP feature code C9 unsupported) Hanns G Hi221D VCP version: 2.1 Controller manufacturer: Mstar Controller model: mh=x00, ml=x92, sh=x00 Firmware version: 0.6 All GETVCP requests return a value, whether or not the feature is valid for the monitor. The monitor never reports a feature as unsupported. HP LP1965 VCP version: 2.0 Controller manufacturer: Undocumented value: x64 Controller model: mh=xff, ml=xff, sh=x86 Firmware version: 0.3 Manufacture year: 2007 Capabilities reports non-standard DDC command x4E. Color temperature: color temp increment (feature 0B): 50 deg K color temp request (feature 0C): 70 calculated color temp = 3000 + (x0c_val * x0b_val) = 3000 + (70 * 50) = 6500 degrees Kelvin HP LP2475w VCP version: 2.1 Controller manufacturer: Genesis Controller model: mh=xff ml=xff sh=x80 Firmware version: 0.31 Manufacture year: 2008 Color temperature: color temp increment (feature 0B): 3000 deg K color temp request (feature 0C): 1 calculated color temp = 3000 + (x0c_val * x0b_val) = 3000 + (1 * 3000) = 6000 degrees Kelvin LUT loading not supported using standard VCP feature codes. Implements MCCS over USB as well as I2C. However, the USB implementation appears to be non-standard. It does not conform to the USB Monitor Control Class Specification. HP LP2480zx VCP version: 2.1 Controller manufacturer: Genesis Controller Model: mh=xff, ml=xff, sh=x80 Firmware version: 0.139 Manufacture year: 2008 Heavily reliant on manufacturer specific VCP codes. Most color related features, including loading the internal LUT, are not supported using standard VCP feature codes. Implements MCCS over USB as well as I2C. However, the USB implementation appears to be non-standard. It does not conform to the USB Monitor Control Class Specification. Sensible reponses to VCP codes 0B and 0C. Capabilities string does not match actual capabilities observed. For example, capaibilites does not include VCP feature code x10, brightness, which is recognized by getvcp and setvcp. Values in capabilities string for feature 60 is a mixture of hex and decimal values, i.e. 01 02 03 04 05 07 0C 13 14 15 17 1C Should be: 01 02 03 04 05 07 0C 0D 0E 0F 11 ?? Capabilities string does include cmds() segment listing supported commands, or model() segment listing model. HP w2207 VCP Version: 2.1 Controller manufacturer: Mstar Firmware Version: 3.5 Manufacture year: 2007 Color temperature increment (feature x0B) and request (feature x0C) result in a color temperature of 13,000 degress Kelvin Responds with data to all VCP feature requests, never reports a feature as unsupported HP ZR2740w VCP version: 2.2 Implements only a few VCP codes. VCP feature codes 0B and 0C unsupported. HP Z27n G2 VCP version: 2.2 For VCP code 60 (input source), the second DisplayPort input is value 0x13, instead of the standard 0x10. 0x13 is reported accurately as the value to use in capabilities. When using VCP code 60 to switch inputs, the value read by GetVCP only updates once the new source has a valid input signal. Until there is a valid signal, GetVCP continues to report the previously selected input. Iiyama PL2492H VCP Version: 2.2 (reported by capabilities string), 2.1 (reported by feature xdf) Controller Manufacturer: Connexant Firmware version: 0.0 Manufacture year: 2017 Color temperature increment (feature X0B): 100 degrees Kelvin Color temperature request (feature X0C): results in a nonsensical color temperature 1300 (3000 + 100 * 100) degrees Kelvin Requires that a Save Current Settings packet (command scs ) be sent immediately after a Set VCP Feature packet (command setvcp ) to actually set the value. Never sets the unsupported feature bit in a VCP Feature Reply packet (command getvcp ). The capabilities command must be checked to determine if a feature is supported. Iiyama PL2779Q VCP Version: 2.1 Controller manufacturer: unknown (feature code xC8 unsupported) Firmware version: unknown (feature code xC9 unsupported) Manufacture year: 2013 Color temperature increment (feature x0B) and request (feature x0C) result in a color temperature of 26,100 degress Kelvin Does not include command x02 (VCP Response) or xE3 (Capabilities Reply) in its capabilities string, even though these are supported. Responds to several VCP feature not listed in capabilities. Iiyama PL2792Q VCP Version: 2.2 (reported by capabilities string), 2.1 (reported by feature xdf) Controller Manufacturer: RealTek (controller number mh=x00, ml=x27, sh=x85) Firmware version: 0.0 Manufacture year: 2020 Color temperature increment (feature X0B): 100 degrees Kelvin Color temperature request (feature X0C): results in a nonsensical color temperature of 1300 degrees Kelvin Requires that a Save Current Settings packet (command scs ) be sent immediately after a Set VCP Feature packet (command setvcp ) to actually set the value. Never sets the unsupported feature bit in a VCP Feature Reply packet (command getvcp ). The capabilities command must be checked to determine if a feature is supported. Lenovo ThinkVision X1 VCP Version: 2.1 Controller manufactuer: Mstar Controller Model: mh=0xff, ml=0x16, sh=0x00 Firmware level 1.0 Manufacture year: 2016 Color temperature: - color temperature increment (feature 0B): 100 deg Kelvin - color temperature request (feature 0C): 35 - calculated color temperature: 3000 + (x0c_val * x0b_val) = 3000 + (35 * 100) = 6500 degrees Kelvin Brightness (feature x10) cannot be changed when Dynamic Contrast Range (DCR) is enabled (using OSD). Per user Janusz Kowalczyk, setting Dynamic Constrast Range and/or Low Blue light in the OSD disables various features in the OSD. Presumably they cannot be changed by ddcutil either. Brightness and Contrast may or may not be disabled Color related settings may or may not be disabled Image scaling is disabled DisplayPort version selection is disabled Lenovo L22e-20 VCP Version: 2.0 Controller Manufacturer: Mstar Controller Model: mh=0x00, ml=0x00, sh=0x00 Firmware level 1.0 Manuracture year: 2019 EDID has no serial number. Color temperature: - color temperature increment (x0B): 100 degrees Kelvin - color temperature request: (x0C) 0 - calculated color temperature = 3000 + (0 * 100) = 3000 degrees Kelvin Brightness and possibly other color related features are disabled when Dynamic Contrast Range (DCR) is enabled (using OSD). LG 22MP48D-P VCP Version: 2.1 Manufacture year: 2016 Controller manufacturer and model: MStar Firmware version: 5.0 Features x0B and x0C are supported. Calculated color temperature = 6500 degrees Kelvin. EDID model name is generic \"LG IPS FULLHD\" Never sets the Unsupported Feature bit in replying to a GETVCP request for an unsupported feature. Instead retuns a success response with all response bytes = 0. LG 23EA73 Never sets the Unsupported Feature bit in replying to a GETVCP request for an unsupported feature. Instead retuns a success response with all response bytes = 0. LG 27MU67 VCP Version: 2.1 Manufacture year: 2015 Controller manufacturer: Mstar Controller model: mh=x00, ml=xff, sh=x00 Firmware version: 3.7 Features X0B and X0C are not supported. Cannot calculate color temperature. No serial number in EDID. When brightness (VCP feature x10) is changed, it reverts to the original value after approximately 1 second. The same behavior is seen on Windows using ClickMonitorDDC and softMCCS, so this is clearly a monitor issue. This problem is not observed for other features. LG 27MD5KL UltraFine VCP Version: 2.2 (from the capabilities string) Manufacture year: 2020 Controller manufacturer: unknown (feature xc8 unsupported) Controller version: unknown (feature xc8 unsupported) Firmware version: 3.4 The EDID model name is generic \"LG UltraFine\". This 5K monitor appears to have been built with only Macs in mind. It has no buttons, and no on screen display (OSD). Despite an extensive list of features in the capabilities string, getvcp for most returns with the unsupported feature bit set in the response packet. The only features in the capabilities string that can be read using getvcp are: 0x10 (brightness), xFD (manufacturer reserved), xFF (manufacturer reserved). In particular, getvcp of feature xDF (VCP version) fails. Per the MCCS specification, this feature must be supported as of MCCS 2.0. The following features unknown to MCCS are not listed in the capabilities string, but return a value for getvcp : xD1, xD3, xD5, xDD This monitor also supports USB access to the Virtual Display Panel, but the only feature supported through this interface is 0x10 (brightness). LG 29UM69G VCP Version: 2.1 Manufacture year: 2019 Controller manufacturer: RealTek controller number: mh=0x00, ml=0xff, sh=0x00 Firmware version: 3.24 EDID version: 1.3 EDID model name is \"LG Ultrawide\". No ASCII \"serial number\". (Binary serial number not checked) Malformed capabilities string. (The \"cmds\" segment is named \"UM69cmds\") Values ( parsed): 0f: DisplayPort-1 10: DisplayPort-2 11: HDMI-1 Has 1 HDMI, 1 DisplayPort, 1 USB-C Alt DP Users report that it does not support DDC on the DisplayPort input. (See issue LG 29UM69G fails switching input ) on github. Github user mbastian resported: After more than four months of back and forth with German support I've got this: Our Korean software development takes note of reports of this kind, but this does not lead to customer feedback. Wwe do not see any need for further action here. At first they where denying that DDC was even supported, when I've pointed them to the manual and spec sheet then they insisted that it only applied to the OSD. Finally they escalated it. I've explained in detail what my problem is, asked if there is a firmware update or an undocumented ddc feature.... and all I got is a not very nice \"Don't bother us again!\" And Github user AndyKassell reported this response from LG tech support: We have had a response from our Technical Team and they have advised that our monitors do not support DDC-CI officially. Some models are able to issue some commands such as brightness, contrast etc, but if there are issues with this, it would not be considered a fault as it is not guaranteed to work. I apologise for any frustration this causes. LG 27BN88U 27UL850 27GN950-B 29UM69G 34Wk500-P 34WN80C-B 34UM88P 38WN95C Users of all these recent LG displays report similar problems with VCP feature X60 (Input Source). getvcp 60 always returns x00, which is not a valid value. setvcp 60 flashes the screen, sometimes opens the OSD, never sets the value LG 27UD88 29UMS7P Users report this monitors do support featrue x60 LG HDR 4K No model name string in EDID. The binary model number is set (x7702 = 30471) No ASCII serial number in EDID. Binary serial number is present VCP version: 2.1 Controller manufacturer: MStar (sl=x05) Controller Model: mh=x0, ml=xff, sh=x00 Firmware version: 3.4 Manufacture year: 2019 Properly sets the Unsupport VCP Code bit in a GETVCP response. LG Ultrawide VCP version: 2.1 Controller manufacturer and model: STK Firmware version: 0.1 Manufacture year: 2014 Feature codes are not separated by blanks in the vcp() section of the capabilities string. No serial number in the EDID. When responding to a Get VCP Feature request, the monitor never sets sets the Result Code field of the VCP Feature Reply to Unsupported VCP Code. Instead, it always reports No Error. For unsupported VCP codes, all bytes in the response (MH, ML, SH, SL) are set to x00. Mitsubishi RDT232WLM VCP Version: 2.1 Controller manufacturer and model: unreported (VCP feature code C8 unsupported) Firmware version: unreported (VCP feature code C9 unsupported) Manufacture year: 2010 DDC/CI communication works for DVI connector. Does not work on HDMI connector. DDC/CI communication requires signficant number of retries, and occasionaly fails because of the maximum number of retries is exceeded. Features x0B and X0C are not listed in the capabilities string. The monitor replies to getvcp requests for these features. The response to feature X0B (color temperature increment) is 50 degrees Kelvin, which is reasonable. The response to feature X0C (number of color temperature increments) is 0, resulting in a temperature of 3000 degrees Kelvin, which is nonsensical. Responds to getvcp for feature xA8, which is not defined in the MCCS specification. Monoprice Dark Matter 40776 VCP Version: 2.1 Controller manufacturer: Mstar Controller model: mh=x00, ml=xff, sh=x56 Firmware version: 0.0 Manufacture year: 2020 This monitor has 2 HDMI inputs and 2 DisplayPort inputs. The capabilities string reports that VCP feature x60 takes the values x11, x12, x0f, and x10, which per the MCCS spec are HDMI-1, HDMI-2, DisplayPort-1 and DisplayPort-2 respectively. However the actual values, which are reported by getvcp and settable by setvcp are: x05 - HDMI-1 x06 - HDMI-2 x07 - DisplayPort-1 x08 - DisplayPort-2 A new input source can only be set when ddcutil setvcp 60 is issued from the current input source. It is also the case that getvcp and other queries only work when issued on the current input source. The ASCII \"serial number\" in the EDID is blank, and the binary serial number is 0. Consequently, 2 monitors manufactured at the same time will have identical EDIDs, which will confuse software that depends on the EDID to uniquely identify a display. NEC LCD3090WQXi VCP Version 2.0 Controller manufacturer and model: unreported (VCP feature code C8 unsupported) Firmware version: unreported (VCP feature code C9 unsupported) Manufactur year: 2012 Color temperature increment: x0B 100 degress kelvin Color temperature request 35 -> 3000 + 35*100 = 6500 NEC P241W VCP Version 2.0 Controller manufacturer and model: unreported (VCP feature code C8 unsupported) Firmware version: unreported (VCP feature code C9 unsupported) The capabilities string has 2 additional sets of features, designated vcp_p02 and vcp_p10, in addition to the set specified in the vcp() field. It also reports the commands xC2, xC4, xC6 and xC8, which are not part of the DDC/CI specification. Likely these commands are feature request/response pairs for vcp_p02 and vcp_p10. Does not use the usual VCP codes (e.g. x16/Red Gain) for color control. Instead uses the 6 axis color control features x8c..xa0. Has an internal hardware LUT, but it is not accessed using the MCCS defined features for LUT mannipulation. Uses a proprietary USB for communication, which does not support adhere to the USB Monitor Control Class Specification . NEC PA241 VCP Version 2.0 Controller manufacturer and model: unreported (VCP feature code C8 unsupported) Firmware version: unreported (VCP feature code C9 unsupported) Implements both I2C and USB interfaces. Makes heavy use of manufacturer specific VCP feature codes. Also, ddcutil capabilities --verbose reports numerous manufacturer specific DDC commands The USB interface also makes heavy use of manufacturer specific usage codes. Monitor must be set to ??? to allow changes. VCP code x0c (Color Temperature Request) returns 0, which is nonsensical. Does not use the usual VCP codes (e.g. x16/Red Gain) for color control. Instead uses the 6 axis color control features x8c..xa0. Phillips 328P6VU VCP Version: 2.2 (capabilities string) VCP Version: 3.0 (feature xDF) Controller manufacturer: Mstar (sl=0x05), controller number: mh=0xff, ml=0x16, sh=0x00 Firmware version: 0.0 Manufacture year: 2019 The EDID contains a binary serial number, but does not contain an ASCII \"serial number\". VCP code 0x0b (Color temperature increment ): 100 degree(s) Kelvin When VCP code 0x14 (Select color preset) = User 1 (0x0b): VCP code 0x0c (Color temperature request ): 3000 + 35 * (feature 0B color temp increment) degree(s) Kelvin -> 6500 degrees Kelvin This is sensible. Feature xDF (VCP Version) incorrectly reports that the VCP version is 3.0. Problems with feature x60 (Input Source): - In MCCS version 3.0, feature x60 (Input Source) is of type Table, not Non-Continuous. Because of this getvcp incorrectly reads the feature value, and setvcp fails because it expects a value of type Table as input. - Feature value x00, which is not listed in any MCCS specification, represents the USB-C connector. Feature xc0 (Display Usage Time) reports mh=ml=0xff, sh=sl=x00, which is nonsense. Phillips BDM3270 VCP Version: 2.2 Controller manufacturer: Novatek, model info: mh=xff, ml=xff, sh=x00 Firmware version: 1.0 Manufature year: 2016 Color temperature increment (VCP code x0B) = 50 degrees Kelvin (sensible) Color temperature request (VCP code x0C) yields a calculated color temperator of 3000+(70*50) = 6500 degrees Kelvin Phillips BDM4037U VCP Version: 2.2 Controller manufacturer: Realtek (sl=x09), Controller model: mh=x00, ml=x00, sh=x00 Firmware version 0.1 Manufacture year: 2016 color temp increment (feature 0B): 100 deg K color temp request (feature 0C): 70 -> 3000+(70*100) = 10000 deg K DDC communication clean, no need for retries Samsung S32D850 Manufacture year: 2015 VCP Version: 2.0 Controller manufacturer: Mstar, controller number: mh=x00, ml=x10, sh=x00 Firmware version: 0.1 Capabilites request returns a 0 length string. Features x0B and X0C are unsupported. Cannot calculate color temperature. Has no serial number in EDID Samsung Syncmaster 213T Does not support DDC. Samsung Syncmaster 730B VCP version: Unspecified, implies 1.0 Controller manufacturer and model: Unknown (VCP feature code C8 unsupported) Firmware version: Unknown (VCP feature code C9 unsupported) The capabilities string spcifies the values for non-continuous features in decimal rather than hexadecimal VCP feature code Samsung LC49G95T Odyssey G9 VCP version reported by capabilitise string: 2.0 VCP version reported by feature xdf: 2.1 Controller manufacturer and model: Novatek, model id: mh=xff, ml=0xff, sh=0x00 Firmware version: 0.0 Two users have reported that DDC/CI does not work over DisplayPort. In both cases they were using the amdgpu video driver This was true no matter which DisplayPort version was chosen in the OSD. As of 12/2020, this is not fixed by the most recent monitor firmware update. User razamatan reports that he was told in Samsung's chat support that DDC/CI is not implemented on DisplayPort. The capabilites string reports an unrecognized command code, x4e Feature x14 (Color Perset), x06 (Color Temperature Increament) and x06 (Color temperature requrest) appear consistent. In one report: VCP code 0x14 (Select color preset ): 7500 K (sl=0x06) Color temperature increment (x0b) = 50 degrees Kelvin Color temperature request (x0c) = 90 Requested color temperature = (3000 deg Kelvin) + 90 * (50 degrees Kelvin) = 7500 degrees Kelvin The monitor has two DisplayPort inputs and one HDMI input. However, the capabilities string reports valid values as being as x01 - VGA and X03 - DVI-1. The following features are not declared in the capabiliteis string but were found by scanning: Feature x52 - Active control Feature xb2 - Flat panel sub-pixel layout Feature xf4 - Manufacturer Specific Feature xfe - Manufacturer Specific Samsung U32H750 VCP version reported by capabilities string: 2.1, VCP version reported by feature xdf: 2.0 Controller manufacturer and model: Mstar, model id: mh=x00, ml=0x10, sh=0x00 Firmware version: 0.1 This monitor is a MCCS disaster area. The capabilities string returned by the monitor is malformed. As a result, ddcutil cannot parse the \"cmds\" field. Features x0B and X0C are unsupported. Cannot calculate color temperature. No matter what the color mode (x14 Preset, xDC Display Mode) color settings (x16, x18, x1a) cannot be changed. Brightness (x10) and contrast can be changed only in some modes. Values in the capabilities string correlate poorly with observed values. For example, according to the capaiblities string, feature x60 (Input source) has values x11, x12, and x0f, which the MCCS spec defines as HDMI-1, HDMI-2 and DisplayPort-1 respectively. However, the observed values are x05, x06, and x0f, which the MCCS spec defines as Composite video 1, Composite video 2, and Displayport respectively. Viewsonic XG2703-GS Manufacture year: 2016 VCP Version: 2.2 Controller manufacturer: Manufacturer-designed (sl=xff) Firmware version: 1.14 No serial number in EDID For unsupported features, sometimes returns a well-formed reply with the \"unsupported feature\" flag not set. More often, garbage is returned, resulting in the maximum number of retries. Does not support feature x60 (input switching) Features X0B and x0C are unsupported. Cannot calculate color temperature.","title":"Notes on Specific Monitors"},{"location":"monitor_notes/#notes-on-specific-monitors","text":"The following list describes some monitors that have been tested or reported by users. It highlights the variability in DDC implementation among monitors.","title":"Notes on Specific Monitors"},{"location":"monitor_notes/#aoc-q2775","text":"VCP Version: 2.2 Controller Manufacturer: Mstar Controller Model: mh=0xff, ml=0x16, sh=0x00 Firmware version: 0.7 Manufacture year: 2016 Feature x0B: Color temperature increment: 100 deg Kelvin Feature x0C: Color temperature request: 100 Caclculated color temperature = 3000 + 100 * 100 = 3000+10000 = 13000 deg Kelvin (nonsensical) Capabilities string has controller manufacturer name in model() field.","title":"AOC Q2775"},{"location":"monitor_notes/#apple-cinema-display-a1082","text":"Has both I2C and USB interfaces. VCP Version: 2.0 Controller Manufacturer: unspecified Controller Model: unspecified Firmware version: unspecified Manufacture year: 2005 I2C interface has more VCP features than USB interface. USB interface does not report VCP version (feature DF). Able to read EDID over USB. Capabilities string does not begin and end with parentheses.","title":"Apple Cinema Display A1082"},{"location":"monitor_notes/#asus-mg279","text":"The capabilities string is malformed.","title":"Asus MG279"},{"location":"monitor_notes/#asus-pg329q","text":"VCP version 2.2 Controller Manufacturer: Novatek Firmware version: 0.36 Manufacture year: 2020 The EDID contains neither an ASCII nor a binary serial number.","title":"Asus PG329Q"},{"location":"monitor_notes/#asus-rog-pg279q","text":"VCP version: 2.2 Controller Manufacturer: manufacturer defined controller Controller Model: Firmware version: 5.57, 5.59 Maufacture year: 2017, 2018 Does not support VCP codes x0B and X0C. Does not support feature x60 - Input Source Does not respond to getvcp of unsupported VCP codes by setting the unsupported feature flag in the GETVCP response. Requests for unsupported features return garbage bytes, the requests fail by exceeding retries. The output of the capabilities command does appear to accurately report which features are supported.","title":"Asus ROG PG279Q"},{"location":"monitor_notes/#asus-ve247","text":"VCP version: 2.0 Controller Manufacturer: RealTek Controller Model: mh=x00, ml=x24, sh=x82 Firmware version: 2.0 Maufacture year: 2010 Responds to unknown VCP codes using the DDC NULL message instead of setting the Unsupported VCP code bit in the GETVCP response. Sensible responses to VCP codes x0B and x0C.","title":"Asus VE247"},{"location":"monitor_notes/#asus-vs248","text":"The value of feature x60 (Input Source) can be changed only from the currently active input.","title":"Asus VS248"},{"location":"monitor_notes/#benq-gw2480","text":"VCP Version: 2.1 Controller Manufacturer: Mstar Controller Model: mh=0x00, ml=0x58, sh=0x00 Firmware version: 3.10 Manufacture year: 2018 Color temperature increment (x0b) = 50 degrees Kelvin Color temperature request (x0c) = 70 Requested color temperature = (3000 deg Kelvin) + 70 * (50 degrees Kelvin) = 6500 degrees Kelvin Brightness and possibly other color related features are disabled when Dynamic Contrast Range (DCR) is enabled (using OSD).","title":"BenQ  GW2480"},{"location":"monitor_notes/#benq-xl2411z","text":"VCP version: 2.2 Controller Manufacturer: Mstar Controller Model: mh=x00 mh=x00, ml-x85, sh=x56 Firmware version: 2.1 Manufacture year: 2013 Feature x0B: Color temperature increment: 50 deg Kelvin Feature x0C: Color temperature request: 0 Caclculated color temperature = 3000 + (0*50) = 3000 deg Kelvin (nonsensical) Responds to VCP feature x60 (Input Source) even though this is not documented in the capabilities string.","title":"BenQ XL2411Z"},{"location":"monitor_notes/#dell-aw3418dw","text":"VCP Version: 2.2 Controller Manufacturer: manufacturer designed (sl=0xff) Controller Model: mh=0x01 ml=0x08 sh=0x04 Firmware version: 4.133 Manufacture year: 2017 Feature x0B: Color temperature increment: unsupported Feature x0C: Color temperature request: unsupported Reading unsupported feature 0x00 returns normally, with ml=ml=sh=sl=0. The unsupported feature bit is not set. Reading any other unsupported feature value results in an IOCTL failure with Linux errno=EIO (5).","title":"Dell AW3418DW"},{"location":"monitor_notes/#dell-p2411","text":"VCP version: 2.1 Controller Manufacturer: Mstar Controller Model: mh=x00, ml=x00, sh=x56 Firmware version: 1.1 Manufacture year: 2011 Lots of I2C errors. Heavily dependant on retries. The CAPABILITIES command sometimes fails, even with maximum retries. More recently, works with nouveau driver, but fails with proprietary Nvidia driver. Reports VCP code 0B (color temperature increment) as 1 degree Kelvin, which makes the GETVCP response to VCP code 0C (color temperature request) nonsensical.","title":"Dell P2411"},{"location":"monitor_notes/#dell-p2715q","text":"VCP version: 2.1 Controller Manufacturer: Mstar (sl=x05) Controller Model: mh=x00, ml=x00,x sh=x56 Firmware version: 2.1 Manufacture year: 2015 Feature x0B, Color temperature increment: unsupported Feature x0C, Color temperature request: unsupported very clean, no DDC retries needed","title":"Dell P2715Q"},{"location":"monitor_notes/#dell-s3422dwg","text":"VCP version: 2.1 Controller Manufacturer: RealTek (sl=0x09) Controller Model: mh=0x00, ml=0x27, sh=0x17 Firmware version: 65.3 Manufacture year: 2021 Github user Noctivans has posted extensive notes detailing what he discovered on how to control Picture In Picture/Picture By Picture using undocumented features.","title":"Dell S3422DWG"},{"location":"monitor_notes/#dell-ultrasharp-1905fp","text":"Does not support DDC.","title":"Dell Ultrasharp 1905FP"},{"location":"monitor_notes/#dell-ultrasharp-u2413","text":"VCP version: 2.1 Controller Manufacturer: STMicroelectronics (sl=x0d) Controller Model: mh=x00, ml=x93, sh=x01 Firmware version: 2.1 Manufacture year: 2013 This monitor has a hardware LUT, however LUT loading not supported using standard VCP feature codes. Responds to VCP feature xc0 (Display Usage Time), but returns 0. Color temperature: color temp increment (feature 0B): unsupported color temp request (feature 0C): unsupported","title":"Dell Ultrasharp U2413"},{"location":"monitor_notes/#dell-2407wfp","text":"VCP version: 2.0 Controller Manufacturer: Genesis Controller Model: mh=0xff, ml=0xff, sh=0x4a Firmware version: 29.1 Cannot set brightness less than 30. setvcp values in the range 0..50 are mapped to the range 30..50 User eskampie created the following table. Requested setvcp value Observed OSD value 0 30 10 34 20 38 30 42 40 46 50 50 60 60 70 70 80 80 90 90 100 100","title":"Dell 2407wfp"},{"location":"monitor_notes/#dell-u2518d","text":"VCP Version: 2,1 Controller Manufacturer: MStar Controller Model: mh=0x00, ml=0x00, sh=0x56 Firmware version: 2.1 Manufacture year: 2018 Features 0B, 0C are unsupported. Attempting to set feature x12 (contrast) less than 25 results in a value of 25. However, it is possible to set a lower contrast value in the OSD . Unlike the Dell 2404wfp feature x10 (brightness) can be set to any value between 0..100. Clean implementation, no I2c retries required.","title":"Dell U2518D"},{"location":"monitor_notes/#dell-u3011","text":"VCP version: 2.1 Controller manufacturer: Mstar Controller Model: mh=x00, ml=x94, sh=x85 Firmware version: 1.5 Manufacture year: 2012 If a value is set using SETVCP, the new value takes effect and may appear in the on-screen display. However, GETVCP (or the verification option) sometimes still retieves the old value, not the new one. More specifically: Feature Name Code Notes Contrast x12 values below x25 take effect but the old value is returned Video Gain: Red x16 Values below 100 take effect, but the GETVCP reports 100 Video Gain: Green x18 Ditto Video Gain: Blue x1a Ditto Display Mode xdc Reports VCP code x0B (color temperature increment) as 1 degree Kelvin, which makes the GETVCP response to VCP code x0C (color temperature request) nonsensical. Color temperature: color temp increment (feature 0B): 1 deg K color temp request (feature 0C): 2 calculated color temp = 3000 + (x0c_val * x0b_val) = 3000 + (1 * 2) = 3002 degrees Kelvin","title":"Dell U3011"},{"location":"monitor_notes/#dell-ultrasharp-u3415w","text":"VCP version: 2.1 Controller manufacturer: Realtek (sl=x09) Controller Model: mh=x00, ml=x11, sh=x11 Firmware version: 65.1 Manufacture year: 2015 Neither feature 0B (color temperature increment) or 0C (color temperature request) are listed in the capabilities string. However, querying feature 0B does work. Querying feature 0C fails. Color temperature: color temp increment (feature 0B): 100 deg K color temp request (feature 0C): query fails","title":"Dell Ultrasharp U3415W"},{"location":"monitor_notes/#dell-u3818dw","text":"VCP version: 2.1 Controller Manufacturer: RealTek Controller Model: mh=0x00, ml=0x11, sh=0x11 Firmware version: 65.1 Manufacture year: 2017 Fails to set the Unsupported VCP Code bit in the getvcp response packet for unsupported features.","title":"Dell U3818DW"},{"location":"monitor_notes/#eizo-coloredge-cg19","text":"VCP version: unreported Controller manufacturer and model: unreported (VCP feature code C8 unsupported) Firmware version: unreported (VCP feature code C9 unsupported) Reports EDID at I2C bus address x50. Does not support DDC over I2C (bus address x37). Does implement MCCS over USB, and appears to conform to the USB Monitor Control Class Specification. However, it appears that the more sophisticated monitor features such as LUT loading use manufacturer specific USB HID reports. Unable to read EDID over USB, even though the HID Report for EDID can be located. To set color related VCP feature values, Custom Color mode must be selected. If set to sRGB or Calibrated, the SETVCP command will appear to succeed, but will have no effect. (In sRGB mode, Brightness can be set, in Calibrated mode it cannot.)","title":"Eizo Coloredge CG19"},{"location":"monitor_notes/#eizo-ev2785","text":"Reports EDID ad I2c bus address x.50. Does not support DDC/CI (bus address x37). Uses USB for monitor control, but uses manufacturer-defined usage pages for communication, i.e. does not support the USB Monitor Control Class Specification .","title":"Eizo EV2785"},{"location":"monitor_notes/#electriq-244mkhdr","text":"VCP version: 2.2 Controller manufacturer and model: Realtek 0.1 Firmware version: 0.1 This is a marketer rebrand of a monitor created by some Chinese company, possibly Meirun. The 3 character manufacturer id \"WAM\" is not registered. The serial number reported is \"demoset-1\", The values reported by the monitor for features x10 (brightness) and x12 (contrast) are not those shown in the OSD. For details, see ddcutil issue 200: Electriq 24 inch monitor - brightness works but getvcp range doesn't match OSD range . Feature x60 (input source) reports invalid value x00 as the current input. Feature xCA (OSD/Button Control) reports that the OSD is disabled, even though it is enabled.","title":"Electriq 244MKHDR"},{"location":"monitor_notes/#gateway-diamondtron-vx920","text":"VCP version: Unspecified, implies 1.0 Controller manufacturer and model: Unknown (VCP feature code C8 unsupported) Firmware version: Unknown (VCP feature code C9 unsupported)","title":"Gateway Diamondtron VX920"},{"location":"monitor_notes/#hanns-g-hi221d","text":"VCP version: 2.1 Controller manufacturer: Mstar Controller model: mh=x00, ml=x92, sh=x00 Firmware version: 0.6 All GETVCP requests return a value, whether or not the feature is valid for the monitor. The monitor never reports a feature as unsupported.","title":"Hanns G Hi221D"},{"location":"monitor_notes/#hp-lp1965","text":"VCP version: 2.0 Controller manufacturer: Undocumented value: x64 Controller model: mh=xff, ml=xff, sh=x86 Firmware version: 0.3 Manufacture year: 2007 Capabilities reports non-standard DDC command x4E. Color temperature: color temp increment (feature 0B): 50 deg K color temp request (feature 0C): 70 calculated color temp = 3000 + (x0c_val * x0b_val) = 3000 + (70 * 50) = 6500 degrees Kelvin","title":"HP LP1965"},{"location":"monitor_notes/#hp-lp2475w","text":"VCP version: 2.1 Controller manufacturer: Genesis Controller model: mh=xff ml=xff sh=x80 Firmware version: 0.31 Manufacture year: 2008 Color temperature: color temp increment (feature 0B): 3000 deg K color temp request (feature 0C): 1 calculated color temp = 3000 + (x0c_val * x0b_val) = 3000 + (1 * 3000) = 6000 degrees Kelvin LUT loading not supported using standard VCP feature codes. Implements MCCS over USB as well as I2C. However, the USB implementation appears to be non-standard. It does not conform to the USB Monitor Control Class Specification.","title":"HP LP2475w"},{"location":"monitor_notes/#hp-lp2480zx","text":"VCP version: 2.1 Controller manufacturer: Genesis Controller Model: mh=xff, ml=xff, sh=x80 Firmware version: 0.139 Manufacture year: 2008 Heavily reliant on manufacturer specific VCP codes. Most color related features, including loading the internal LUT, are not supported using standard VCP feature codes. Implements MCCS over USB as well as I2C. However, the USB implementation appears to be non-standard. It does not conform to the USB Monitor Control Class Specification. Sensible reponses to VCP codes 0B and 0C. Capabilities string does not match actual capabilities observed. For example, capaibilites does not include VCP feature code x10, brightness, which is recognized by getvcp and setvcp. Values in capabilities string for feature 60 is a mixture of hex and decimal values, i.e. 01 02 03 04 05 07 0C 13 14 15 17 1C Should be: 01 02 03 04 05 07 0C 0D 0E 0F 11 ?? Capabilities string does include cmds() segment listing supported commands, or model() segment listing model.","title":"HP LP2480zx"},{"location":"monitor_notes/#hp-w2207","text":"VCP Version: 2.1 Controller manufacturer: Mstar Firmware Version: 3.5 Manufacture year: 2007 Color temperature increment (feature x0B) and request (feature x0C) result in a color temperature of 13,000 degress Kelvin Responds with data to all VCP feature requests, never reports a feature as unsupported","title":"HP w2207"},{"location":"monitor_notes/#hp-zr2740w","text":"VCP version: 2.2 Implements only a few VCP codes. VCP feature codes 0B and 0C unsupported.","title":"HP ZR2740w"},{"location":"monitor_notes/#hp-z27n-g2","text":"VCP version: 2.2 For VCP code 60 (input source), the second DisplayPort input is value 0x13, instead of the standard 0x10. 0x13 is reported accurately as the value to use in capabilities. When using VCP code 60 to switch inputs, the value read by GetVCP only updates once the new source has a valid input signal. Until there is a valid signal, GetVCP continues to report the previously selected input.","title":"HP Z27n G2"},{"location":"monitor_notes/#iiyama-pl2492h","text":"VCP Version: 2.2 (reported by capabilities string), 2.1 (reported by feature xdf) Controller Manufacturer: Connexant Firmware version: 0.0 Manufacture year: 2017 Color temperature increment (feature X0B): 100 degrees Kelvin Color temperature request (feature X0C): results in a nonsensical color temperature 1300 (3000 + 100 * 100) degrees Kelvin Requires that a Save Current Settings packet (command scs ) be sent immediately after a Set VCP Feature packet (command setvcp ) to actually set the value. Never sets the unsupported feature bit in a VCP Feature Reply packet (command getvcp ). The capabilities command must be checked to determine if a feature is supported.","title":"Iiyama PL2492H"},{"location":"monitor_notes/#iiyama-pl2779q","text":"VCP Version: 2.1 Controller manufacturer: unknown (feature code xC8 unsupported) Firmware version: unknown (feature code xC9 unsupported) Manufacture year: 2013 Color temperature increment (feature x0B) and request (feature x0C) result in a color temperature of 26,100 degress Kelvin Does not include command x02 (VCP Response) or xE3 (Capabilities Reply) in its capabilities string, even though these are supported. Responds to several VCP feature not listed in capabilities.","title":"Iiyama PL2779Q"},{"location":"monitor_notes/#iiyama-pl2792q","text":"VCP Version: 2.2 (reported by capabilities string), 2.1 (reported by feature xdf) Controller Manufacturer: RealTek (controller number mh=x00, ml=x27, sh=x85) Firmware version: 0.0 Manufacture year: 2020 Color temperature increment (feature X0B): 100 degrees Kelvin Color temperature request (feature X0C): results in a nonsensical color temperature of 1300 degrees Kelvin Requires that a Save Current Settings packet (command scs ) be sent immediately after a Set VCP Feature packet (command setvcp ) to actually set the value. Never sets the unsupported feature bit in a VCP Feature Reply packet (command getvcp ). The capabilities command must be checked to determine if a feature is supported.","title":"Iiyama PL2792Q"},{"location":"monitor_notes/#lenovo-thinkvision-x1","text":"VCP Version: 2.1 Controller manufactuer: Mstar Controller Model: mh=0xff, ml=0x16, sh=0x00 Firmware level 1.0 Manufacture year: 2016 Color temperature: - color temperature increment (feature 0B): 100 deg Kelvin - color temperature request (feature 0C): 35 - calculated color temperature: 3000 + (x0c_val * x0b_val) = 3000 + (35 * 100) = 6500 degrees Kelvin Brightness (feature x10) cannot be changed when Dynamic Contrast Range (DCR) is enabled (using OSD). Per user Janusz Kowalczyk, setting Dynamic Constrast Range and/or Low Blue light in the OSD disables various features in the OSD. Presumably they cannot be changed by ddcutil either. Brightness and Contrast may or may not be disabled Color related settings may or may not be disabled Image scaling is disabled DisplayPort version selection is disabled","title":"Lenovo ThinkVision X1"},{"location":"monitor_notes/#lenovo-l22e-20","text":"VCP Version: 2.0 Controller Manufacturer: Mstar Controller Model: mh=0x00, ml=0x00, sh=0x00 Firmware level 1.0 Manuracture year: 2019 EDID has no serial number. Color temperature: - color temperature increment (x0B): 100 degrees Kelvin - color temperature request: (x0C) 0 - calculated color temperature = 3000 + (0 * 100) = 3000 degrees Kelvin Brightness and possibly other color related features are disabled when Dynamic Contrast Range (DCR) is enabled (using OSD).","title":"Lenovo L22e-20"},{"location":"monitor_notes/#lg-22mp48d-p","text":"VCP Version: 2.1 Manufacture year: 2016 Controller manufacturer and model: MStar Firmware version: 5.0 Features x0B and x0C are supported. Calculated color temperature = 6500 degrees Kelvin. EDID model name is generic \"LG IPS FULLHD\" Never sets the Unsupported Feature bit in replying to a GETVCP request for an unsupported feature. Instead retuns a success response with all response bytes = 0.","title":"LG 22MP48D-P"},{"location":"monitor_notes/#lg-23ea73","text":"Never sets the Unsupported Feature bit in replying to a GETVCP request for an unsupported feature. Instead retuns a success response with all response bytes = 0.","title":"LG 23EA73"},{"location":"monitor_notes/#lg-27mu67","text":"VCP Version: 2.1 Manufacture year: 2015 Controller manufacturer: Mstar Controller model: mh=x00, ml=xff, sh=x00 Firmware version: 3.7 Features X0B and X0C are not supported. Cannot calculate color temperature. No serial number in EDID. When brightness (VCP feature x10) is changed, it reverts to the original value after approximately 1 second. The same behavior is seen on Windows using ClickMonitorDDC and softMCCS, so this is clearly a monitor issue. This problem is not observed for other features.","title":"LG 27MU67"},{"location":"monitor_notes/#lg-27md5kl-ultrafine","text":"VCP Version: 2.2 (from the capabilities string) Manufacture year: 2020 Controller manufacturer: unknown (feature xc8 unsupported) Controller version: unknown (feature xc8 unsupported) Firmware version: 3.4 The EDID model name is generic \"LG UltraFine\". This 5K monitor appears to have been built with only Macs in mind. It has no buttons, and no on screen display (OSD). Despite an extensive list of features in the capabilities string, getvcp for most returns with the unsupported feature bit set in the response packet. The only features in the capabilities string that can be read using getvcp are: 0x10 (brightness), xFD (manufacturer reserved), xFF (manufacturer reserved). In particular, getvcp of feature xDF (VCP version) fails. Per the MCCS specification, this feature must be supported as of MCCS 2.0. The following features unknown to MCCS are not listed in the capabilities string, but return a value for getvcp : xD1, xD3, xD5, xDD This monitor also supports USB access to the Virtual Display Panel, but the only feature supported through this interface is 0x10 (brightness).","title":"LG 27MD5KL UltraFine"},{"location":"monitor_notes/#lg-29um69g","text":"VCP Version: 2.1 Manufacture year: 2019 Controller manufacturer: RealTek controller number: mh=0x00, ml=0xff, sh=0x00 Firmware version: 3.24 EDID version: 1.3 EDID model name is \"LG Ultrawide\". No ASCII \"serial number\". (Binary serial number not checked) Malformed capabilities string. (The \"cmds\" segment is named \"UM69cmds\") Values ( parsed): 0f: DisplayPort-1 10: DisplayPort-2 11: HDMI-1 Has 1 HDMI, 1 DisplayPort, 1 USB-C Alt DP Users report that it does not support DDC on the DisplayPort input. (See issue LG 29UM69G fails switching input ) on github. Github user mbastian resported: After more than four months of back and forth with German support I've got this: Our Korean software development takes note of reports of this kind, but this does not lead to customer feedback. Wwe do not see any need for further action here. At first they where denying that DDC was even supported, when I've pointed them to the manual and spec sheet then they insisted that it only applied to the OSD. Finally they escalated it. I've explained in detail what my problem is, asked if there is a firmware update or an undocumented ddc feature.... and all I got is a not very nice \"Don't bother us again!\" And Github user AndyKassell reported this response from LG tech support: We have had a response from our Technical Team and they have advised that our monitors do not support DDC-CI officially. Some models are able to issue some commands such as brightness, contrast etc, but if there are issues with this, it would not be considered a fault as it is not guaranteed to work. I apologise for any frustration this causes.","title":"LG 29UM69G"},{"location":"monitor_notes/#lg-27bn88u-27ul850-27gn950-b-29um69g-34wk500-p-34wn80c-b-34um88p-38wn95c","text":"Users of all these recent LG displays report similar problems with VCP feature X60 (Input Source). getvcp 60 always returns x00, which is not a valid value. setvcp 60 flashes the screen, sometimes opens the OSD, never sets the value","title":"LG 27BN88U  27UL850  27GN950-B 29UM69G 34Wk500-P 34WN80C-B 34UM88P 38WN95C"},{"location":"monitor_notes/#lg-27ud88-29ums7p","text":"Users report this monitors do support featrue x60","title":"LG 27UD88  29UMS7P"},{"location":"monitor_notes/#lg-hdr-4k","text":"No model name string in EDID. The binary model number is set (x7702 = 30471) No ASCII serial number in EDID. Binary serial number is present VCP version: 2.1 Controller manufacturer: MStar (sl=x05) Controller Model: mh=x0, ml=xff, sh=x00 Firmware version: 3.4 Manufacture year: 2019 Properly sets the Unsupport VCP Code bit in a GETVCP response.","title":"LG HDR 4K"},{"location":"monitor_notes/#lg-ultrawide","text":"VCP version: 2.1 Controller manufacturer and model: STK Firmware version: 0.1 Manufacture year: 2014 Feature codes are not separated by blanks in the vcp() section of the capabilities string. No serial number in the EDID. When responding to a Get VCP Feature request, the monitor never sets sets the Result Code field of the VCP Feature Reply to Unsupported VCP Code. Instead, it always reports No Error. For unsupported VCP codes, all bytes in the response (MH, ML, SH, SL) are set to x00.","title":"LG Ultrawide"},{"location":"monitor_notes/#mitsubishi-rdt232wlm","text":"VCP Version: 2.1 Controller manufacturer and model: unreported (VCP feature code C8 unsupported) Firmware version: unreported (VCP feature code C9 unsupported) Manufacture year: 2010 DDC/CI communication works for DVI connector. Does not work on HDMI connector. DDC/CI communication requires signficant number of retries, and occasionaly fails because of the maximum number of retries is exceeded. Features x0B and X0C are not listed in the capabilities string. The monitor replies to getvcp requests for these features. The response to feature X0B (color temperature increment) is 50 degrees Kelvin, which is reasonable. The response to feature X0C (number of color temperature increments) is 0, resulting in a temperature of 3000 degrees Kelvin, which is nonsensical. Responds to getvcp for feature xA8, which is not defined in the MCCS specification.","title":"Mitsubishi RDT232WLM"},{"location":"monitor_notes/#monoprice-dark-matter-40776","text":"VCP Version: 2.1 Controller manufacturer: Mstar Controller model: mh=x00, ml=xff, sh=x56 Firmware version: 0.0 Manufacture year: 2020 This monitor has 2 HDMI inputs and 2 DisplayPort inputs. The capabilities string reports that VCP feature x60 takes the values x11, x12, x0f, and x10, which per the MCCS spec are HDMI-1, HDMI-2, DisplayPort-1 and DisplayPort-2 respectively. However the actual values, which are reported by getvcp and settable by setvcp are: x05 - HDMI-1 x06 - HDMI-2 x07 - DisplayPort-1 x08 - DisplayPort-2 A new input source can only be set when ddcutil setvcp 60 is issued from the current input source. It is also the case that getvcp and other queries only work when issued on the current input source. The ASCII \"serial number\" in the EDID is blank, and the binary serial number is 0. Consequently, 2 monitors manufactured at the same time will have identical EDIDs, which will confuse software that depends on the EDID to uniquely identify a display.","title":"Monoprice Dark Matter 40776"},{"location":"monitor_notes/#nec-lcd3090wqxi","text":"VCP Version 2.0 Controller manufacturer and model: unreported (VCP feature code C8 unsupported) Firmware version: unreported (VCP feature code C9 unsupported) Manufactur year: 2012 Color temperature increment: x0B 100 degress kelvin Color temperature request 35 -> 3000 + 35*100 = 6500","title":"NEC LCD3090WQXi"},{"location":"monitor_notes/#nec-p241w","text":"VCP Version 2.0 Controller manufacturer and model: unreported (VCP feature code C8 unsupported) Firmware version: unreported (VCP feature code C9 unsupported) The capabilities string has 2 additional sets of features, designated vcp_p02 and vcp_p10, in addition to the set specified in the vcp() field. It also reports the commands xC2, xC4, xC6 and xC8, which are not part of the DDC/CI specification. Likely these commands are feature request/response pairs for vcp_p02 and vcp_p10. Does not use the usual VCP codes (e.g. x16/Red Gain) for color control. Instead uses the 6 axis color control features x8c..xa0. Has an internal hardware LUT, but it is not accessed using the MCCS defined features for LUT mannipulation. Uses a proprietary USB for communication, which does not support adhere to the USB Monitor Control Class Specification .","title":"NEC P241W"},{"location":"monitor_notes/#nec-pa241","text":"VCP Version 2.0 Controller manufacturer and model: unreported (VCP feature code C8 unsupported) Firmware version: unreported (VCP feature code C9 unsupported) Implements both I2C and USB interfaces. Makes heavy use of manufacturer specific VCP feature codes. Also, ddcutil capabilities --verbose reports numerous manufacturer specific DDC commands The USB interface also makes heavy use of manufacturer specific usage codes. Monitor must be set to ??? to allow changes. VCP code x0c (Color Temperature Request) returns 0, which is nonsensical. Does not use the usual VCP codes (e.g. x16/Red Gain) for color control. Instead uses the 6 axis color control features x8c..xa0.","title":"NEC PA241"},{"location":"monitor_notes/#phillips-328p6vu","text":"VCP Version: 2.2 (capabilities string) VCP Version: 3.0 (feature xDF) Controller manufacturer: Mstar (sl=0x05), controller number: mh=0xff, ml=0x16, sh=0x00 Firmware version: 0.0 Manufacture year: 2019 The EDID contains a binary serial number, but does not contain an ASCII \"serial number\". VCP code 0x0b (Color temperature increment ): 100 degree(s) Kelvin When VCP code 0x14 (Select color preset) = User 1 (0x0b): VCP code 0x0c (Color temperature request ): 3000 + 35 * (feature 0B color temp increment) degree(s) Kelvin -> 6500 degrees Kelvin This is sensible. Feature xDF (VCP Version) incorrectly reports that the VCP version is 3.0. Problems with feature x60 (Input Source): - In MCCS version 3.0, feature x60 (Input Source) is of type Table, not Non-Continuous. Because of this getvcp incorrectly reads the feature value, and setvcp fails because it expects a value of type Table as input. - Feature value x00, which is not listed in any MCCS specification, represents the USB-C connector. Feature xc0 (Display Usage Time) reports mh=ml=0xff, sh=sl=x00, which is nonsense.","title":"Phillips 328P6VU"},{"location":"monitor_notes/#phillips-bdm3270","text":"VCP Version: 2.2 Controller manufacturer: Novatek, model info: mh=xff, ml=xff, sh=x00 Firmware version: 1.0 Manufature year: 2016 Color temperature increment (VCP code x0B) = 50 degrees Kelvin (sensible) Color temperature request (VCP code x0C) yields a calculated color temperator of 3000+(70*50) = 6500 degrees Kelvin","title":"Phillips BDM3270"},{"location":"monitor_notes/#phillips-bdm4037u","text":"VCP Version: 2.2 Controller manufacturer: Realtek (sl=x09), Controller model: mh=x00, ml=x00, sh=x00 Firmware version 0.1 Manufacture year: 2016 color temp increment (feature 0B): 100 deg K color temp request (feature 0C): 70 -> 3000+(70*100) = 10000 deg K DDC communication clean, no need for retries","title":"Phillips BDM4037U"},{"location":"monitor_notes/#samsung-s32d850","text":"Manufacture year: 2015 VCP Version: 2.0 Controller manufacturer: Mstar, controller number: mh=x00, ml=x10, sh=x00 Firmware version: 0.1 Capabilites request returns a 0 length string. Features x0B and X0C are unsupported. Cannot calculate color temperature. Has no serial number in EDID","title":"Samsung S32D850"},{"location":"monitor_notes/#samsung-syncmaster-213t","text":"Does not support DDC.","title":"Samsung Syncmaster 213T"},{"location":"monitor_notes/#samsung-syncmaster-730b","text":"VCP version: Unspecified, implies 1.0 Controller manufacturer and model: Unknown (VCP feature code C8 unsupported) Firmware version: Unknown (VCP feature code C9 unsupported) The capabilities string spcifies the values for non-continuous features in decimal rather than hexadecimal VCP feature code","title":"Samsung Syncmaster 730B"},{"location":"monitor_notes/#samsung-lc49g95t-odyssey-g9","text":"VCP version reported by capabilitise string: 2.0 VCP version reported by feature xdf: 2.1 Controller manufacturer and model: Novatek, model id: mh=xff, ml=0xff, sh=0x00 Firmware version: 0.0 Two users have reported that DDC/CI does not work over DisplayPort. In both cases they were using the amdgpu video driver This was true no matter which DisplayPort version was chosen in the OSD. As of 12/2020, this is not fixed by the most recent monitor firmware update. User razamatan reports that he was told in Samsung's chat support that DDC/CI is not implemented on DisplayPort. The capabilites string reports an unrecognized command code, x4e Feature x14 (Color Perset), x06 (Color Temperature Increament) and x06 (Color temperature requrest) appear consistent. In one report: VCP code 0x14 (Select color preset ): 7500 K (sl=0x06) Color temperature increment (x0b) = 50 degrees Kelvin Color temperature request (x0c) = 90 Requested color temperature = (3000 deg Kelvin) + 90 * (50 degrees Kelvin) = 7500 degrees Kelvin The monitor has two DisplayPort inputs and one HDMI input. However, the capabilities string reports valid values as being as x01 - VGA and X03 - DVI-1. The following features are not declared in the capabiliteis string but were found by scanning: Feature x52 - Active control Feature xb2 - Flat panel sub-pixel layout Feature xf4 - Manufacturer Specific Feature xfe - Manufacturer Specific","title":"Samsung LC49G95T Odyssey G9"},{"location":"monitor_notes/#samsung-u32h750","text":"VCP version reported by capabilities string: 2.1, VCP version reported by feature xdf: 2.0 Controller manufacturer and model: Mstar, model id: mh=x00, ml=0x10, sh=0x00 Firmware version: 0.1 This monitor is a MCCS disaster area. The capabilities string returned by the monitor is malformed. As a result, ddcutil cannot parse the \"cmds\" field. Features x0B and X0C are unsupported. Cannot calculate color temperature. No matter what the color mode (x14 Preset, xDC Display Mode) color settings (x16, x18, x1a) cannot be changed. Brightness (x10) and contrast can be changed only in some modes. Values in the capabilities string correlate poorly with observed values. For example, according to the capaiblities string, feature x60 (Input source) has values x11, x12, and x0f, which the MCCS spec defines as HDMI-1, HDMI-2 and DisplayPort-1 respectively. However, the observed values are x05, x06, and x0f, which the MCCS spec defines as Composite video 1, Composite video 2, and Displayport respectively.","title":"Samsung U32H750"},{"location":"monitor_notes/#viewsonic-xg2703-gs","text":"Manufacture year: 2016 VCP Version: 2.2 Controller manufacturer: Manufacturer-designed (sl=xff) Firmware version: 1.14 No serial number in EDID For unsupported features, sometimes returns a well-formed reply with the \"unsupported feature\" flag not set. More often, garbage is returned, resulting in the maximum number of retries. Does not support feature x60 (input switching) Features X0B and x0C are unsupported. Cannot calculate color temperature.","title":"Viewsonic XG2703-GS"},{"location":"monitor_resources/","text":"Monitor Specifications Some useful sites for finding monitor specifications. DisplayDB DisplaySpecifications Specifications, comparisons, and user reviews TFT Central News, Reviews, Profiles and monitor calibration database, Monitor panel part database Panelook.com","title":"Monitor Specifications"},{"location":"monitor_resources/#monitor-specifications","text":"Some useful sites for finding monitor specifications. DisplayDB DisplaySpecifications Specifications, comparisons, and user reviews TFT Central News, Reviews, Profiles and monitor calibration database, Monitor panel part database Panelook.com","title":"Monitor Specifications"},{"location":"next_release_notes/","text":"Preliminary Notes for the Next ddcutil Release Release 2.0.0 is a major update to ddcutil , containing significant performance improvements. The version of the shared library is not backwards compatible. For notes on changes to the shared library, see Shared Library Changes for the Next Release (Draft) Installation ddcutil installation installs file /usr/lib/modules-load.d/ddcutil.conf to ensure that kernel module i2c-dev is loaded at boot time (if it is not built into the kernel). Along with the udev rules changes in release 1.4.1, this change means ddcutil should just work \"out of the box\" with no special system configuration. The most signficiant exception is that special settings may still be needed for the proprietary Nvidia driver. Performance Improvements Dynamic Sleep Adjustment The dynamic sleep algorithm has been completely rewritten to both dynamically increase the sleep-multiplier factor (as needed) and decrease the sleep multiplier factor (insofar as possible). Data is maintained across program executions in file $HOME/.cache/ddcutil/stats. Option -dsa , or one of its variants such as --enable-dsa turn it on. If both --sleep-multiplier and --dsa are specified, existing statistics are discarded and the sleep algorithm restarts calculation with the specified sleep-multiplier value. Cached Display Information Program startup can be slow because of the many sleeps required by the display detection process. This information rarely changes. Information about the detected system configuration is optionally saved in file $HOME/.cache/ddcutil/displays. Options --enable-displays-cache and --disable-displays-cache control whether this feature is enabled. System Logs Writing to the system log has been generalized and in the process simplified. Option --syslog <level> controls what is written to the system log. Recognized levels, in order of increasing verbosity, are NEVER, ERROR, WARN, NOTICE, INFO, VERBOSE, and DEBUG. This option replaces --enable-syslog , --disable-syslog , and --trace-to-syslog . Miscellanous Changes Option --sleep-multiplier 0 is now allowed. Some DisplayPort monitors have been observed to work with this value. The tests durng display detection to check for misuse of the DDC Null Message or an all zero getvcp response to indicate unsupported features have been made more robust. Option --noconfig : Do not process the configuration file. environment --verbose : Option --quickenv skips some slow tests such as use of program i2cdetect. environment --verbose : extended sysfs scan for ARM SOC devices to explore how those devices use /sys Option --trccall <function name> : Trace the specified function and its called functions. (This option reports only functions for which tracing has been enabled.) Option --hh . The number of command line options has become huge. Many are development related. Options not of interest to general users are now hidden. Option --hh exposes them, and implies option --help . Option --verbose . If specified on the command line, the options obtained from the configuration file are reported. Detailed statistics are now maintained on a per-display instead of per-thread basis. Option --per-display-stats causes the statistics reported by option --stats to include per-display statistics. Option --help . Document ELAPSED as a recognized statistics class Building configure option -enable-syslog / --disable-syslog has been removed. Command line option --syslog never disables all writes to the system log. Shared library libkmod is no longer required. Shared library libjansson is now required. Development Facilities Added termporary use options --f7, --f8, --i2, --s1, --s2, --s3, --s4, --fl1, --fl2. The current meaning of these options is reported by option --settings . Added utility command C1 for temporary use during development. Added option --enable-mock-data","title":"Preliminary Notes for the Next Release"},{"location":"next_release_notes/#preliminary-notes-for-the-next-ddcutil-release","text":"Release 2.0.0 is a major update to ddcutil , containing significant performance improvements. The version of the shared library is not backwards compatible. For notes on changes to the shared library, see Shared Library Changes for the Next Release (Draft)","title":"Preliminary Notes for the Next ddcutil Release"},{"location":"next_release_notes/#installation","text":"ddcutil installation installs file /usr/lib/modules-load.d/ddcutil.conf to ensure that kernel module i2c-dev is loaded at boot time (if it is not built into the kernel). Along with the udev rules changes in release 1.4.1, this change means ddcutil should just work \"out of the box\" with no special system configuration. The most signficiant exception is that special settings may still be needed for the proprietary Nvidia driver.","title":"Installation"},{"location":"next_release_notes/#performance-improvements","text":"Dynamic Sleep Adjustment The dynamic sleep algorithm has been completely rewritten to both dynamically increase the sleep-multiplier factor (as needed) and decrease the sleep multiplier factor (insofar as possible). Data is maintained across program executions in file $HOME/.cache/ddcutil/stats. Option -dsa , or one of its variants such as --enable-dsa turn it on. If both --sleep-multiplier and --dsa are specified, existing statistics are discarded and the sleep algorithm restarts calculation with the specified sleep-multiplier value. Cached Display Information Program startup can be slow because of the many sleeps required by the display detection process. This information rarely changes. Information about the detected system configuration is optionally saved in file $HOME/.cache/ddcutil/displays. Options --enable-displays-cache and --disable-displays-cache control whether this feature is enabled.","title":"Performance Improvements"},{"location":"next_release_notes/#system-logs","text":"Writing to the system log has been generalized and in the process simplified. Option --syslog <level> controls what is written to the system log. Recognized levels, in order of increasing verbosity, are NEVER, ERROR, WARN, NOTICE, INFO, VERBOSE, and DEBUG. This option replaces --enable-syslog , --disable-syslog , and --trace-to-syslog .","title":"System Logs"},{"location":"next_release_notes/#miscellanous-changes","text":"Option --sleep-multiplier 0 is now allowed. Some DisplayPort monitors have been observed to work with this value. The tests durng display detection to check for misuse of the DDC Null Message or an all zero getvcp response to indicate unsupported features have been made more robust. Option --noconfig : Do not process the configuration file. environment --verbose : Option --quickenv skips some slow tests such as use of program i2cdetect. environment --verbose : extended sysfs scan for ARM SOC devices to explore how those devices use /sys Option --trccall <function name> : Trace the specified function and its called functions. (This option reports only functions for which tracing has been enabled.) Option --hh . The number of command line options has become huge. Many are development related. Options not of interest to general users are now hidden. Option --hh exposes them, and implies option --help . Option --verbose . If specified on the command line, the options obtained from the configuration file are reported. Detailed statistics are now maintained on a per-display instead of per-thread basis. Option --per-display-stats causes the statistics reported by option --stats to include per-display statistics. Option --help . Document ELAPSED as a recognized statistics class","title":"Miscellanous Changes"},{"location":"next_release_notes/#building","text":"configure option -enable-syslog / --disable-syslog has been removed. Command line option --syslog never disables all writes to the system log. Shared library libkmod is no longer required. Shared library libjansson is now required.","title":"Building"},{"location":"next_release_notes/#development-facilities","text":"Added termporary use options --f7, --f8, --i2, --s1, --s2, --s3, --s4, --fl1, --fl2. The current meaning of these options is reported by option --settings . Added utility command C1 for temporary use during development. Added option --enable-mock-data","title":"Development Facilities"},{"location":"nvidia/","text":"Special Nvidia Driver Settings When using Nvidia's proprietary driver, I2C communication fails on some cards. This has been the topic of some discussion on Nvidia's web site. See, for example . While not a universal solution, setting undocumented Nvidia options sometimes enables I2C communication to work. There are several ways to set these options. The simplest, outlined in a post by user arcnmx , puts the settings in /etc/modprobe.d. Add a file whose name ends in \".conf\" to that directory, e.g. /etc/modprobe.d/nvidia_i2c.conf. The file should contain the following: options nvidia NVreg_RegistryDwords=RMUseSwI2c=0x01;RMI2cSpeed=100 After rebooting, confirm that the settings have been applied: $ grep RegistryDwords /proc/driver/nvidia/params RegistryDwords: \"RMUseSwI2c=0x01;RMI2cSpeed=100\" An earlier version of this page discussed how to set the options using a file in /etc/X11/xorg.conf.d. It has been retained for reference as it may be useful if the /etc/modprobe.d method is not suitable for your setup.","title":"Special Nvidia Driver Settings"},{"location":"nvidia/#special-nvidia-driver-settings","text":"When using Nvidia's proprietary driver, I2C communication fails on some cards. This has been the topic of some discussion on Nvidia's web site. See, for example . While not a universal solution, setting undocumented Nvidia options sometimes enables I2C communication to work. There are several ways to set these options. The simplest, outlined in a post by user arcnmx , puts the settings in /etc/modprobe.d. Add a file whose name ends in \".conf\" to that directory, e.g. /etc/modprobe.d/nvidia_i2c.conf. The file should contain the following: options nvidia NVreg_RegistryDwords=RMUseSwI2c=0x01;RMI2cSpeed=100 After rebooting, confirm that the settings have been applied: $ grep RegistryDwords /proc/driver/nvidia/params RegistryDwords: \"RMUseSwI2c=0x01;RMI2cSpeed=100\" An earlier version of this page discussed how to set the options using a file in /etc/X11/xorg.conf.d. It has been retained for reference as it may be useful if the /etc/modprobe.d method is not suitable for your setup.","title":"Special Nvidia Driver Settings"},{"location":"nvidia_old/","text":"Special Nvidia Driver Options in X11 This is a slightly edited version of an older version of page Special Nvidia Driver Settings describing how to apply the special Nvidia driver options within X11. It may be useful to those for whom adding a file to modprobe.d does not work. When using Nvidia's proprietary driver, I2C communication fails on some cards. It works on several older Nvidia cards I have, but failed with my more recent GTX660Ti. (Specfically, I2C reads of 1 or 2 bytes succeeded, but reads of 3 or more bytes failed.) Others have reported similar problems. Per this discussion , adding the following to the \"Device\" section for the Nvidia driver resolves the problem for some cards: Option \"RegistryDwords\" \"RMUseSwI2c=0x01; RMI2cSpeed=100\" A file for making this change is 90-nvidia_i2c.conf. Its exact location varies by where a distribution installs an application's data files. Commonly it can be found in directory /usr/share/ddcutil/data. Section \"Device\" Driver \"nvidia\" Identifier \"Dev0\" Option \"RegistryDwords\" \"RMUseSwI2c=0x01; RMI2cSpeed=100\" # solves problem of i2c errors with nvidia driver # per https://devtalk.nvidia.com/default/topic/572292/-solved-does-gddccontrol-work-for-anyone-here-nvidia-i2c-monitor-display-ddc/#4309293 EndSection Copy this file to /etc/X11/xorg.conf.d. You will have to restart X11 for this change to take effect. It's probably simplest to reboot. Note: This file works if there is no /etc/X11/xorg.conf file. If you do have an xorg.conf file the Identifier field will likely require modification. This does not, however, appear to be a universal solution. It does not work with some cards. In a related post on Nvidia's site , user arcnmx reported: I hadn't seen it suggested yet, so for anyone using KMS/nvidia-drm or otherwise loading the nvidia kernel module early on who can't get the xorg.conf setting to fix DDC on newer cards, I've had to add the following to modprobe.conf or modprobe.d/whatever.conf instead: options nvidia NVreg_RegistryDwords=RMUseSwI2c=0x01;RMI2cSpeed=100 To confirm that the settings are working: $ grep RegistryDwords /proc/driver/nvidia/params RegistryDwords: \"RMUseSwI2c=0x01;RMI2cSpeed=100\" This makes DDC over HDMI work with my Pascal card and fixes the \"invalid EDID\" errors at least, and also doesn't require starting X to use it, should help with wayland, etc.","title":"Setting Nvidia Driver Options Using X11"},{"location":"nvidia_old/#special-nvidia-driver-options-in-x11","text":"This is a slightly edited version of an older version of page Special Nvidia Driver Settings describing how to apply the special Nvidia driver options within X11. It may be useful to those for whom adding a file to modprobe.d does not work. When using Nvidia's proprietary driver, I2C communication fails on some cards. It works on several older Nvidia cards I have, but failed with my more recent GTX660Ti. (Specfically, I2C reads of 1 or 2 bytes succeeded, but reads of 3 or more bytes failed.) Others have reported similar problems. Per this discussion , adding the following to the \"Device\" section for the Nvidia driver resolves the problem for some cards: Option \"RegistryDwords\" \"RMUseSwI2c=0x01; RMI2cSpeed=100\" A file for making this change is 90-nvidia_i2c.conf. Its exact location varies by where a distribution installs an application's data files. Commonly it can be found in directory /usr/share/ddcutil/data. Section \"Device\" Driver \"nvidia\" Identifier \"Dev0\" Option \"RegistryDwords\" \"RMUseSwI2c=0x01; RMI2cSpeed=100\" # solves problem of i2c errors with nvidia driver # per https://devtalk.nvidia.com/default/topic/572292/-solved-does-gddccontrol-work-for-anyone-here-nvidia-i2c-monitor-display-ddc/#4309293 EndSection Copy this file to /etc/X11/xorg.conf.d. You will have to restart X11 for this change to take effect. It's probably simplest to reboot. Note: This file works if there is no /etc/X11/xorg.conf file. If you do have an xorg.conf file the Identifier field will likely require modification. This does not, however, appear to be a universal solution. It does not work with some cards. In a related post on Nvidia's site , user arcnmx reported: I hadn't seen it suggested yet, so for anyone using KMS/nvidia-drm or otherwise loading the nvidia kernel module early on who can't get the xorg.conf setting to fix DDC on newer cards, I've had to add the following to modprobe.conf or modprobe.d/whatever.conf instead: options nvidia NVreg_RegistryDwords=RMUseSwI2c=0x01;RMI2cSpeed=100 To confirm that the settings are working: $ grep RegistryDwords /proc/driver/nvidia/params RegistryDwords: \"RMUseSwI2c=0x01;RMI2cSpeed=100\" This makes DDC over HDMI work with my Pascal card and fixes the \"invalid EDID\" errors at least, and also doesn't require starting X to use it, should help with wayland, etc.","title":"Special Nvidia Driver Options in X11"},{"location":"options_main/","text":"Command Options Display Selection Feature Selection Instrumentation Performance and Tuning Instrumentation Output Level Miscellaneous Debugging","title":"Command Options"},{"location":"options_main/#command-options","text":"Display Selection Feature Selection Instrumentation Performance and Tuning Instrumentation Output Level Miscellaneous Debugging","title":"Command Options"},{"location":"other_options/","text":"Miscellaneous Options Option: --force-slave-address Per the DDC specification, ddcutil reads the EDID over an I2C bus using slave address x50, and performs DDC communication using slave address x37. Occasionally, communication cannot be established because these addresses are marked as busy. This option allows ddcutil to take control of those slave addresses, potentially impacting the other program. (Internally, ddcutil uses ioctl(I2C_SLAVE_FORCE) instead of ioctl(I2C_SLAVE) .) Option: --timeout-i2c-io Causes (most) I2C read calls to eventually time out if they do not return. This has been implemented as a POSSIBLE way to address occasional reports of ddcutil locking up, with subsequent ddcutiil calls blocking behind it. it may become the default in future releases. Options: --enable-udf , --disable-udf Enable or disable the user defined feature facility. The default is --enable-udf . Option --mccs <vcp version> Option --mccs forces the MCCS version number. It applies to commands vcpinfo , getvcp , setvcp , and dumpvcp . See documentation of the individual commands for details. Option: --version Displays ddcutil version information, then terminates execution. Option: --settings Report current option settings at the start of Option: --help Displays command help, then terminates execution.","title":"Miscellaneous Options"},{"location":"other_options/#miscellaneous-options","text":"","title":"Miscellaneous Options"},{"location":"other_options/#option-force-slave-address","text":"Per the DDC specification, ddcutil reads the EDID over an I2C bus using slave address x50, and performs DDC communication using slave address x37. Occasionally, communication cannot be established because these addresses are marked as busy. This option allows ddcutil to take control of those slave addresses, potentially impacting the other program. (Internally, ddcutil uses ioctl(I2C_SLAVE_FORCE) instead of ioctl(I2C_SLAVE) .)","title":"Option: --force-slave-address"},{"location":"other_options/#option-timeout-i2c-io","text":"Causes (most) I2C read calls to eventually time out if they do not return. This has been implemented as a POSSIBLE way to address occasional reports of ddcutil locking up, with subsequent ddcutiil calls blocking behind it. it may become the default in future releases.","title":"Option: --timeout-i2c-io"},{"location":"other_options/#options-enable-udf-disable-udf","text":"Enable or disable the user defined feature facility. The default is --enable-udf .","title":"Options: --enable-udf, --disable-udf"},{"location":"other_options/#option-mccs-vcp-version","text":"Option --mccs forces the MCCS version number. It applies to commands vcpinfo , getvcp , setvcp , and dumpvcp . See documentation of the individual commands for details.","title":"Option --mccs &lt;vcp version&gt;"},{"location":"other_options/#option-version","text":"Displays ddcutil version information, then terminates execution.","title":"Option: --version"},{"location":"other_options/#option-settings","text":"Report current option settings at the start of","title":"Option: --settings"},{"location":"other_options/#option-help","text":"Displays command help, then terminates execution.","title":"Option: --help"},{"location":"output_control_options/","text":"Output Level Options Options --terse (alt --brief ) and --versbose decrease or increase the amount of output for many commands. See documentation for the individual commands for details.","title":"Output Level Options"},{"location":"output_control_options/#output-level-options","text":"Options --terse (alt --brief ) and --versbose decrease or increase the amount of output for many commands. See documentation for the individual commands for details.","title":"Output Level Options"},{"location":"performance_options/","text":"Performance and Tuning Options Some of these options increase the risk of DDC/CI communication failures, requiring retries. Option: --sleep-multiplier The DDC/CI specification dictates that the host computer wait 40-200 ms (depending on operation) between sending a command to the monitor and reading the response. Typically ddcutil spends approximately 90% of its elapsed time sleeping. Many monitors respond properly with much shorter waits. On the other hand, there are monitors that require longer waits to avoid DDC/CI errors. Option --sleep-multiplier applies a multiplication factor to the DDC/CI specified sleep times. The multiplication factor is a floating point number. For example, --sleep-multiplier .5 causes 40 ms waits to become 20 ms, and --sleep-multiplier 4 causes 40 ms waits to beome 160 ms. Note that ddcutil may automatically increase wait times when peforming retries. Option --sleep-multiplier applies to the inital wait time. Option --sleep-multiplier can significantly speed up ddcutil execution - some monitors have been seen to operate properly with a sleep-multiplier as low as .1, Option: --async Enable parallel inspection if 3 or more monitors. See detect command . Option: --noverify Skip checking that a monitor has properly processed a DDC Set VCP Feature request packet. For details, see setvcp command . Option: --maxtries I2C is an inherently unreliable protocol, requiring retry management. There are 3 kinds of operations in which retry is possible: Write-only operation. A request packet is written to the monitor with no subsequent read. Used only to set a VCP feature value, and to execute command scs (Save Current Settings). Write-read operation. A request packet is written to the monitor, followed by a reading a response packet. Most DDC protocol operations are of this type. Multi-part operation. This is a \"meta\" operation, consisting of multiple write-read or write-only operations. Used to query monitor capabilities, and for querying and setting Table type VCP features. By default, the maximum number of tries for each operation type is: write-only operation: 4 write-read operation: 10 multi-part operation: 8 (Note that the number of retries is 1 less than the number of tries.) Option --maxtries adjusts the maximum try counts. Its argument consists of 3 comma-separated values. The following example sets the maximum try counts to 3 for write-only operations, 6 for write-read operations, and 9 for multi-part operations. --maxtries(3,6,9) A value of \"0\" or \".\" leaves the corresponding try count unchanged. The following example changes only the maximum write-read try count: --maxtries(0,7,.) The higest value to which a maximum try count can be set, is 15. Options: --enable-capabilities-cache , --disable-capabilities-cache capabilities is the most expensive ddcutil command in elapsed time. It is also the most prone to failure on marginal I2C host/monitor connections, due the large number of I2C request/response operations involved. The capabilities string is constant for any given monitor model. Therefore it makes sense to cache the value. Capabilities string caching is controlled by options --enable-capabilities-cache and --disable-capabilities-cache . The default is --enable-capabilities-cache . Option --disable-capabilities-cache may be needed for certain edge cases. The strings are saved in file ddcutil/capabilities within the XDG_CACHE_HOME directory. Normally this is $HOME/.cache/ddcutil/capabilities . This file can safely be erased if the stored capabilities string should become corrupted in some way. Additional Peformance Related Options Additional performance related options exist but are experimental. See the Release Notes .","title":"Performance and Tuning Options"},{"location":"performance_options/#performance-and-tuning-options","text":"Some of these options increase the risk of DDC/CI communication failures, requiring retries.","title":"Performance and Tuning Options"},{"location":"performance_options/#option-sleep-multiplier","text":"The DDC/CI specification dictates that the host computer wait 40-200 ms (depending on operation) between sending a command to the monitor and reading the response. Typically ddcutil spends approximately 90% of its elapsed time sleeping. Many monitors respond properly with much shorter waits. On the other hand, there are monitors that require longer waits to avoid DDC/CI errors. Option --sleep-multiplier applies a multiplication factor to the DDC/CI specified sleep times. The multiplication factor is a floating point number. For example, --sleep-multiplier .5 causes 40 ms waits to become 20 ms, and --sleep-multiplier 4 causes 40 ms waits to beome 160 ms. Note that ddcutil may automatically increase wait times when peforming retries. Option --sleep-multiplier applies to the inital wait time. Option --sleep-multiplier can significantly speed up ddcutil execution - some monitors have been seen to operate properly with a sleep-multiplier as low as .1,","title":"Option: --sleep-multiplier"},{"location":"performance_options/#option-async","text":"Enable parallel inspection if 3 or more monitors. See detect command .","title":"Option: --async"},{"location":"performance_options/#option-noverify","text":"Skip checking that a monitor has properly processed a DDC Set VCP Feature request packet. For details, see setvcp command .","title":"Option: --noverify"},{"location":"performance_options/#option-maxtries","text":"I2C is an inherently unreliable protocol, requiring retry management. There are 3 kinds of operations in which retry is possible: Write-only operation. A request packet is written to the monitor with no subsequent read. Used only to set a VCP feature value, and to execute command scs (Save Current Settings). Write-read operation. A request packet is written to the monitor, followed by a reading a response packet. Most DDC protocol operations are of this type. Multi-part operation. This is a \"meta\" operation, consisting of multiple write-read or write-only operations. Used to query monitor capabilities, and for querying and setting Table type VCP features. By default, the maximum number of tries for each operation type is: write-only operation: 4 write-read operation: 10 multi-part operation: 8 (Note that the number of retries is 1 less than the number of tries.) Option --maxtries adjusts the maximum try counts. Its argument consists of 3 comma-separated values. The following example sets the maximum try counts to 3 for write-only operations, 6 for write-read operations, and 9 for multi-part operations. --maxtries(3,6,9) A value of \"0\" or \".\" leaves the corresponding try count unchanged. The following example changes only the maximum write-read try count: --maxtries(0,7,.) The higest value to which a maximum try count can be set, is 15.","title":"Option: --maxtries"},{"location":"performance_options/#options-enable-capabilities-cache-disable-capabilities-cache","text":"capabilities is the most expensive ddcutil command in elapsed time. It is also the most prone to failure on marginal I2C host/monitor connections, due the large number of I2C request/response operations involved. The capabilities string is constant for any given monitor model. Therefore it makes sense to cache the value. Capabilities string caching is controlled by options --enable-capabilities-cache and --disable-capabilities-cache . The default is --enable-capabilities-cache . Option --disable-capabilities-cache may be needed for certain edge cases. The strings are saved in file ddcutil/capabilities within the XDG_CACHE_HOME directory. Normally this is $HOME/.cache/ddcutil/capabilities . This file can safely be erased if the stored capabilities string should become corrupted in some way.","title":"Options: --enable-capabilities-cache, --disable-capabilities-cache"},{"location":"performance_options/#additional-peformance-related-options","text":"Additional performance related options exist but are experimental. See the Release Notes .","title":"Additional Peformance Related Options"},{"location":"prior_announcements/","text":"Prior Announcements 27 September 2022 Depending on how it was built, the proprietary nvidia driver can be incompatible with ddcutil 1.3.0 and 1.3.2. The effect is that no monitors are detected. Users encountering this problem should revert to using release 1.2.2, or can use the latest development branch on github. For details, see this github issue . Thank you to github user KeyOfBlueS for extensive and expert help in reporting and diagnosing this problem. 04 September 2022 ddcutil release 1.3.2 modifies tarball creation to eliminate garbage and otherwise unneeded files. Users of release 1.3.0 need not upgrade. 05 August 2022 ddcui release 0.3.0 contains the following changes of interest to general users; CTL-Q terminates ddcui (does not apply within dialog boxes) Errors opening /dev/i2c and /dev/usb/hiddev devices are reported using a message box instead of being written to the terminal. These errors typically reflect lack of permissions (Linux error EACCESS). Optionally requiring the control key to be pressed when changing feature values now applies to all changes, not just those made using sliders. (The option is set using command line option --require-control-key or the UI Options dialog box.). Options --force-slave-address and --disable-force-slave-address , introduced in Release 0.2.1, are deprecated and no longer have any effect. For a detailed description of ddcui changes and bug fixes in this release, see ddcui Release Notes . Prebuilt packages for several Linux distributions and mmachine architectures can be found in the ususal locations . Prior announcements can be found here . 23 July 2022 ddcutil release 1.3.0 contains the following changes of interest to general users: Option --force-slave-address no longer has any effect. Driver i2c-dev provides both a low level ioctl() interface and a higher level read()/write() interface for I2C communication. ddcutil now uses the ioctl() interface (almost) exclusively. This eliminates the possbility of EBUSY errors from driver i2c-dev, which occur only when the read()/write() interface is used. Better reporting of user configuration issues at startup. Commands getvcp and vcpinfo can now take multiple features as arguments, for example ddcutil getvcp 10 12 . The sleep-suppression related options, --sleep-less , --less-sleep , --enable-sleep-suppression , and --disable-sleep-suppression no longer have any effect. For a detailed description of ddcutil changes and bug fixes, see Release Notes . Prebuilt packages for several Linux distributions and mmachine architectures can be found in the ususal locations . 14 June 2022 ddcui 0.2.1 (along with ddcutil 1.2.2) is now available in the Debain Testing distribution (Bookworm). 02 February 2022 ddcui release 0.2.1 better handles DDC communication failures resulting from conflict with other programs. Like dddcutil 1.2.2, ddcui command line option -force-slave-address allows ddcui to override the other program's claim to the display. For a detailed description of ddcui changes and bug fixes in this release, see ddcui Release Notes . 28 January 2022 ddcutil release 1.2.2 contains one set of changes of interest to general users: Handling of DDC communication failures due to conflict with other programs is improved. In particular, conflict occurs when device driver ddcci is loaded. Among the changes: If ddcutil detect fails to communicate with a monitor and Linux errno EBUSY is reported, it reports the monitor as \"Busy\" instead of \"Invalid\" and suggests the use of option --force-slave-address . Messages regarding EBUSY errors are always written to the system log. API functions ddca_enable_force_slave_address() and ddca_is_force_slave_address_enabled() have been added. For a detailed description of ddcutil changes and bug fixes, see Release Notes . 02 December 2021 ddcutil release 1.2.1 contains one change of interest to general users: Option --settings . Details of current settings are no longer reported by every command invocation when option --verbose is specified. Use option --settings to control option reporting. For a detailed description of changes and bug fixes, see Release Notes . 25 November 2021 ddcui release 0.2.0 is is now available on Github , and also from this site as a tarball . While not feature complete, this version should be useful to and usable by most people. For details, see ddcui Release Notes . 24 November 2021 ddcutil release candidate 1.2.1-rc2 is available as branch 1.2.1-rc2 on Github. For details, see the announcement on Github, file CHANGELOG.md, or the draft release notes . 05 October 2021 ddcutil release 1.2.0 contains the following changes of general interest: Command ddcutil --verbose now reports the raw EDID. Command ddcutil environment --verbose has been enhanced, primarily for remote /sys analysis. Major events are written to the system log. Most visible changes apply to the shared library. In particular: The shared library name is now libddcutil.so.4.1.0. Improved tracing. For a complete list of changes and bug fixes, see Release Notes . Prior announcements can be found here . 05 April 2021 ddcutil release 1.1.0 contains the following changes of general interest: Configuration file ddcutilrc , located on the XDG config path (normally $HOME/.config/ddcutil/ddcutilrc) is processed by both ddcutil and libddcutil . Monitor capabilities strings are cached to improve performance of the capabilities command. Partial workarounds for problems in DRM video drivers (e.g. i915, AMDGPU) when monitors are connected to a docking station. The monitor may not be detected (because no EDID is reported), or the monitor may appear as two different /dev/i2c devices. When probing /dev/i2c devices for monitors, ddcutil could put AMD Navi2 devices (e.g. RX6000 series) into an inconsistent state. This is because the driver exposes an I2C device for the SMU. Display detection is modified to avoid probing these devices. The interface exposed by shared library libddcutil is unchanged. Its SONAME remains \"libddcutil.so.4\", and the package name is libddcutil4 . For a complete list of ddcutil changes and bug fixes, see Release Notes . Prior announcements can be found here . 08 February 2021 ddcutil release 1.0.1 addresses the situation wherein a display connected through a docking station is not detected when the i915 video driver is used. (I2C support for docking station connected displays, and more generally displays using DisplayPort Multi Stream Transport. was recently implemented for i915 and amdgpu drivers in Kernel 5.10. Initial ddcutil code for this situation did not adequately work around problems in the driver implementation. 03 February 2021 ddcutil release 1.0.0 marks a milestone. It is time to regard ddcutil as having reached production status. There of course remain features to add, and the codebase warrants cleanup, but the feature set has been stable for some time. Bug reports are infrequent, and reflect unusual situations. There are two enhancements of general interest: User Defined Features , which have existed for some time, are now formally available. Option --mccs now applies to getvcp , setvcp , and dumpvcp as well as vcpinfo . The remaining changes in this release, while extensive, are likely of little interest to most users. The most notable changes are: ddcutil no longer by default checks for monitors exposing the Virtual Control Panel over USB. Such monitors have proven rare, and messages about lack of permission to read /dev/usb/hiddev devices can be be needless confusing. Command option --enable-usb will activate handling of USB connected monitors. The detect commands provides additional information about the monitors found. The capabilities command better handles malformed capabilities strings. getvcp has special handling for features x62 (audio volume), x87 (audio treble), x91 (audio bass), and x93 (audio balance). In MCCS 2.2 and 3.0, these otherwise continuous VCP features have special reserved values. Parsing setvcp command arguments was incorrect when multiple features are changed on a single setvcp command. The shared library API has minor, but not upwardly compatible, changes. The current library SONAME is libddcutil.so.4, and the library package is libddcutil4. Prior announcements can be found here . 09 July 2020 Branch master on github was out of sync with the reference tarball and prebuilt packages on launchpad , COPR , and the openSUSE Build Service . The missing changes have been pushed to the master branch. If you have already built release 0.9.9 from the github master branch, pull the changes and rebuild. 28 June 2020 ddcui release 0.1.2 is an emergency bug fix release. Combo boxes for simple Non-Continous features were empty instead of showing the currently selected value and list of allowed values. 24 June 2020 ddcutil release 0.9.9 contains two changes of general interest: A new command line option, --less-sleep eliminates many of the delays between the time that ddcutil receives a DDC response from a display and sends the next request, improving performance. Support for AMD's old proprietary fglrx driver has been dropped. The libddcutil shared libray has non-upwardly compatible changes. For details, see Shared Library Changes for Release 0.9.9 . ddcui release 0.1.1 adds additional features and has numerous changes in the \"fit and finish\" category. In particular: Command line options for starting ddcui , corresponding to settings in the Option dialogs, and (if multiple monitors) the initlal monitor selected. The Feature Selection Dialog , along with command line option --custom-feature-set , enable the user to specify the VCP features to be shown. Better handling of error conditions Better Help text ddcui release 0.1.1 requires ddcutil 0.9.9. For general information about the graphical user interface, see ddcui . For a complete list of ddcutil changes and bug fixes, see Release Notes . For ddcui changes and bug fixes, see ddcui Release Notes . Prior announcements can be found here . Lastly, this website has been extensively revised to reflect the current state of ddcutil and ddcui . Note: Prebuilt packages are now available for ddcutil 0.9.9. 06 December 2019 ddcutil release 0.9.8 contains two changes of general interest: - A new command line option, --sleep-multiplier , adjusts the time ddcutil pauses between sending a request to the monitor and reading from the monitor. - A fix for the bug that certain mice would lock up during display detection. The libddcutil shared library API has some minor extensions. For details, see Library Changes for Release 0.9.8 . Graphical user interface ddcui has reached beta status. Release 0.1.0 contains numermous improvements in the handling of particular VCP feature codes and the user interface generally. Prebuilt packages now exist for many platforms. See ddcui Overview . For a complete list of changes and bug fixes, see Release Notes . Prior announcements can be found here . 08 October 2019 ddcui alpha release 0.0.6 is now available on github . It requires the version of libddcutil provided by ddcutil release 0.9.7. 04 September 2019 ddcutil release 0.9.7 fixes the cause of a segfault during display detection if a monitor appearing to support the USB Monitor Control Class Specification , i.e. one that uses USB to communicate monitor settings, is connected to the system. If also contains some minor code cleanup. For a complete list of changes and bug fixes, see Release Notes . Prior announcements can be found here . 25 August 2019 ddcutil release 0.9.6 contains minor enhancements, bug fixes, and API changes. SONAME versioning is now enabled for libddcutil . For a complete list of changes and bug fixes, see Release Notes . Prior announcements can be found here . 24 February 2019 ddcutil release 0.9.5 contains minor enhancements, bug fixes, and API changes. Of particular note: - Support for feature x72 (gamma) has been added. - Command setvcp can now take 2 byte values (0..65535) as an argument. For a complete list of changes and bug fixes, see Release Notes . Prior announcements can be found here . ddcui release 0.0.4 reflects changes to the ddcutil API. 25 December 2018 ddcutil release 0.9.4 fixes a bug that caused the capabilities command to fail, and addresses the failure to build from source for the x32 ABI . For a complete list of changes and bug fixes, see Release Notes . Prior announcements can be found here . 26 November 2018 ddcutil release 0.9.3 reworks display detection to avoid problems encountered with certain recent displays and laptops. There have been extensive internal changes to allow for future support of user supplied definitions for manufacturer-specific features. The API has also been revised to support user supplied feature definitions (see API Changes in Release 0.9.3 ). For a complete list of changes and bug fixes, see Release Notes . Prior announcements can be found here . ddcui release 0.0.3 reflects changes to the ddcutil API. 15 September 2018 ddcui is a Qt-based graphical user interface for ddcutil . An initial alpha release is now available on github . ddcui must currently be built from source - there are no pre-built (e.g. dpkg or rpm) packages. For addtional information and rudimentary build instructions, see files README.md and BUILDING.md . 01 September 2018 Release 0.9.2 contains minor enhancements and bug fixes. For a complete list of changes and bug fixes, see Release Notes . Prior announcements can be found here . 27 May 2018 Release 0.9.1 fixes the cause of a failure that may occur on command environment --verbose when examining an extremely large log file. For a complete list of changes and bug fixes, see Release Notes . Prior announcements can be found here . 13 May 2018 Release 0.9.0 contains minor enhancements and a few very minor bug fixes. However. the C API is extensively revised (see API Changes in Release 0.9.0 ). Two enhancements will be of interest to general users: - The setvcp command now allows new values for Continuous type features to be specified as relative values, e.g. the following commands increase or decrease the value of the brightness feature by 5. $ ddcutil setvcp 10 + 5 $ ddcutil setvcp 10 - 5 Note that parsing requires that \"+\" and \"-\" be surrounded by spaces. Table type features are by default not included in most feature groups specified on getvcp , e.g. getvcp known . Features of type Table are rare. The DDC/CI spec does not provide a clean way for getvcp to determine that a table feature does not exist. As a result, getvcp typically has to exceed its retry count before giving up. (Exclusion of table features does not occur if a feature is explicitly specified by its hex code, or for feature group TABLE .) The --no-table (formerly --notable ) and -show-table options explicitly control this behavior. For a complete list of changes and bug fixes, see Release Notes . Prior announcements can be found here . 20 January 2018 Release 0.8.6 contains a few minor externally visible enhancements and bug fixes, along with non-upwardly compatible changes to the C API. Most current users will see no need to upgrade. For a complete list of changes and bug fixes, see Release Notes . Prior announcements can be found here . ddcutil is now in the repositories for the upcoming Ubuntu 18.04 release and the openSUSE Tumbleweed rolling release. 16 November 2017 Release 0.8.5 contains a large number of minor enhancements and bug fixes. Users of ddcutil on 32 bit platforms and those on the Raspberry Pi should upgrade. For a complete list of changes and bug fixes, see Release Notes . Prior announcements can be found here . 15 October 2017 Package ddcutil has been sponsored into Debian and is now included in Debian Testing . It is on track to be part of the next Debian release, which means it should eventually appear in downstream distributions such as Ubuntu. Note that only package ddcutil , containing the command line version of ddcutil , is currently in the Debian repositories. The shared library packages, including the C and Python APIs, are not yet part of Debian. 22 July 2017 Release 0.8.4 primarily contains packaging changes to meet Fedora distribution standards. For a complete list of changes and bug fixes, see Release Notes . Prior annoucnements can be found here . 17 May 2017 Release 0.8.2 contains minor enhancements, primarily to diagnostics in the environment and interrogate commands. For a complete list of changes and bug fixes, see Release Notes . Prior annoucnements can be found here . 05 May 2017 Release 0.8.1 is a bugfix release that addresses a segfault that can occur when scanning for USB connected monitors. For a complete list of changes and bug fixes, see Release Notes . Prior annoucnements can be found here . 01 May 2017 Release 0.8.0 contains new features intended to address issues with particular monitors and user environments, and to improve performance The most significant changes visible to users are: If there are multiple monitors and option --async is specified, initial monitor checks are performed in separate threads. Users with multiple monitors should see significantly better startup time. If a display is specified by its I2C bus number (option --bus ) and option --nodetect is specified, global display detection is skipped, improving performance. By default, setvcp and loadvcp now read the VCP value after it has been set, to confirm that the monitor has made the change requested. Command getvcp --terse now reports VCP settings in a form that is easily machine readable. The C API has been extensively revised. Many names have changed for consistency and clarity. (Apologies to those of you who have written applications.) For a complete list of changes and bug fixes, see Release Notes . Prior annoucnements can be found here . OBS 29 April 2017 At some time in the recent past, the files for release 0.7.3 in the OpenSUSE Build Service were corrupted with files from the test system. Symptoms of this corruption include Prefixing a VCP feature code number with \"0x\" causes a segfault, e.g. \"ddcutil setvcp 0x10 50\" Command line option \"--verify\" is recognized As of this morning, the production ddcutil project on OBS was restored to release 0.7.3. 0.7.3 05 March 2017 Release 0.7.3 is a maintenance release. There is no need to install it unless you are experiencing problems. This release introduces the following features: Command ddcutil detect --verbose shows additional information. Command ddcutil environment --verbose implements additional diagnostic tests. configure option --enable-drm controls whether DRM is used to enhance the diagnostics of command ddcutil environment --verbose . If enable-drm=yes , package libdrm-dev or libdrm-devel (depending on Linux distribution) must be installed to build ddcutil . Setting --enable-drm=no affects only diagnostic output, not normal execution. For a complete list of changes and bug fixes, see Release Notes . Prior annoucnements can be found here . 0.7.2 01 February 2017 Maintenance release. Fixes a critical bug in release 0.7.1 where insufficient privileges on a /dev/i2c-n device causes program termination. ddcutil interrogate always executes with --set-slave-address in effect Minor improvements to ddcutil environment and ddcutil interrogate output Minor improvements to ddcutil detect --verbose Add explanations for additional errno values For a complete list of changes and bug fixes, see Release Notes . Prior annoucnements can be found here . 0.7.1 27 January 2017 Release 0.7.1 is a maintenance release. There is no need to install it unless you are experiencing problems. This release introduces the following features: Command option --force-slave-address causes ddcutil to attempt to take control of slave addresses on the I2C bus even if they are in use by another driver. This may aid in certain situations where monitors on an I2C bus are not properly detected. See Instrumentation and Tuning ) For a complete list of changes and bug fixes, see Release Notes . Prior annoucnements can be found here . 0.7.0 03 January 2017 Release 0.7 introduces the following features: C API, exposed by shared library libddcutil . See API . A new command line option --mfg , allows for the 3 character manufaturer id found in the EDID to used as part of monitor selection. The monitor feature and capabilities portion of interrogate is also exposed by the new probe command which explores the capabilities string and features found on a single monitor. For details, see Release Notes . Prior annoucnements can be found here . openSUSE Build Service packaging of release 0.7.0 is complete. Owing to Launchpad constraints, the PPA will not be correct until ddcutil 's release is incremented, i.e. until release 0.7.1 0.6.1 21 November 2016 The most recent release of ddcutil is 0.6.1. This is a maintenance release and need not be installed unless you are experiencing problems. For details, see Release Notes . 0.6.0 01 October 2016 As of release 0.6, the name of this program changed from ddctool to ddcutil to avoid confusion with a commerical datacenter program also named ddctool. The following are affected: |Object |Old name | New Name | Comments| |-------------------|--------------------------------------|--------------------------------------| |Repository URL |https://github.com/rockowitz/ddctool.git | https://github.com/rockowitz/ddcutil.git | Old name still works | |Web site URL | http://www.ddctool.com | http://www.ddcutil.com | Old name still works | |Primary executable | ddctool | ddcutil | |Shared library | libddctool.so | libddcutil.so |","title":"Announcement History"},{"location":"prior_announcements/#prior-announcements","text":"27 September 2022 Depending on how it was built, the proprietary nvidia driver can be incompatible with ddcutil 1.3.0 and 1.3.2. The effect is that no monitors are detected. Users encountering this problem should revert to using release 1.2.2, or can use the latest development branch on github. For details, see this github issue . Thank you to github user KeyOfBlueS for extensive and expert help in reporting and diagnosing this problem. 04 September 2022 ddcutil release 1.3.2 modifies tarball creation to eliminate garbage and otherwise unneeded files. Users of release 1.3.0 need not upgrade. 05 August 2022 ddcui release 0.3.0 contains the following changes of interest to general users; CTL-Q terminates ddcui (does not apply within dialog boxes) Errors opening /dev/i2c and /dev/usb/hiddev devices are reported using a message box instead of being written to the terminal. These errors typically reflect lack of permissions (Linux error EACCESS). Optionally requiring the control key to be pressed when changing feature values now applies to all changes, not just those made using sliders. (The option is set using command line option --require-control-key or the UI Options dialog box.). Options --force-slave-address and --disable-force-slave-address , introduced in Release 0.2.1, are deprecated and no longer have any effect. For a detailed description of ddcui changes and bug fixes in this release, see ddcui Release Notes . Prebuilt packages for several Linux distributions and mmachine architectures can be found in the ususal locations . Prior announcements can be found here . 23 July 2022 ddcutil release 1.3.0 contains the following changes of interest to general users: Option --force-slave-address no longer has any effect. Driver i2c-dev provides both a low level ioctl() interface and a higher level read()/write() interface for I2C communication. ddcutil now uses the ioctl() interface (almost) exclusively. This eliminates the possbility of EBUSY errors from driver i2c-dev, which occur only when the read()/write() interface is used. Better reporting of user configuration issues at startup. Commands getvcp and vcpinfo can now take multiple features as arguments, for example ddcutil getvcp 10 12 . The sleep-suppression related options, --sleep-less , --less-sleep , --enable-sleep-suppression , and --disable-sleep-suppression no longer have any effect. For a detailed description of ddcutil changes and bug fixes, see Release Notes . Prebuilt packages for several Linux distributions and mmachine architectures can be found in the ususal locations . 14 June 2022 ddcui 0.2.1 (along with ddcutil 1.2.2) is now available in the Debain Testing distribution (Bookworm). 02 February 2022 ddcui release 0.2.1 better handles DDC communication failures resulting from conflict with other programs. Like dddcutil 1.2.2, ddcui command line option -force-slave-address allows ddcui to override the other program's claim to the display. For a detailed description of ddcui changes and bug fixes in this release, see ddcui Release Notes . 28 January 2022 ddcutil release 1.2.2 contains one set of changes of interest to general users: Handling of DDC communication failures due to conflict with other programs is improved. In particular, conflict occurs when device driver ddcci is loaded. Among the changes: If ddcutil detect fails to communicate with a monitor and Linux errno EBUSY is reported, it reports the monitor as \"Busy\" instead of \"Invalid\" and suggests the use of option --force-slave-address . Messages regarding EBUSY errors are always written to the system log. API functions ddca_enable_force_slave_address() and ddca_is_force_slave_address_enabled() have been added. For a detailed description of ddcutil changes and bug fixes, see Release Notes . 02 December 2021 ddcutil release 1.2.1 contains one change of interest to general users: Option --settings . Details of current settings are no longer reported by every command invocation when option --verbose is specified. Use option --settings to control option reporting. For a detailed description of changes and bug fixes, see Release Notes . 25 November 2021 ddcui release 0.2.0 is is now available on Github , and also from this site as a tarball . While not feature complete, this version should be useful to and usable by most people. For details, see ddcui Release Notes . 24 November 2021 ddcutil release candidate 1.2.1-rc2 is available as branch 1.2.1-rc2 on Github. For details, see the announcement on Github, file CHANGELOG.md, or the draft release notes . 05 October 2021 ddcutil release 1.2.0 contains the following changes of general interest: Command ddcutil --verbose now reports the raw EDID. Command ddcutil environment --verbose has been enhanced, primarily for remote /sys analysis. Major events are written to the system log. Most visible changes apply to the shared library. In particular: The shared library name is now libddcutil.so.4.1.0. Improved tracing. For a complete list of changes and bug fixes, see Release Notes . Prior announcements can be found here . 05 April 2021 ddcutil release 1.1.0 contains the following changes of general interest: Configuration file ddcutilrc , located on the XDG config path (normally $HOME/.config/ddcutil/ddcutilrc) is processed by both ddcutil and libddcutil . Monitor capabilities strings are cached to improve performance of the capabilities command. Partial workarounds for problems in DRM video drivers (e.g. i915, AMDGPU) when monitors are connected to a docking station. The monitor may not be detected (because no EDID is reported), or the monitor may appear as two different /dev/i2c devices. When probing /dev/i2c devices for monitors, ddcutil could put AMD Navi2 devices (e.g. RX6000 series) into an inconsistent state. This is because the driver exposes an I2C device for the SMU. Display detection is modified to avoid probing these devices. The interface exposed by shared library libddcutil is unchanged. Its SONAME remains \"libddcutil.so.4\", and the package name is libddcutil4 . For a complete list of ddcutil changes and bug fixes, see Release Notes . Prior announcements can be found here . 08 February 2021 ddcutil release 1.0.1 addresses the situation wherein a display connected through a docking station is not detected when the i915 video driver is used. (I2C support for docking station connected displays, and more generally displays using DisplayPort Multi Stream Transport. was recently implemented for i915 and amdgpu drivers in Kernel 5.10. Initial ddcutil code for this situation did not adequately work around problems in the driver implementation. 03 February 2021 ddcutil release 1.0.0 marks a milestone. It is time to regard ddcutil as having reached production status. There of course remain features to add, and the codebase warrants cleanup, but the feature set has been stable for some time. Bug reports are infrequent, and reflect unusual situations. There are two enhancements of general interest: User Defined Features , which have existed for some time, are now formally available. Option --mccs now applies to getvcp , setvcp , and dumpvcp as well as vcpinfo . The remaining changes in this release, while extensive, are likely of little interest to most users. The most notable changes are: ddcutil no longer by default checks for monitors exposing the Virtual Control Panel over USB. Such monitors have proven rare, and messages about lack of permission to read /dev/usb/hiddev devices can be be needless confusing. Command option --enable-usb will activate handling of USB connected monitors. The detect commands provides additional information about the monitors found. The capabilities command better handles malformed capabilities strings. getvcp has special handling for features x62 (audio volume), x87 (audio treble), x91 (audio bass), and x93 (audio balance). In MCCS 2.2 and 3.0, these otherwise continuous VCP features have special reserved values. Parsing setvcp command arguments was incorrect when multiple features are changed on a single setvcp command. The shared library API has minor, but not upwardly compatible, changes. The current library SONAME is libddcutil.so.4, and the library package is libddcutil4. Prior announcements can be found here . 09 July 2020 Branch master on github was out of sync with the reference tarball and prebuilt packages on launchpad , COPR , and the openSUSE Build Service . The missing changes have been pushed to the master branch. If you have already built release 0.9.9 from the github master branch, pull the changes and rebuild. 28 June 2020 ddcui release 0.1.2 is an emergency bug fix release. Combo boxes for simple Non-Continous features were empty instead of showing the currently selected value and list of allowed values. 24 June 2020 ddcutil release 0.9.9 contains two changes of general interest: A new command line option, --less-sleep eliminates many of the delays between the time that ddcutil receives a DDC response from a display and sends the next request, improving performance. Support for AMD's old proprietary fglrx driver has been dropped. The libddcutil shared libray has non-upwardly compatible changes. For details, see Shared Library Changes for Release 0.9.9 . ddcui release 0.1.1 adds additional features and has numerous changes in the \"fit and finish\" category. In particular: Command line options for starting ddcui , corresponding to settings in the Option dialogs, and (if multiple monitors) the initlal monitor selected. The Feature Selection Dialog , along with command line option --custom-feature-set , enable the user to specify the VCP features to be shown. Better handling of error conditions Better Help text ddcui release 0.1.1 requires ddcutil 0.9.9. For general information about the graphical user interface, see ddcui . For a complete list of ddcutil changes and bug fixes, see Release Notes . For ddcui changes and bug fixes, see ddcui Release Notes . Prior announcements can be found here . Lastly, this website has been extensively revised to reflect the current state of ddcutil and ddcui . Note: Prebuilt packages are now available for ddcutil 0.9.9. 06 December 2019 ddcutil release 0.9.8 contains two changes of general interest: - A new command line option, --sleep-multiplier , adjusts the time ddcutil pauses between sending a request to the monitor and reading from the monitor. - A fix for the bug that certain mice would lock up during display detection. The libddcutil shared library API has some minor extensions. For details, see Library Changes for Release 0.9.8 . Graphical user interface ddcui has reached beta status. Release 0.1.0 contains numermous improvements in the handling of particular VCP feature codes and the user interface generally. Prebuilt packages now exist for many platforms. See ddcui Overview . For a complete list of changes and bug fixes, see Release Notes . Prior announcements can be found here . 08 October 2019 ddcui alpha release 0.0.6 is now available on github . It requires the version of libddcutil provided by ddcutil release 0.9.7. 04 September 2019 ddcutil release 0.9.7 fixes the cause of a segfault during display detection if a monitor appearing to support the USB Monitor Control Class Specification , i.e. one that uses USB to communicate monitor settings, is connected to the system. If also contains some minor code cleanup. For a complete list of changes and bug fixes, see Release Notes . Prior announcements can be found here . 25 August 2019 ddcutil release 0.9.6 contains minor enhancements, bug fixes, and API changes. SONAME versioning is now enabled for libddcutil . For a complete list of changes and bug fixes, see Release Notes . Prior announcements can be found here . 24 February 2019 ddcutil release 0.9.5 contains minor enhancements, bug fixes, and API changes. Of particular note: - Support for feature x72 (gamma) has been added. - Command setvcp can now take 2 byte values (0..65535) as an argument. For a complete list of changes and bug fixes, see Release Notes . Prior announcements can be found here . ddcui release 0.0.4 reflects changes to the ddcutil API. 25 December 2018 ddcutil release 0.9.4 fixes a bug that caused the capabilities command to fail, and addresses the failure to build from source for the x32 ABI . For a complete list of changes and bug fixes, see Release Notes . Prior announcements can be found here . 26 November 2018 ddcutil release 0.9.3 reworks display detection to avoid problems encountered with certain recent displays and laptops. There have been extensive internal changes to allow for future support of user supplied definitions for manufacturer-specific features. The API has also been revised to support user supplied feature definitions (see API Changes in Release 0.9.3 ). For a complete list of changes and bug fixes, see Release Notes . Prior announcements can be found here . ddcui release 0.0.3 reflects changes to the ddcutil API. 15 September 2018 ddcui is a Qt-based graphical user interface for ddcutil . An initial alpha release is now available on github . ddcui must currently be built from source - there are no pre-built (e.g. dpkg or rpm) packages. For addtional information and rudimentary build instructions, see files README.md and BUILDING.md . 01 September 2018 Release 0.9.2 contains minor enhancements and bug fixes. For a complete list of changes and bug fixes, see Release Notes . Prior announcements can be found here . 27 May 2018 Release 0.9.1 fixes the cause of a failure that may occur on command environment --verbose when examining an extremely large log file. For a complete list of changes and bug fixes, see Release Notes . Prior announcements can be found here . 13 May 2018 Release 0.9.0 contains minor enhancements and a few very minor bug fixes. However. the C API is extensively revised (see API Changes in Release 0.9.0 ). Two enhancements will be of interest to general users: - The setvcp command now allows new values for Continuous type features to be specified as relative values, e.g. the following commands increase or decrease the value of the brightness feature by 5. $ ddcutil setvcp 10 + 5 $ ddcutil setvcp 10 - 5 Note that parsing requires that \"+\" and \"-\" be surrounded by spaces. Table type features are by default not included in most feature groups specified on getvcp , e.g. getvcp known . Features of type Table are rare. The DDC/CI spec does not provide a clean way for getvcp to determine that a table feature does not exist. As a result, getvcp typically has to exceed its retry count before giving up. (Exclusion of table features does not occur if a feature is explicitly specified by its hex code, or for feature group TABLE .) The --no-table (formerly --notable ) and -show-table options explicitly control this behavior. For a complete list of changes and bug fixes, see Release Notes . Prior announcements can be found here . 20 January 2018 Release 0.8.6 contains a few minor externally visible enhancements and bug fixes, along with non-upwardly compatible changes to the C API. Most current users will see no need to upgrade. For a complete list of changes and bug fixes, see Release Notes . Prior announcements can be found here . ddcutil is now in the repositories for the upcoming Ubuntu 18.04 release and the openSUSE Tumbleweed rolling release. 16 November 2017 Release 0.8.5 contains a large number of minor enhancements and bug fixes. Users of ddcutil on 32 bit platforms and those on the Raspberry Pi should upgrade. For a complete list of changes and bug fixes, see Release Notes . Prior announcements can be found here . 15 October 2017 Package ddcutil has been sponsored into Debian and is now included in Debian Testing . It is on track to be part of the next Debian release, which means it should eventually appear in downstream distributions such as Ubuntu. Note that only package ddcutil , containing the command line version of ddcutil , is currently in the Debian repositories. The shared library packages, including the C and Python APIs, are not yet part of Debian. 22 July 2017 Release 0.8.4 primarily contains packaging changes to meet Fedora distribution standards. For a complete list of changes and bug fixes, see Release Notes . Prior annoucnements can be found here . 17 May 2017 Release 0.8.2 contains minor enhancements, primarily to diagnostics in the environment and interrogate commands. For a complete list of changes and bug fixes, see Release Notes . Prior annoucnements can be found here . 05 May 2017 Release 0.8.1 is a bugfix release that addresses a segfault that can occur when scanning for USB connected monitors. For a complete list of changes and bug fixes, see Release Notes . Prior annoucnements can be found here . 01 May 2017 Release 0.8.0 contains new features intended to address issues with particular monitors and user environments, and to improve performance The most significant changes visible to users are: If there are multiple monitors and option --async is specified, initial monitor checks are performed in separate threads. Users with multiple monitors should see significantly better startup time. If a display is specified by its I2C bus number (option --bus ) and option --nodetect is specified, global display detection is skipped, improving performance. By default, setvcp and loadvcp now read the VCP value after it has been set, to confirm that the monitor has made the change requested. Command getvcp --terse now reports VCP settings in a form that is easily machine readable. The C API has been extensively revised. Many names have changed for consistency and clarity. (Apologies to those of you who have written applications.) For a complete list of changes and bug fixes, see Release Notes . Prior annoucnements can be found here .","title":"Prior Announcements"},{"location":"prior_announcements/#obs","text":"29 April 2017 At some time in the recent past, the files for release 0.7.3 in the OpenSUSE Build Service were corrupted with files from the test system. Symptoms of this corruption include Prefixing a VCP feature code number with \"0x\" causes a segfault, e.g. \"ddcutil setvcp 0x10 50\" Command line option \"--verify\" is recognized As of this morning, the production ddcutil project on OBS was restored to release 0.7.3.","title":"OBS"},{"location":"prior_announcements/#073","text":"05 March 2017 Release 0.7.3 is a maintenance release. There is no need to install it unless you are experiencing problems. This release introduces the following features: Command ddcutil detect --verbose shows additional information. Command ddcutil environment --verbose implements additional diagnostic tests. configure option --enable-drm controls whether DRM is used to enhance the diagnostics of command ddcutil environment --verbose . If enable-drm=yes , package libdrm-dev or libdrm-devel (depending on Linux distribution) must be installed to build ddcutil . Setting --enable-drm=no affects only diagnostic output, not normal execution. For a complete list of changes and bug fixes, see Release Notes . Prior annoucnements can be found here .","title":"0.7.3"},{"location":"prior_announcements/#072","text":"01 February 2017 Maintenance release. Fixes a critical bug in release 0.7.1 where insufficient privileges on a /dev/i2c-n device causes program termination. ddcutil interrogate always executes with --set-slave-address in effect Minor improvements to ddcutil environment and ddcutil interrogate output Minor improvements to ddcutil detect --verbose Add explanations for additional errno values For a complete list of changes and bug fixes, see Release Notes . Prior annoucnements can be found here .","title":"0.7.2"},{"location":"prior_announcements/#071","text":"27 January 2017 Release 0.7.1 is a maintenance release. There is no need to install it unless you are experiencing problems. This release introduces the following features: Command option --force-slave-address causes ddcutil to attempt to take control of slave addresses on the I2C bus even if they are in use by another driver. This may aid in certain situations where monitors on an I2C bus are not properly detected. See Instrumentation and Tuning ) For a complete list of changes and bug fixes, see Release Notes . Prior annoucnements can be found here .","title":"0.7.1"},{"location":"prior_announcements/#070","text":"03 January 2017 Release 0.7 introduces the following features: C API, exposed by shared library libddcutil . See API . A new command line option --mfg , allows for the 3 character manufaturer id found in the EDID to used as part of monitor selection. The monitor feature and capabilities portion of interrogate is also exposed by the new probe command which explores the capabilities string and features found on a single monitor. For details, see Release Notes . Prior annoucnements can be found here . openSUSE Build Service packaging of release 0.7.0 is complete. Owing to Launchpad constraints, the PPA will not be correct until ddcutil 's release is incremented, i.e. until release 0.7.1","title":"0.7.0"},{"location":"prior_announcements/#061","text":"21 November 2016 The most recent release of ddcutil is 0.6.1. This is a maintenance release and need not be installed unless you are experiencing problems. For details, see Release Notes .","title":"0.6.1"},{"location":"prior_announcements/#060","text":"01 October 2016 As of release 0.6, the name of this program changed from ddctool to ddcutil to avoid confusion with a commerical datacenter program also named ddctool. The following are affected: |Object |Old name | New Name | Comments| |-------------------|--------------------------------------|--------------------------------------| |Repository URL |https://github.com/rockowitz/ddctool.git | https://github.com/rockowitz/ddcutil.git | Old name still works | |Web site URL | http://www.ddctool.com | http://www.ddcutil.com | Old name still works | |Primary executable | ddctool | ddcutil | |Shared library | libddctool.so | libddcutil.so |","title":"0.6.0"},{"location":"quirks/","text":"Notes on Particular Configurations This page contains notes on some particular configuration issues that have been reported by users. They are too specific to put into the FAQ, but may be helpful to users trying to figure out why ddcutil does not work properly on a particular combination of computer, docking station, video card, driver, and monitor. Problem: I2C communication not working using a DisplayPort output and DP to DVI (or HDMI) adapter. Does work with DP to VGA adapter. Radeon driver. RX 480 video card. Solution: The radeon hw_i2c parm was set to 1 in /etc/modprobe.d/radeon.conf. The default is 0. Setting the value back to 0 solved the problem. Note that parm can also be specified as a boot option, radeon.hw_i2c=0. (Reported by user sergio.)","title":"Notes on Particular Configurations"},{"location":"quirks/#notes-on-particular-configurations","text":"This page contains notes on some particular configuration issues that have been reported by users. They are too specific to put into the FAQ, but may be helpful to users trying to figure out why ddcutil does not work properly on a particular combination of computer, docking station, video card, driver, and monitor. Problem: I2C communication not working using a DisplayPort output and DP to DVI (or HDMI) adapter. Does work with DP to VGA adapter. Radeon driver. RX 480 video card. Solution: The radeon hw_i2c parm was set to 1 in /etc/modprobe.d/radeon.conf. The default is 0. Setting the value back to 0 solved the problem. Note that parm can also be specified as a boot option, radeon.hw_i2c=0. (Reported by user sergio.)","title":"Notes on Particular Configurations"},{"location":"raspberry/","text":"Raspberry Pi Raspberry Pi 4 As of firmware 5.10, the HDMI interface on the Raspberry Pi 4 supports I2C. The following steps will enable ddcutil . Ensure you are at least on firmware 5.10, which is now mainstream. If necessary, execute: $ sudo apt update && sudo apt upgrade In /boot/config/txt, look for the [Pi4] section and replace dtoverlay=vc4-fkms-v3d with dtoverlay=vc4-kms-v3d In /etc/modules, add i2c_dev Reboot If you have not yet installed ddcutil: $ sudo apt install ddcutil The I2C buses for the two HDMI ports are normally /dev/i2c-11 and /dev/i2c-12. However, the bus names will be /dev/i2c-12 and /dev/i2c-13 if dtparam=i2c_vc_on is also present in config.txt. Thank you Robert Alexa for updating the status of ddcutil on the Pi 4 and providing the above instructions. For a long thread on the problem of I2C support on the Pi 4, see Raspberry Pi issue #3152 Raspberry Pi 3 The following instructions for installing ddcutil on the Raspberry Pi are a distillation of user feedback, my own experiences with a Raspberry Pi 3 Model B, and discussions on the Web. ddcutil is known to work on both Raspberry Pi 3 Model B and Raspberry Pi 2. It has been tested with the following distributions: Raspbian (Release 2017-09-07) Ubuntu 16.04 Fedora 26 openSUSE Tumbleweed with kernel 4.11.13 At least on The Raspberry Pi 2 or 3, the I2C bus for the HDMI connection is /dev/i2c-2. To enable it, the following line is required in the config.txt file: dtparam=i2c2_iknowwhatimdoing Alternatively, the experimental OpenGL vc4-kms-v3d driver enables /dev/i2c-2 automatically. In that case, the above i2c2_iknowwhatimdoing setting is not needed, though this may possibly change: dtoverlay=vc4-kms-v3d Also, ensure that i2c_dev is listed in /etc/modules, /etc/modules.conf, or a file in /etc/modules-load.d, as appropriate for your system. Prebuilt ddcutil packages for the Raspberry Pi are available for many distributions. See Repology for pointers. If there is no prebuilt version for your environment, or the prebuilt version is out of date, ddcutil can be built from source. Background Enabling /dev/i2c-2 requires the peculiar dtpararm statement described above, instead of the more expected: # Won't work! dtparam=i2c2 The parameter name was chosen as a caution. From the commit that added the option: The third I2C bus (I2C2) is normally reserved for HDMI use. Careless use of this bus can break an attached display - use with caution. It is recommended to disable accesses by VideoCore by setting hdmi_ignore_edid=1 or hdmi_edid_file=1 in config.txt. The interface is disabled by default - enable using the i2c2_iknowwhatimdoing DT parameter. The issue appears to be that application access to /dev/i2c-2 from the CPU is independent of, and so can conflict with, video driver access via the GPU (at least with the default driver). From an online comment : Yes, but the GPU considers itself to be the sole user of the BSC2 peripheral. Poking the i2c from the ARM CPU (via linux driver) will likely work, but beware if the GPU tries to access the same peripheral then bad things will happen. . As long as you stay away from hotplugging HDMI, or tvservice commands (or anything likely to use tvservice) then the GPU is unlikely cause any traffic on BSC2. As a practical matter, this does not appear to be an issue. Concerns have also been expressed about 3.3v vs 5v voltage incompatibility on the I2C bus, since the HDMI spec is 5v. However, as I read the I2C Specification any recent I2C implementation should be able to adapt to voltages up to 5.5 volt. Again, I have not experienced a problem in this regard.","title":"Raspberry Pi"},{"location":"raspberry/#raspberry-pi","text":"","title":"Raspberry Pi"},{"location":"raspberry/#raspberry-pi-4","text":"As of firmware 5.10, the HDMI interface on the Raspberry Pi 4 supports I2C. The following steps will enable ddcutil . Ensure you are at least on firmware 5.10, which is now mainstream. If necessary, execute: $ sudo apt update && sudo apt upgrade In /boot/config/txt, look for the [Pi4] section and replace dtoverlay=vc4-fkms-v3d with dtoverlay=vc4-kms-v3d In /etc/modules, add i2c_dev Reboot If you have not yet installed ddcutil: $ sudo apt install ddcutil The I2C buses for the two HDMI ports are normally /dev/i2c-11 and /dev/i2c-12. However, the bus names will be /dev/i2c-12 and /dev/i2c-13 if dtparam=i2c_vc_on is also present in config.txt. Thank you Robert Alexa for updating the status of ddcutil on the Pi 4 and providing the above instructions. For a long thread on the problem of I2C support on the Pi 4, see Raspberry Pi issue #3152","title":"Raspberry Pi 4"},{"location":"raspberry/#raspberry-pi-3","text":"The following instructions for installing ddcutil on the Raspberry Pi are a distillation of user feedback, my own experiences with a Raspberry Pi 3 Model B, and discussions on the Web. ddcutil is known to work on both Raspberry Pi 3 Model B and Raspberry Pi 2. It has been tested with the following distributions: Raspbian (Release 2017-09-07) Ubuntu 16.04 Fedora 26 openSUSE Tumbleweed with kernel 4.11.13 At least on The Raspberry Pi 2 or 3, the I2C bus for the HDMI connection is /dev/i2c-2. To enable it, the following line is required in the config.txt file: dtparam=i2c2_iknowwhatimdoing Alternatively, the experimental OpenGL vc4-kms-v3d driver enables /dev/i2c-2 automatically. In that case, the above i2c2_iknowwhatimdoing setting is not needed, though this may possibly change: dtoverlay=vc4-kms-v3d Also, ensure that i2c_dev is listed in /etc/modules, /etc/modules.conf, or a file in /etc/modules-load.d, as appropriate for your system. Prebuilt ddcutil packages for the Raspberry Pi are available for many distributions. See Repology for pointers. If there is no prebuilt version for your environment, or the prebuilt version is out of date, ddcutil can be built from source.","title":"Raspberry Pi 3"},{"location":"raspberry/#background","text":"Enabling /dev/i2c-2 requires the peculiar dtpararm statement described above, instead of the more expected: # Won't work! dtparam=i2c2 The parameter name was chosen as a caution. From the commit that added the option: The third I2C bus (I2C2) is normally reserved for HDMI use. Careless use of this bus can break an attached display - use with caution. It is recommended to disable accesses by VideoCore by setting hdmi_ignore_edid=1 or hdmi_edid_file=1 in config.txt. The interface is disabled by default - enable using the i2c2_iknowwhatimdoing DT parameter. The issue appears to be that application access to /dev/i2c-2 from the CPU is independent of, and so can conflict with, video driver access via the GPU (at least with the default driver). From an online comment : Yes, but the GPU considers itself to be the sole user of the BSC2 peripheral. Poking the i2c from the ARM CPU (via linux driver) will likely work, but beware if the GPU tries to access the same peripheral then bad things will happen. . As long as you stay away from hotplugging HDMI, or tvservice commands (or anything likely to use tvservice) then the GPU is unlikely cause any traffic on BSC2. As a practical matter, this does not appear to be an issue. Concerns have also been expressed about 3.3v vs 5v voltage incompatibility on the I2C bus, since the HDMI spec is 5v. However, as I read the I2C Specification any recent I2C implementation should be able to adapt to voltages up to 5.5 volt. Again, I have not experienced a problem in this regard.","title":"Background"},{"location":"release_notes/","text":"Release Notes For ddcui release notes, see ddcui Release Notes For detailed notes about libddcutil changes, see Shared Library Release Notes . For notes on the release currently in development, see Preliminary Notes for the Next ddcutil Release . 1.4.1 16 January 2023 Release 1.4.1 fixes a critical bug in release 1.4.0 affecting both command line program ddcutil and shared library libddcutil . The default sleep-multiplier value was 0 instead of 1. As a result, commands that did not have an explcit --sleep-multiplier option would fail. All users of release 1.4.0 should upgrade. Thank you github users copysiper (Oleg Tsvetkov) and fionnb for your help in quickly identifying and resolving this bug. 1.4.0 13 January 2023 Nvidia Proprietary Driver Workaround Release 1.3.0 simplified coding by exclusively using the ioctl() interface in driver i2c-dev as opposed to the write()/read() file io interface. This had the additional benefit of making option --force-slave-address irrelevant. Unfortunately, this change exposed an error in how the proprietary Nvidia driver is coded. Because of this error, depending on the version of header file i2c.h used when the driver is built, all reads and writes using ioctl() fail. Therefore, the ability to use the write()/read() intead of ioctl() for writing and reading has been restored. By default, the ioctl interface is used for all drivers. The initial IO mechanism used can be forced by new options --use-file-io and --use-ioctl-io , but these options are really only for testing purposes. ddcutil will revert to using the file io interface if the Nvidia error is detected using the ioctl interface. There should be no benefit to using the file io interface with other than the Nvidia driver. Note, however, that when using the file io interface, option --force-slave-address is once again relevant for handling EBUSY errors. I2C Device Permissions Simplified Until now, the recommended way give-non root users access to the I2C devices is as outlined on the existing I2C Device Permissions page. In short, all /dev/i2c devices are assigned to group i2c, and have read/write access to those devices. This happens automatically in ddcutil packages for Debian and derived distributions such as Ubuntu, because package ddcutil depends on package i2c-tools. All that remains is for ddcutil users to be added to group i2c. Release 1.4.0 simplifies permissions by adding a udev rule that uses the uaccess tag to give the logged on user read/write access to all /dev/i2c devices associated with video adapters. (See issue 275 ). Installing package ddcutil installs file /usr/lib/udev/rules.d/60-ddcutil.rules (or /usr/local/lib/udev/rules.d/60-ddcutil.rules). If building from source without actually installing ddcutil, you can copy file data/usr/lib/udev/rules.d/60-ddcutil.rules to directory /etc/udev/rules.d. Thank you to github user digitaltrails (Michael Hamilton) for suggesting this change. libddcutil Changes The ABI is unchanged from release 1.3.0. The full shared library name is libddcutil.4.3.0. ddca_set_default_sleep_multiplier_value() , ddca_set_sleep_multiplier_value() : Accept 0 as a valid argument. ddca_enable_force_slave_address() . This function was made a NO-OP in release 1.3.0. It is once again has effect. For details on libddcutil changes, see Shared Library Changes for Release 1.4.0 . Building ddcutil New configure options: --enable-syslog/--disable-syslog control whether messages are written to the system log, which can pose problems if executing in a container. The default is --enable-syslog . Compiler option -WError is only used when building a development version of ddcutil, e.g. 1.4.0-dev. If -WError is specified, compilation can fail on a system other than the development system, having different compiler warnings enabled. configure.ac: Only invoke deprecated macro AC_PROG_CC_99 if autoconf version < 2.70 Suppress sleeps Option --sleep-multiplier and API functions ddca_set_default_sleep_multiplier_value() and ddca_set_sleep_multplier_value() now accept 0 as an argument, which disables sleeps. This is intended for calling programs that wish to control sleep time themselves. Multiple monitors having the same EDID It is rare, but possible, to have multiple monitors with identical EDIDs. For example, the ASUS PG329Q has neither a character or a binay serial number in its EDID, and a user had a pair of monitors built in the same week, so the EDIDs were identical. If multiple monitors with identical EDIDs are used with the nvidia proprietary driver, the DRM connector name cannot be reliably determined. Command detect issues a warning in this situation. Miscellaneous Command environment --verbose : Report the build options in effect. The ddcutil command parser reports an error if a display selection option (e.g. --bus , --model ) is given on a command to which it does not apply. Handle /dev/i2c device names with a double hyphen, e.g. /dev/i2c--3. libddcutil: Better handling of configuration file errors, do not abort. See github issue #289 . Write additional error and information messages to the system log Command detect : Eliminate message \"Is DDC/CI enabled in the monitor's on-screen display?\" It's rarely the problem. Command detect --verbose : For EDID version 1.4, correct the interpretation of the digital display type bits, e.g. \"RGB 4:4:4\". Fix miscellaneous segfaults 1.3.2 04 September 2022 ddcutil release 1.3.2 modifies tarball creation to eliminate garbage and otherwise unneeded files. Users of release 1.3.0 need not upgrade. 1.3.0 23 July 2022 Brickable Monitors There have been a handful of reports of monitors for which setting a feature value, most commonly in the manufacturer reserved range, puts the monitor into some difficult to recover state. A warning is issued at startup for those monitors. Currently the only monitor in the warning list is Xaomi model \"Mi Monitor\". Device Busy (EBUSY) Errors Driver i2c-dev provides both a low level ioctl() interface and a higher level read()/write() interface for I2C communication. ddcutil now uses the ioctl() interface (almost) exclusively. This eliminates the possbility of EBUSY errors from driver i2c-dev, which occur only when the read()/write() interface is used. As a result, option -force-slave-address no longer has any effect. In principle, EBUSY errors are still possible from within individual video drivers invoked by i2c-dev, but this has never been observed. Better Report User Configuration Issues More user friendly messages at startup regarding /dev/i2c buses that cannont be opened. If the problem is inadequate permissions (EACCES), the user is directed to the web site . Report at startup if required device driver i2c-dev is not built into the kernel and has not been loaded. Command detect Option --verbose produces addtional information: The product code is reported in hex as well as decimal The EDID source field is set to I2C in the normal case where the EDID is read directly from slave address X50. Alternative values include USB , X11 , and SYSFS . Commands getvcp , vcpinfo Allow specification of multiple feature codes, for example ddcutil getvcp 10 12 , ddcutil vcpinfo 14 16 18 1a Command environment Scanning of /sys by option --verbose has been improved. Better handle malformed EDIDs Trailing blanks on model and serial number are stripped. This affects commands detect --terse , loadvcp and dumpvcp , and also the file names of user defined features. Option --stats : I2C ioctl() calls for reading and writing are now reported as type IE_IOCTL_WRITE and IE_IOCTL_READ rather than IE_OTHER. IE_WRITE_READ stats are no longer reported, as they are redundant. Performance Options Option --dsa / --dynamic-sleep-adjustment : The Dynamic Sleep Adjustment algorithm was rewritten to more sensibly increment sleep times after before each retry. Sleeps immediately after opening a /dev/i2c device and after completion of a read operation are completely eliminated. The sleep-suppression related uptions, --sleep-less , --less-sleep, --enable-sleep-suppression , and --disable-sleep-suppression*** no longer have any effect. Miscellaneous Bug Fixes The sleep multiplier value was not respected for new API threads. User Defined Features: Keyword NC set the incorrect flag in a feature descriptor. Fixed a segfault in ddcutil initialization because of unexpected contents in sysfs. Double count I2C writes in stats. libddcutil Fixed a segfault that occurred at shared library startup. The fault was in a trace message for function ddc_start_watch_displays() which watches for displays that are added or removed. Deprecated API functions have no effect: ddca_enable_force_slave_address() , ddca_is_force_slave_address_enabled() For details on libddcutil changes, see Shared Library Changes for Release 1.3.0 . 1.2.2 28 January 2022 Device Busy (EBUSY) Errors This release improves the handling of and messages regarding DDC communication failures with errno EBUSY. In particular, this error occurs when driver ddcci is loaded. Command detect : If DDC communication fails with error EBUSY, report the display as \"Busy\" instead of \"Invalid\" and suggest use of option --force-slave-address . Command environment : If driver ddcci is loaded, suggest use of option --force-slave-address . Messages regarding EBUSY errors are always written to the system log. Added API functions ddca_enable_force_slave_address() , ddca_is_force_slave_address_enabled() . Building and Porting When building ddcutil , allow for linking a static library if configure option --enable-static is set. By default, static libraries are not built, since Linux distributions generally frown on their inclusion in packages. Calls to function __assert_fail() have been replaced with exit() in traced assertions. __assert_fail is part of the Linux implementation of assert() , but is not in the C specification. This change simplifies porting of ddcutil to environments lacking this function. Avoid compilation warnings when assertions are disabled (NDEBUG is defined). Miscellaneous Changes Command detect reports additional EDID detail for option verbose . This information, including EDID version and color related detail, has no effect on ddcutil execution but may be of general interest to some users. Fixes Only write messages to the system log regarding ddcutil starting and termination if option --syslog is specified. libddcutil Changes For details on libddcutil changes on releases 1.2.0/1.2.1/1.2.2, see Shared Library Changes for Release 1.2.0 . 1.2.1 02 December 2021 Option -settings Until now, details of the current configuration and option settings have been shown at the start of any command when --verbose is in effect. This information has become increasing large and distracting. Instead, this information is now reported only when option --settings is specified. Tracing Option --syslog sends trace and debug messages to the system log in addition to the trace location. Option --wall-timestamp-- or --wts preface trace and debug messages with the current wall time. Fixes Build would fail when configure option ---enable x11=no was specified. API functions ddca_open_display() and ddca_open_display2() now always return DDCRC_ALREADY_OPEN if the display is already open in the current thread. Previously an assert failure would occur under certain circumstances. Numerous memory leaks in libddcutil have been plugged. 1.2.0 05 October 2021 Most visible changes in release 1.2.0 affect only shared library libddcutil . Users of the command line program ddcutil do not need to update. General Changes Option --enable-capabilities-cache is now the default. Command detect --verbose now reports the raw EDID. Major events are written to the system log. These include starting, stopping, and severe internal errors. Fix for github issue #178: Error detecting i2c-dev kernel module . The checks now use library libkmod (which is the basis for commands modinfo, lsmod, etc.). environment command If programs get-edid and parse-edid are installed, command ddcutil environment --verbose uses them for an addiional EDID check Extend sysfs diagnostics in ddcutil environment --verbose to better analyze problems in DisplayPort Multi-Stream Transport, in which a display appears as 2 different /dev/i2c devices. ddcutil environment --verbose now includes all the information of ddcutil detect --verbose . There is no need to submit the latter along with the former in issue reports. libddcutil Changes See Shared Library Changes for Release 1.2.0 1.1.0 05 April 2021 Docking station connected displays At long last, Linux kernel release 5.10 implemented DDC communication over DisplayPort Multi-Stream Transport. Most commonly, this is seen with displays connected to docking stations. For several years now, all docking station connected displays, even those using HDMI or DVI connections, internally rely on a DisplayPort MST connection between the computer and the docking station. The kernel changes were made in the Direct Rendering Mode (DRM) subsytem. The Intel i915 and AMD amdgpu drivers, which are implemented as part of DRM, have been tested and (mostly) work. Other drivers part of the kernel DRM component, e.g. nouveau, should also work but have not been tested. Nvidia's proprietary driver uses it own proprietary DRM implementation and still does not support DDC communication over MST. Unfortunately there are problems with the DRM code, which ddcutil can only sometimes work around. Sometimes the display's EDID cannot be read on I2C slave address x50. As a result, ddcutil does not report the existence of a display connected to the /dev/i2c device. ddcutil attempts to work around this by trying to read the EDID multiple times with both 128 and 256 block sizes. Depending on the monitor, usually one or the other will work, but sometimes neither do. Option --edid-read-size , which was introduced in release 1.0.1, can force the block size to 128 or 256. This problem can be unrecoverable when the computer suspends and resumes, requiring reboot. On the other hand, the same monitor may appear as two different /dev/i2c devices, only one of which supports DDC. Curiously EDID read failures are associated with the /dev/i2c device that supports DDC. ddcutil attempts to detect which /dev/i2c device should be used for monitor communication, and the detect command reports the other as a \"Phantom Display\" instead of an \"Invalid Display\". (Thank you laur89 for the wonderfully apt term.) My sincere thanks to github users laur89 and boscard for their considerable help in diagnosing this situation and testing (partial) solutions. Configuration file ddcutilrc ddcutil 's command options have proliferated, often to address problems specific to a small number of users. To simplify their use, they can now be specified in a configuration file. For details, see Configuration File Persistent capabilities capabilities is the most expensive ddcutil command in elapsed time. It is also the most prone to failure on marginal I2C host/monitor connections, due the large number of I2C requests involved. On the other hand, the capabilities string is constant for a monitor model. ddcutil now caches capaiblities strings, significantly speeding up execution of the capabilities command. This feature is controlled by options --enable-capabilities-cache and --disable-capabilities-cache . The default is --enable-capabilities-cache . --disable-capabilities-cache may be needed as there are some edge cases not yet addressed The cache is located in file ddcutil/capabilities of the XDG cache directory. Typically this is $HOME/.cache/ddcutil/capabilities. This file can safely be erased if the stored capabilities string should become corrupted in some way. Miscellaneous Warn the user at ddcutil startup if module i2c-dev is neither loaded nor built into the kernel. This should help new users properly configure their systems. More detailed output on the detect command, particularly with option --verbose . environment --verbose has more extensive diagnostics, particulary of /sys Avoid corrupting the state of AMD Navi4 gpus, e.g. RX 6000 series, by not examining SMU I2C buses on the video adapter. Building ddcutil configure option --disable-usb now implies --disable-udev . This addresses a build failure reported by Amon Sha. 1.0.1 08 February 2021 This bug fix release addresses the situation wherein a display connected through a docking station was not detecteed when the i915 video driver is used. (I2C support for docking station connected displays, and more generally displays using DisplayPort Multi Stream Transport. was recently implemented for i915 and amdgpu drivers in Kernel 5.10. Initial ddcutil code for this situation did not adequately work around problems in the driver implementation, with the result that the EDID was not read in certain contexts. Option --edid-read-size Command line option --edid-read-size , introduced in release 1.0.0, is no longer needed. ddcutil not attempts both 128 and 256 byte reads to fetch the EDID. 1.0.0 03 February 2021 User Defined Features ddcutil , for some time now, has implementated user supplied feature definitions. This facility is now formally available. A feature definition file for a monitor model specifies feature definitions that add to or override those in the MCCS spec. It can also optionally force the MCCS version of the monitor. A user supplied feature definition can, for example, specify a monitor's actual values for a Non-Continuous feature such as x60 (Input Source), or define a feature in the manufacturer supplied range xE0..XFF. The facility is enabled by option --udf . The default is currently --noudf . See page User Defined Features for details. USB By default, ddcutil no longer checks for monitors that use USB to communicate with the monitor's Virtual Control Panel . Such monitors are rare, and the error messages that occur when permissions have not been granted on /dev/usb/hiddev devices can be confusuing. USB display detection can be enabled using command line option --enable-usb . The default is --disable-usb . Command detect If no displays are found, add a message suggesting ddcutil environment Always show the product code and binary serial number Additional /sys information for --verbose output Revised logic to better handle some marginal monitor/driver cases Command capabilities The capabilities command now issues detailed error messages for malformed capabilities strings, and attempts to continue if recovery from the parsing error can produce useful information. Fixed instances of assert failures when parsing a capabilities string with unmatched parentheses or the in which the model name is unparenthesized. In the \"Commands\" segment, the id values are referred to as \"operation codes\" for consistency with DDC/CI documentaion. Capitalization in command output is more consistent. Command getvcp If getvcp does not know how to format a value, it now includes the mh, ml, sh, and sl byte values in the \"UNABLE TO FORMAT OUTPUT\" message. Implement special handling for features x62 (audio volume) x87 (audio treble), x91 (audio bass) and x93 (audio balance). In MCCS 3.0 and 2.2, these features have special reserved values along with a range of continuous values. Fix the cause of an assert failure when showing the value of feature x93 (audio balance). Command setvcp The parsing of setvcp arguments has been rewritten to correctly allow for more than 1 relative values. A command such as \"setvcp 10 +15\" was incorrectly being interpreted as indicating a relative feature value. The \"+\" or \"-\" in relative values must be surrounded by spaces. Command dumpvcp If no file name is specified on the command line, dumpvcp now writes its output to a newly created file in directory $HOME/.local/share/ddcutil. Documentation has been changed to conform to code behavior. Fixed the cause of the user name being null in the generated portion of the file name. An example of a generated file name is: DELL_P2411H-F8NDP11G119U-20201206-091307.vcp where: - DELL_P2411H is the model name reported by the EDID - F8NDP11G119U is the ASCII \"serial number\" in the EDID - 20201206-091307 is a timestamp of when the file was created Command watch Better handle fatal errors instead of continuing in an infinite loop Command environment If option --verbose is specified, the /sys file system is probed far more extensively. This change also applies to command interrogate , which incorporates environment --verbose . Option --no-x52-fifo Features x02 (new control value) and feature x52 (active control) are used together to report feature values changed using the On Screen Display (OSD). In MCCS 2.0 and 2.1, if feature x02 has the value x02 (changed controls exist) feature x52 is read once to get the id of a feature that has changed. The changed feature can be read in the usual way. Feature x02 is then read again to see if there are more features that have changed. In MCCS 3.0 and 2.2, feature X52 is supposed to be a FIFO of the ids of changed features. It is intended to be read until value x00 is returned, indicating no more features. It has been observed that at least for some v2.2 monitors (HP Z22i), feature x52 never returns x00, just always returns the same feature id. This option forces the watch command to treat all monitors as having the VCP 2.0/2.1 behavior. Option --mccs <vcp version> Option --mccs now applies to commands getvcp , setvcp , and dumpvcp in addition to vcpinfo . See documentation of the individual commands for details. Option --per-thread-stats Option ---per-thread-stats causes --stats output to include per thread statistics. By default, the --stats option does not display per thread statistics. These statistics are generally meaninful only in the shared library context, and their display is simply TMI TM . Option --enable-sleep-less Option --sleep-less , now also known as --enable-sleep-less is now the default. This eliminates some sleeps after reading DDC packets, and does not appear to affect stability. Option --disable-sleep-less restores the prior behavior. Option --edid-read-size <128|256> This option is a work-around for a problem seen with the i915 driver and docking stations. The EDID is read successfully every other time. Older EDIDs are 128 bytes in length, newer ones are 256 bytes. Strangely forcing ddcutil to read 128 bytes resolves this problem. Miscellaneous Changes and Bug Fixes Fix trace message corruption when both --thread-id ( --tid ) and --timestamp ( --ts ) are both specified. If any tracing is enabled, report the ddcutil starting and ending clock times. More functions can be individually traced using --trcfunc . Check during command parsing that functions specified by --trcfunc are in fact individually traceable. Option --nodetect is eliminated. It was reduncant since using the --bus option forces display detection to be skipped, and this is the only context in which option --nodetect was recognized. Fix the recording of the minimum and maxium maxtries values that occur in each thread. Correct --help output to indiate that \"0\" or \".\" in a --maxtries value string leaves the value of a try type unchanged. This was incorrectly documented as \".\" or \"\". For example, \"--maxtries \"., 15, 0\"\" changes only the write-read maxtries value. At startup, check that module i2c-dev is either loaded or built in. An unsupported feature is no longer regarded as a DDC data error (reported by option --ddc ). Reduce the number of error messages written to stderr instead of stdout . Bring the README.md file up to date. More definitively identify LVDS laptop displays. Building ddcutil Some configure options have been added, primarily in support of an as yet incomplete FreeBSD implementation. (Development is suspended until FreeBSD's video drivers expose the I2C bus.) Option Default Description --enable-asan no Build for execution with the Google Address Space Sanitizer. --enable-envcmds yes Controls whether commands environment and usbenvironment are included. --enable-udev yes Controls whether udev is used. --enable-targetbsd no Build for FreeBSD. Notes: - Option --disable-envcmds forces --disable-drm , and --disable-x11 - Option --enable-targetbsd forces --disable-envcmds , --disable-udev , and --disable-usb Option- -with-adl-headers has been removed. configure help messages for options that are not intended for public use are now marked \"(Developer only)\". Use of the .gitignore file has been simplified. It now identifies only files that should be ignored by any clone of the github ddcutil repository. Users should now list files specific to their copy of the repository in the file .git/info/exclude , which is not tracked. Shared Library The SONAME for libddcutil is now libddcutil.so.4. For details on changes, see Shared Library Changes for Release 1.0.0 . Acknowledgements Thank you to the many users who have not not only submitted problem reports but have helped remotely diagnose ddcutil issues. In particular: github users suuuehgi and laurisriple provided extensive help diagnosing problems with the i915 driver and docking stations. PJ Aitken has put considerable effor into reverse enginering Picture-by-Picture mode on a Phillips 499P9. github user parkerlreed helped diagnose deviations from the specification of feature x60 on an Acer ED320QR. And also a shout out to Andrey Rahmatullin who sponsors ddcutil on Debian and has help bring its packaging up to Debian standards. 0.9.9 13 June 2020 Execution Statistics Additional per-thread statistics are shown when --verbose is specified along with --stats . Statistics output has become voluminous. New group ELAPSED (alternatively TIME ) shows only the elapsed execution time. For example $ ddcutil detect --stats elapsed Statistics now seperately reports multi-part read and multi-part write tries. This reflects how statistics are implementated, allowing for Table features. As a practival matter, no monitor has ever been seen that implements features of type Table , so the multi-part write statistics will always be zero. Performance Related Command Options Option: --less-sleep , --sleep-less Eliminates many of the sleeps between the time that ddcutil receives a response packet from the display and then sends the next request packet. Depending on monitor, this can markedly improve performance, at the cost of more retries owing to increased DDC communication errors. Option --sleep-multipler still applies to the remaining sleeps. Less Useful Performace Related Command Optons The remaining new performance related options seemed like good ideas, but do not appear to significantly reduce execution time. They are included for user experimentation and feedback. They may be removed in future releases. Option: --lazy-sleep Causes some sleep events required by the DDC/CI protocol to occur in deferred mode. Instead of immediately sleeping after DDC IO events that require an interval before the next request is made of the display, the required sleep time is added to the current realtime value and saved in the associated display reference. Before the next DDC IO message to the display, the value in the display reference is checked, and if greater than the now current real time, a sleep for the remaining time occurs. Unfortunately, this option appears to have only a neglible effect on execution time. Execution statistics show an approximately 1 ms reduction in sleep time, e.g. 50 to 49 miliiseconds. This negligable effect reinforces the fact that most of ddcutil 's elapsed time is spent in DDC mandated delays and waiting for DDC IO to complete. ' Option: --dynamic-sleep-adjustment , (alternative name --dsa ) If retry is required, dynamically increases the delay time before subsequent retries, up to a maximum. Does not appear to have an appreciable effect on retry success, but it may be a useful alternative to option --sleep-multiplier . Other Options Option: --timeout-i2c-io Causes (most) I2C read and write calls to eventually time out if they do not return. This has been implemented as a POSSIBLE way to address occasional reports of ddcutil locking up, with subsequent ddcutiil calls blocking behind it. This may become the default in future releases. Support for fglrx removed ddcutil no longer supports AMD's old proprietary display driver fglrx . Command line option --adl is no longer recognized. configure option --with-adl has been removed. Miscellaneous Command ddcutil environment should have output the message \"Group i2c does not exist\" if group i2c was not found. The critical word \"not\" was missing. Thank you Micha\u00ebl Defferrard. The display identifier cross-reference table output by command ddcutil environment --verbose has been modifed to handle multiple displays with an identical EDID. Certain LG Ultrawide monitors contain neither an ASCII nor binary serial number in their EDID. Consequently, all monitors of the same model have the same EDID. Display detection now reads the EDID a byte at a time, similarly to command get-edid . This is occasionaly more reliable than the standard multi-byte read code. Thank you \"InconsolableCellist\" for pointing out this difference between ddcutil and get-edid . I2C slave address (DDC) is once again checked during display detection. This had been removed in release 0.9.3 because it caused lockups on Dell XPS 13 laptops. To address this situation, slave address x37 is not checked for laptop displays, which never support DDC. Command ddcutil detect --verbose reports the result of the x37 test. This is presently purely for informational purposes. Correctly handle multiple relative values in a single setvcp string, e.g. $ddcutil setvcp 10 + 5 12 - 3 This frankly not very useful corner case had not been taken into account when relative setvcp values were implemented. Well, now it is. ddcutil issues an error message instead of aborting if an utterly nonsensical --sleep-multiplier value greater than 100 is specified, e.g. $ ddcutil detect --sleep-multiplier 200 # WRONG Verification is always disabled if setting VCP feature xDF (Power Mode) to 5. This is a write-only value that turns off the display. Verification can never succeed. Correct the spelling of \"Finnish\" in the list of On Screen Display languages for feature xCC. Thank you Simon Alling. Tracing Trace group RETRY has been added. This subset of trace group DDCIO reports only retry activity. In a handful of unusual situations, trace messages are issued unconditionally, irrespective of the trace settings in effect. This is to highlight some rare situations, such as recovery from multiple DDC Null Messages. $ ddcutil getvcp 10 (ddc_write_read_with_retry) ddc_write_read() succeeded after 3 Null Messages If you encounter such a message, please report the circumstances in which it occurred. Building ddcutil As noted above, ddcutil no longer supports AMD's old proprietary video driver fglrx . configure option --with-adl no longer exists. Reflecting changes to how the PCI and USB hardware ID tables are packaged, ddcutil now prioritizes pci.ids and usb.ids files in directory /usr/share/misc over those in /usr/share/hwdata. Packaging requires packages pci.ids, usb.ids, and usbutils, not hwdata. Corresponding changes have been made to configuration file configure.ac . Thank you Pino Toscano. Use of include file <sys/cdefs.h> has been eliminated. This include file does not exist on Alpine Linux. Shared Library The SONAME for libddcutil is now libddcutil.so.3. For details see Shared Library Changes for Release 0.9.9 . 0.9.8 30 November 2019 Command line option --sleep-multiplier The DDC/CI specification dictates that the host computer wait 40-200 ms (depending on operation) between sending a command to the monitor and reading the response. As a result, ddcutil spends approximately 90% of its elapsed time sleeping. Many monitors respond properly with much shorter waits. On the other hand, there are some monitors that require longer waits to avoid DDC/CI errors. Option --sleep-multiplier applies a floating point multiplication factor to the DDC/CI specified sleep times. For example, --sleep-multiplier .5 causes 40 ms waits to become 20 ms, and --sleep-multiplier 4 causes 40 ms waits to beome 160 ms. Note that ddcutil may automatically increase wait times when peforming retries. Option --sleep-multiplier applies to the inital wait time. Option --sleep-multiplier can significantly speed up ddcutil execution - some monitors have been seen to operate properly with a sleep-multiplier as low as .1, Undocumented option -y for adjusting wait times is removed. Command line options --thread-id and --timestamp If option --thread-id (alternatively --tid ) is specified, trace messages are prefixed with the thread id number, e.g. [ 27044](ddc_get_nontable_vcp_value ) dh=Display_Handle[i2c: fd=3, busno=5], Reading feature 0x00 if option --timestamp (alternatively --ts ) is specified, trace messages are prefixed with the number of seconds since the start of program execution, e.g. [ 1.827](ddc_get_vcp_value ) Starting. Reading feature 0x00, dh=Display_Handle[i2c: fd=3, busno=9], dh->fd=3 If both options are specified, then both thread id and timestamp are shown. Mouse corruption during display detection When examining USB devices to determine if they support the USB Monitor Control Class Specification , it was possible to hang USB connected mice. This change peforms a pre-check to ignore mice and keyboards. It affects: - Normal ddcutil commands, e.g. ddcutil detect - The usbenvironment command - Command chkusbmon , intended for use in UDEV rules. Display Detection messages When DDC/CI communication fails during display detection and a monitor is reported as an \"Invalid Display\", if the display appears to belong to a laptop, issue a message that laptop displays do not support DDC/CI. This should reduce the incidence of people needlessly trying to diagnose a DDC/CI communication failure. Command ddcutil detect now shows a blank instead of \"unspecified\" to indicate that an EDID is not found. Miscellaneous Improve the output for feature x14 (Color Preset) to take into account the MH byte, which is defined in MCCS 3.0 and 2.2. ( Unfortunately, observed behavior on at least one MCCS 2.2 monitor, an HP Z22i, does not match the spec.) API Changes See Shared Library Changes for Release 0.9.8 for details. 0.9.7 04 September 2019 Fixes the cause of a segfault during display detection if a monitor appearing to support the USB Monitor Control Class Specification , i.e. one that uses USB to communicate monitor settings, is connected to the system. Properly handle failure when querying a feature value using USB. Plug a minor memory leak during display detection when checking if a display is an eDP device, i.e. a laptop monitor. Thank you Federico. Some debug messages still occurring in production code were disabled. Minor code cleanup to avoid warnings in Coverity static analysis. 0.9.6 25 August 2019 Command line option --nousb . This option disables the USB portion of display detection during ddcutil startup. There has been a user report that ddcutil sometimes freezes the trackpoint in a Lenovo keyboard with trackpoint (specifically Lenovo SK-8855) during display detection. The option provides a work around. Note that USB display detection is rarely required, as most monitors do not use USB to communicate settings. However, USB display detection is much, much faster than normal I2C display detection, so disabling it has a negligable effect on ddcutil execution time API Changes See API Changes in Release 0.9.6 for details. 0.9.5 24 February 2019 Feature x72 (Gamma) Added support for Virtual Control Panel feature x72 (Gamma). This is an unusual complex non-continuous feature in that its value can be changed by the user, and the parenthesized \"values\" in the capabilities string require special interpretation. The following commands have been modified: - ddcutil getvcp 72 : Interpret the output - ddcutil capabilities : Interpret the parenthesized \"values\" substring - ddcutil setvcp : See below. Command setvcp Can now take 2 byte values an an argument. Values can be specified as hexadecimal (SH byte then SL) or as decimal (0..655335). Example: ddcutil setvcp 72 x7800 Specifies SH=x78 (native gamma=2.2), SL=x00 (absolute adjustment, ideal tolerance) Thanks to YamashitaRen for pointing out the need to allow for 2 byte values and helping test the support for feature x72. Configuration and Diagnostics Contrary to existing documentation, kernel module i2c_dev is in fact required when using the proprietary Nvidia driver. Reported by Igor Ovsyanka. Kernel module documentation has been corrected, and command ddcutil environment has been updated. Bug Fixes Fix the cause of an assert failure when displaying the value of feature x8F (Audio Treble) or x91 (Audio Bass). Reported by Igor Ovsyanka. Monitor Quirks Instead of setting the \"unsupported feature\" bit in the getvcp reply packet for an unsupported feature, the Dell AW3418DW causes I2C failure with Linux errno EIO . ddcutil now interprets the EIO response as indicating an unsupported feature instead of reporting an error. This special handling currently applies only to the Dell AW3418DW. Miscellaneous Update file README.md and make it more usable as the github overview file. API Changes See API Changes in Release 0.9.5 for details. 0.9.4 25 December 2018 Fix the cause of failure to build from source for the x32 ABI . The file output by the dumpvcp command no longer contains a TIMESTAMP_MILLIS field, the number of seconds since start of the machine epoch, typically January 1, 1970. This field, and its companion TIMESTAMP_TEXT , are ignored on input, so this change can only affect an external program that relies on the TIMESTAMP_MILLIS field, say for sorting. Thank you Jan Palus, who encountered the problem when building ddcutil for the PLD Linux distribution. Fix an execution failure that resulted from attempting to open an already opened display. This occured on the capabilities command when the vcp field in the string returned by the monitor was damaaged or missing, causing ddcutil to attempt to read the VCP version from feature 0xDF. Thank you Sergiy Domin for reporting this bug. Features 0x59..0x5E (6 axis separation values). Report these values as normal continuous (C) values instead of just uninterpreted bytes. 0.9.3 26 November 2018 Display Detection Display detection no longer performs initial probes of I2C slave addresses on each possible /dev/i2c device. These initial probes do not return valid information on a Dell P2715Q, and have been seen to cause screen corruption on Dell XPS 13 laptops. In addition, /dev/i2c devices for Synopsys DesignWare are automatically skipped. Thank you Robert Munteanu for reporting and helping diagnose the P2715Q issues. Thank you Federico, developer of CLightd which uses the ddcutil API, jghauser, and especially Dr-Ongo for extensive help in reporting and diagnosing the Dell XPS 13 screen corruption. As a result of the changes to display detection, ddcutil detect --verbose no longer reports the presence of slave addresses x30 (EDID block number) or x37 (DDC), but does report whether a display is an Embedded Display Port (eDP) device, which is the case for recent laptop displays. It also reports the sysfs device name. User Supplied Feature Definitions ddcutil internals have been extensively restructured for future support of user supplied feature definitions. This will allow users to supply feature definitions for manufacturer reserved features, i.e. those in the range xe0..xff. While not yet ready for public use, there are a couple changes already visible in the user interface Command option Explanation --udef check for user supplied feature definitions --noudef do not check for user suplied feature definitions (currently the default) The following feature group has been added: Group name Explanation USER or UDF features having a user supplied feature definition Tracing Added trace groups: Name Purpose UDF user defined features DDCIO low level DDC functions VCP feature metadata Because of the volume of output, trace group \"DDC\" has been split into DDC and DDCIO, with the latter containing low level DDC services. API Changes The C API has had a few changes to support user supplied feature definitions and reflecting experience gained from work on the Qt C++ GUI interface. See API Changes in Release 9.3 for details. Miscellaneous Vebose output of the environment command now displays execution timestamps to aid in interpreting system logs. 0.9.2 01 September 2018 Command ddcutil detect Eliminate the Supports DDC: line. The output of this line reflects the result of a simple test for slave address x37 at the I2C layer. During display detection, ddcutil also attempts a real DDC exchange at the higher, DDC layer of code, and relies on this result to determine whether the monitor supports DDC. The simple x37 test is vestigial and has no effect on program logic. It also has been shown to be inadequate. It has been reported that the Dell P2715Q sometimes fails the simple x37 test even though it supports DDC. On the other hand the x37 test succeeds on a Dell U3011 when DDC is turned off in the OSD. Thank you Robert Muntreanu for the Dell P2715Q report. The result of the x37 test is still reported as part of the --verbose output of detect . Eliminate duplicate displays for DisplayPort connected monitors. Under some circumstances, a DisplayPort connected monitor is assigned two /dev/i2c devices, and detect would report two (identical) monitors. However, only one of the /dev/i2c devices supports DDC communication. This change addresses the problem for the nouveau driver, and only defines a ddcutil display for the good /dev/i2c device. Command ddcutil --help Include command scs (Save Current Settings) in the output of ddcutil --help . ddcutil scs executes a Save Current Settings operation, which is supported by some but not all DDC capable displays. This command was implemented some time ago, but was not described in the help output. Command ddcutil environment When checking for group i2c membership, issue a special message if running as root instead of the generic message that the current user is not a member of group i2c. USB connected displays Fix an invalid feature read of a USB connected display, observed when getting the controller manufacturer but VCP feature code xC8 is unsupported. When reading a USB report, regard errno EINVAL as an expected indication that no value is found rather than an unexpected status code. Tracing Fix the cause of a segfault when tracing a write-only DDC exchange (i.e. setting a VCP value) Disable debug messages regarding device id table initialization in the environment command. Eliminate double newlines in several error and trace messages Building ddcutil libusb function libusb_set_debug() is deprecated in recent libusb versions, in favor of libusb_set_option() , resulting in a compiler warning when flag -Wdeprecated-declarations is set. Calls to libusb_set_debug() in file libusb_util.c are replaced by iftested code that uses the proper function. Fix an unreachable assert() statement in file execution_stats.c that was detected by compiling with option -Werror-switch-unreachable. Thank you Jonathan Scruggs. Add \"__attribute__ ((deprecated))\" statements to functions ddca_report_active_displays() and ddca_get_feature_name_by_display() , in header file ddcutil_c_api.h . The inline documentation for these function already indicated their deprecated status. 0.9.1 27 May 2018 Bug Fix Fix the cause of an abort that may occur on command environment --verbose when examining an extremely large log file. 0.9.0 13 May 2018 Significant Command Line Changes Two enhancements will be of interest to general users: The setvcp command now allows new values for Continuous type features to be specified as relative values, e.g. the following commands increase or decrease the value of the brightness feature by 5. $ ddcutil setvcp 10 + 5 $ ddcutil setvcp 10 - 5 Note that parsing requires that \"+\" and \"-\" be surrounded by spaces. Option --no-table is now the default. Table type features are by default not included in most feature groups specified on getvcp , e.g. getvcp known . Features of type Table are rare. The DDC/CI spec does not provide a clean way for getvcp to determine that a table feature does not exist. As a result, getvcp typically has to exceed its retry count before giving up. (Exclusion of table features does not occur if a feature is explicitly specified by its hex code, or for feature groups TABLE or LUT .) The --no-table (formerly --notable ) and -show-table options explicitly control this behavior. Note that --no-table does not apply for subsets TABLE or LUT. For subsets SCAN and MANUFACTURER, the effect of --show-table / --no-table on manufacturer-specific feature codes (xe0..xff) is more complicated. ddcutil has no information about the feature characteristics of manufacturer-specific codes. Normally, it attempts only a non-table read. However, if both --verbose and --show-table are in effect, then a table read is attempted as well as a non-table read. Reporting Unsupported Features The interpretation of --show-unsupported has been tweaked. This option applies to command getvcp . (The probe command always reports unsupported features.) Command getvcp reports unsupported features if any of the following hold: - A specific feature was specified by its code, as opposed to a feature set. - Verbose output is in effect - Option --show-unsupported was specified. Option --show-unsupported is no longer automatically set for feature set ALL , which is now simply a synonym for KNOWN . Options --rw , --ro , --wo Options --rw and --ro apply to both the getvcp and vcpinfo commands. Option --wo applies only to vcpinfo . If specified, features shown are restricted to those that are read-write, read-only, or write-only. For example: $ ddcutil getvcp all --ro Option --mccs Filters the information returned by vcpinfo to that for the specified MCCS version. For example, $ ddcutil vcpinfo --mccs 2.1 Feature selection for ddcutil vcpinfo table is not properly version sensitive. -- take version from monitor selection if specified (VERIFY) -- option --mccs-version to force specific version Feature Set Identifiers Additional feature sets have been defined for the getvcp and vcpinfo commands. They surface internal ddcutil feature descriptions, and are intended to facilitate exploring the MCCS specification and its implementation on particular monitors. They will likely be of interest to only a few user. Feature Set Description SCONT Simple Continuous features CCONT Complex Continuous features CONT All Continuous features SNC NC features having a defined set of features for byte SL CNC NC features using multiple bytes NC_WO NC features that are Write NC_CONT Features of type NC that reserve specified values as flags, alloting the remaining values to a continuous range NC All Non-Continuous features MFG is now a valid synonym for feature set MANUFACTURER. Feature sets KNOWN and ALL are now synonyms. Miscellaneous The VCP file created by dumpvcp now includes a PRODUCT_CODE field including the manufacturer product code from the EDID. For some manufacturers, the model name in the EDID does not in fact distinguish among models. Notably, Samsung commonly uses just \"Syncmaster\" for the model name. Currently, loadvcp recognizes this field name but does not make use of the value. Building ddcutil Eliminate compiler flag -Wpedantic in Makefiles. This flag had been added to diagnose some obscure compiler warnings regarding system header files. It was flagging perfectly valid code as problematic, and caused build failures on Gentoo. Code changes to avoid -wformat-overflow , -wformat-truncation , and -wstringop-trunction warnings introduced with GCC 8, generally by making buffers larger. (All such warnings had flagged situations that never would result in buffer overflow.) API Changes The C API has been extensively revised reflecting experience gained from work on a Qt C++ GUI interface. See API Changes in Release 9.0 for details. Work on Python API has been suspended. Proof of concept implementations exist in the source tree for implementations using GObject API. SWIG, CFFI, and and Cython. However, these are incomplete and not intended for public use. 0.8.6 20 January 2018 The externally visible changes in this release include minor enhancements and bug fixes. There are also changes in the C API. Internally, there have been extensive changes in support of the C and (future) Python APIs. User Interface Changes Because of the design of the DDC/CI protocol, there is no certain way to distinguish a response indicating that a feature of type Table (T) is unsupported from a DDC/CI protocol error. As a result, ddcutil getvcp performs the maximum number of retries on a Table type feature before giving up. However, Table type features are rarely implemented. The new --notable option allows Table type features to be ignored, speeding up execution of getvcp commmands for multiple features. Option --notable applies if the argument to getvcp is a feature set, e.g. COLOR or KNOWN instead of a single feature id. In that case Table type features are ignored. C API changes Replace structs that use #iftests Structs DDCA_Single_Vcp_Value and DDCA_Non_Table_Value_Reponse used preprocessor #iftests for endian-ness to properly overlay the 2 byte continuous values (e.g. max value) on a pairs of 1 byte NC values (e.g. ml, mh). The use of #iftests proved incompatible with Python C function interface systems (e.g. Cython, CFFI). Struct DDCA_Single_Vcp_Value has been replaced by struct DDCA_Any_Vcp_Value . Function ddca_get_single_vcp_value() has been replaced by fuction ddca_get_any_vcp_value() , which uses DDCA_Any_Vcp_Value . Struct DDCA_Non_Table_Value_Response has been replaced by struct DDCA_Non_Table_Value . Function ddca_get_non_table_value() now returns a DDCA_Non_Table_Value , not a DDCA_Non_Table_Value_Response . DDCA_Any_Vcp_Value and DDCA_Non_Table_Value do not define 2 byte current and max values for Continuous (C) features. The 2 byte current and max values must be calculated from the appropriate pairs of single byte values, e.g. cur_val = sh << 8 | sl Eliminate use of longjmp The use of longjmp() to handle exceptional error condiitions (typically program logic errors) has been eliminated. API functions removed: ddca_register_jmp_buf() , ddca_get_global_failure_information() Structs removed: DDCA_Global_Failure_Information Miscellaneous Add trace class ENV for tracing environment related functions Internally, many functions in key portions of the code base now return exception-like structs instead of status codes. Option --excp causes ddcutil to report these exception-like structs when they are converted to status codes (and the internal detail is discarded). Bug Fixes Fix cause of a segfault in the environment command on Arch Linux due to the lack of the \"arch\" command in that distribution. Thank you Despruk. Fix a segfault when probing DRM using the environment command on aarch64. Fix a typo in the recommendations section at the end of the environment command. Thank you Mirek Svoboda 0.8.5 16 November 2017 This release contains a large number of minor enhancements and bug fixes. Most significant are those related to alternative environments, such as Raspberry Pi systems. Those running ddcutil on a 32 bit system, either i386 or Raspberry Pi, should upgrade to address a segfault in the environment command. Otherwise, there is no need to upgrade to this release unless you are experiencing problems. Changes to facilitate scripting Do not output a warning message regarding undetected VCP version if message level is --terse . \"Display not found\" message now directed to stderr instead of stdout. Packaging Changes to meet Debian distribution standards. Clean up debian/rules and other files in the debian directory. Add a changelog file, normally installed in file /usr/share/doc/ddcutil/Changelog. Rename NEWS file to NEWS.md Add configure option --enable-x11 / --disable-x11 . The default is --enable-x11 . If --disable-x11 is specified, ddcutil is built without X11 related code, which is used only for diagnostics within the environment command. Directory package has been removed from the ddcutil git tree and is no longer included in the tarball. This more cleanly separates \"downstream\" from \"upstream\" activities. Packagers for Linux distributions should contact if this creates problems. Command environment enhancements The environment command is extensively revised. The increasingly large collection of tests has been consolidated. In particular: Tests are now sensitive to machine architecture. Performs alternative tests on arm systems, inlcuding the Raspberry Pi. Added a consolidated collection of suggestions at the end that suggest ways for the user to address configuration issues. Fixed a bug that caused a segfault in 32 bit versions of ddcutil . Use of shell commands has largely been replaced with API calls, addressing some obscure shell errors. glib-2.0 The required glib-2.0 version has been increased from 2.16 to 2.32 reflecting the use of glib thread functions. Consequently, ddcutil no longer builds on some older Linux distributions. Bug fixes Fix a logic error in the VCP version comparison function vcp_version_le(). This bug affected only audio related VCP feature codes x8f, x91, and x93. It also affected experimental command watch which listens for monitor changes not made by ddcutil , i.e. by pressing buttons on the monitor. Properly handle the failure case where a display is detected on an I2C bus (EDID is read) but DDC communication fails, and the user specifies the display on the command line using the I2C bus number (option --bus ). Fix the cause of a segfault when the loadvcp command reads a user modified VCP file. The command now fails gracefully if none of MFG_ID, MODEL, and SN are present. Fix the cause of a segfault when displaying I2C functionality flags in the --environment command. This segfault was seen only in 32 bit versions of ddcutil . The --stats option showed incorrect time statistics on 32 bit versions of ddcutil . Add \"-lddcutil\" to output of \"pkgconfig ddcutil --libs\". Thank you Federico. Miscellaneous Improve reporting of the individual errors that result in command failure due to maximum I2C retries exceeded. interrogate , environment and usbenvironment now redirect all stderr output to stdout for easier capture Added command line options -trcfile and -trcfunc to enable tracing by file name and function name. Added configuration option --enable-x11 controlling whether X11 related diagnostics are included in the environment and interrogate commands, allowing ddcutil to build in embedded environments that lack X11. The default is yes . Verbose EDID decription, e.g. on command detect --verbose , now reports EDID byte 24 (x14), the supported features bitmap. This is purely informational. Ongoing work to make functions thread safe. Code cleanup. 0.8.4 22 July 2017 This release primarily contains packaging changes to meet Fedora distribution standards. It also includes minor improvements and bug fixes. There is no need to install it unless you are experiencing problems. Command ddcutil interrogate Do not include usbenvironment diagnostics as part of the interrogate command. USB connected monitors are rare and USB related diagnostics clutter the report. libddcutil-devel Do not package static libraries (.a and .la files) in libddcutil-devel. Bug fixes Prevent a segfault in monitor detection that occurrs when slave address x50 is detected on an I2C bus, but reading the EDID at that address fails. Address an assert failure in the ddcutil usbenvironment command due to an unexpected library return code. In the device identification cross reference report of ddcutil environment , properly handle I2C bus number -1, used internally to indicate unknown. 0.8.2 17 May 2017 This release introduces minor improvements to the diagnostic output of the environment , detect , and interrogate commands. There is no need to install it unless you are experiencing problems. Command ddcutil detect If a display appears to support DDC (I2C slave address x37 is active) but communication fails, perform a heuristic test as to whether it is a laptop display, issue message appropriately. Changes to reduce the number of feature reads performed when detecting monitors, slightly improving performance. Option --stats errors Maintain and report a secondary count of the individual errors that are rolled up into \"retry count exceeded\" errors. ddcutil environment --verbose changes Eliminate checks for package i2c-tools Report additional information about system hardware Add a cross reference report for the multiple ways that different subsystems identify a monitor and its I2C bus Consolidate some tests to reduce redundancy Check for DisplayPort Multi-Stream Technology (DPMST) devices Eliminate the cause of a bogus error message when scanning devices Packaging Changes to the requirements of package i2c-tools . Generally speaking, it is no longer needed for building ddcutil , and is optionally used as part of the diagnostic output of the environment command. Changed from Requires: to Suggests: for dpkg Requires: and BuildRequires: eliminated for rpm packaging in general BuildRequires: kept for SuSE rpm packaging. ddcutil needs file linux/i2c-dev.h, which is contained in package i2c-tools in SuSE releases through 13.2 Changes to packaging to conform to Debian standards Changes to packaging to conform to Fedora standards 0.8.1 06 May 2017 This is a bugfix release. There is no need to install it unless you are experiencing the segfault described below. Fixes a segfault that can occur after open() fails for a /dev/usb/hiddev device. 0.8.0 01 May 2017 Release 0.8.0 contains new features intended to address issues with particular monitors and user environments, to changes to improve performance, and code restructuring for future enhancements General Changes Monitor detection and cataloging has been extensively reworked. To support the library version of ddcutil used by the C (and future Python) APIs, the list of displays is determined at program/library initialization and saved. The processing of the DDC Null Response has changed. Normally a Null Response indicates a processing error in the monitor. Some monitors also use the Null Response to indicate that a VCP feature is unsupported. ddcutil now performs an extended sleep when receiving a Null Message response to allow the monitor to recover. It also performs an initial check of whether a monitor uses DDC Null Response to indicate unsupported features. See DDC Null Response . Linux error numbers no longer appear \"modulated\" in messages. That is, an EACCES error is reported as -13, not -1013. Note that the C API has always returned Linux error numbers in unmodulated form. General Options Option --async parallelizes the monitor checks executed during display detection. If there are multiple monitors, initial monitor checks are performed in multiple threads, improving performance. This may become the default in future releases. Option --nodetect is valid if the display is specified by its I2C bus number, using option --bus . In that case the initial detection of all displays is skipped, improving performance. This may become the default in future releases. Option --hiddev specifies a USB monitor connection by its hiddev device number. For example: --hiddev 3 refers to device /dev/usb/hiddev3. There is no single letter specifier for this option. Option --brief is now a synonym for --terse Added --stats class elapsed . --stats time is a synonym for --stats elapsed . Shows program elapsed time. Changes to Specific Commands: environment and interrogate commands: Report ddcutil version probe , interrogate , and getvcp scan commands: Do not include table features unless output level is VERBOSE. This speeds up execution as table reads for unsupported features execute the maximum number of retries. It also clarifies performance statistics. No monitors implementing table type features have yet been observed. interrogate command: Report performance statistics for individual parts of interrogate . getvcp command: If --terse output is specified, then the VCP data is output in a form that is easily machine readable. See getvcp command setvcp and loadvcp commands: By default, setvcp and loadvcp verify that a value has been successfully set by reading the value from the monitor after writing it. Option --noverify disables this check. Bug Fixes Fixed a segfault that occurred when a monitor returned a 0 length capabilities string. Variables holding nanoseconds have been changed from type long to uint64_t to address overflow problems on 32 bit systems such as Raspberry Pi. C API The C API has undergone extensive changes. Name Changes Names have been changed for consistency and clarity. Names of certain functions used in message generation have been shortened to simplify printf() type functions. Old typedef name New typedef name VCP_Feature_Code DDCA_Vcp_Feature_Code Version_Feature_Info DDCA_Version_Feature_Info Vcp_Value_Type DDCA_Vcp_Value_Type Single_Vcp_Value DDCA_Single_Vcp_Value Old function name New function name ddca_status_code_name() ddca_rc_name() ddca_status_code_desc() ddca_rc_desc() ddca_repr_display_identifier() ddca_did_repr() ddca_create_display_ref() ddca_get_display_ref() ddca_repr_display_ref() ddca_dref_repr() ddca_repr_display_handle() ddca_dh_repr() ddca_get_displays() ddca_get_display_info_list() ddca_repr_mccs_version() ddca_mccs_version_id_name() ddca_mccs_version_id_string() ddca_mccs_version_id_desc() Comments: - Function ddca_create_display_ref() was renamed to ddca_get_display_ref() to reflect the fact that it returns a DDCA_Display_Reference from the internal data structures representing detected displays. Struct Old field name New field name DDCA_Ddcutil_Version_Spec build micro Enum Old value name New value name DDCA_Output_Level OL_TERSE DDCA_OL_TERSE DDCA_Output_Level OL_NORMAL DDCA_OL_NORMAL DDCA_Output_Level OL_VERBOSE DDCA_OL_VERBOSE DDCA_IO_Mode DDC_IO_DEVI2C DDCA_IO_DEVI2C DDCA_IO_Mode DDC_IO_ADL DDCA_IO_ADL DDCA_IO_Mode USB_IO DDCA_IO_USB DDCA_Vcp_Value_Type NON_TABLE_VCP_VALUE DDCA_NON_TABLE_VCP_VALUE DDCA_Vcp_Value_Type TABLE_VCP_VALUE DDCA_TABLE_VCP_VALUE Structs and Functions Removed Structs removed Comment DDCA_IO_Location Use DCCA_IO_Path Functions removed Comment ddca_built_with_adl() Use ddca_get_build_options() ddca_built_with_usb() Use ddca_get_built_options() Enums, Structs, and Functions Added or Changed New enum Purpose DDCA_Stats_Type Used as both values and bitflags for statistics types New Structs Purpose DDCA_Adlno Represents a ADL adapter number/display number pair DDCA_IO_PATH Physical path for MCCS communication Comments: Struct DDCA_Display_Location is replaced by DDCA_IO_Path , which contains only the io mode and device identifiers for that mode. USB bus and device numbers were removed because they are attributes by which the physical path (hiddev device) can be found, not the path itself. Struct DDCA_Display_Info has been adjusted to use DDCA_IO_Path . Function added Purpose ddca_ddcutil_version() gets version as a struct of numbers ddca_reset_stats() reset performance statistics ddca_show_stats() report performance statistics ddca_enable_verify() controls whether VCP values are read after being set ddca_is_verify_enabled() queries whether VCP values are verified ddca_free_display_info_list() free function for struct ddca_create_usb_hiddev_display_identifier() create identifier for hiddev number ddca_get_simple_nc_feature_value_name() lookup name of simple NC feature value Other Changes Functions now return Linux error number -EINVAL rather than DDC specific error number DDCL_ARG in case of invalid argument The display selection lifecycle has been changed. The DDCA_Display_Identifier is not the only way to obtain a DDCA_Display_Reference . It can be found in one of 2 ways: Function ddca_get_display_info_list() returns a collection DDCA_Display_Info , containing display identification information (e.g. ddcutil assigned display number, I2c Bus number, manufacturer id, etc.) and a display reference. The client program can search through the returned collection to find the desired monitor. A DDCA_Display_Identifier can be created and passed to ddca_get_display_ref(), which returns a DDCA_Display_Reference . See sample program demo_display_selection.c for examples. Sample code files: The following example files for using the C API have been added: File name Purpose demo_global_settings.c Report and modify global settings demo_display_selection.c Display selection demo_vcpinfo.c Query VCP feature code descriptons demo_get_set_vcp.c Get and set VCP values File clmain.c is now a miscellaneous catchall, mainly for testing. Build system changes src/Makefile.am: change dist-hook to use -prune option per Knut Omang; avoids eror in case there is nothing to erase (i.e. build hasn't happened) Added cmake file FindDDCUtil.cmake from Dorian Vogel 0.7.3 05 March 2017 Maintenance release. Add additional diagnostic tests to command ddcutil environment --verbose *. New configure option --enable-drm . If enabled (the default), command ddcutil environment --verbose includes additional tests that use DRM services to better analyze disrepancies observed in the field between the EDID read directly from the monitor and that reported by X11. Option --enable-drm requires that a recent version (>= 2.4.67) of the development package for libdrm2 (libdrm-dev or libdrm-devel depending on Linux distribution) be installed when building ddcutil . If a sufficently recent version is not detected, configure issues a warning and reverts to --disable-drm . If minimizing executable size is important, set --disable-drm , as DRM services are used only for diagnostics. Additional information on ddcutil detect --verbose . Report and interpret USB vendor id/product id when detect cannot open a hiddev device. This is usually benign, and identifying the device should make this evident. Suggest that the user check that DDC/CI is enabled in the monitor's on screen display if I2C bus x37 (DDC) is responsive, but DDC communication fails. 0.7.2 01 February 2017 Maintenance release. Fixes a critical bug in release 0.7.1 where insufficient privileges on a /dev/i2c-n device causes program termination. ddcutil interrogate always executes with --set-slave-address in effect Minor improvements to ddcutil environment and ddcutil interrogate output Minor improvements to ddcutil detect --verbose Add explanations for additional errno values 0.7.1 27 January 2017 Mantenance release. Add option --force-slave-address which causes ddcutil to take control of slave addresses on the I2C bus even if they are in use. Internally, ioctl(I2C_FORCE_SLAVE) is called instead of ioctl(I2C_SLAVE) . This is intended as a possible workaround for situations where monitors on an I2C bus are not detected. See Option --force-slave-address Option --force disables various checking. It's use is likely to result in command failure, but may provide useful information as to the source of problems. See Option --force Fix the cause of a segfault when displaying statistics for option --stats errors or simply --stats , or on the interrogate command. make install will not install C header files unless configuration option --enable-lib is set. Fix the cause of a Makefile error when trying to strip dependency information from libddctuil.la during make install . Extensive rework of Autotools files for future support of Python 3 as well as Python 2. This work is incomplete. Emit diagnostic messages to aid in debugging certain situations seen only in the field. 0.7.0 03 January 2017 C API Should be fairly stable, though not all features of ddcutil are exposed. Reflecting the presence of APIs, the default for the --enable-lib configuration option is now \"yes\". The following shared object library is created: libddcutil.so Additional prebuilt packages: libddcutil0, libddcutil-dev (Debian, Ubuntu) or ddcutil-devel (Fedora, SUSE) Python API The Python API, implemented using SWIG, is a rough proof of concept and subject to major change. SWIG support is only available by building from source, not from pre-built packages. Requires --enable-swig configuration option. A new command line option --mfg , which allows for monitor selection using the 3 character manufacturer id found in the EDID. --model and -sn no longer need to specified together. If any of --mfg , -model , and -sn are specified, the first monitor to match all of the manufacturer/model/serial-numbers that are specified is chosen. The monitor feature and capabilities portion of interrogate has been enhanced. This functionality is also exposed using the new probe command which operates on a single monitor. Parsing of the capabilities string is enhanced to accomodate monitors that do not separate feature codes by blanks. 0.6.1 21 November 2016 Maintenance release. Improve recovery and diagnotistic messages for certain exceptional conditions. Command ddcutil interrogate now reports the differences between VCP codes declared in the capabilities string and those observed by scanning. Extensive internal changes in preparation for future C and Python APIs. 0.6.0 01 October 2016 Rename project from ddctool to ddcutil. Primary executable is now named ddcutil Shared library is now named libddcutil.so Tarball is now named ddcutil.n.n.n.tar.gz 0.5.3 24 September 2016 Fix overzealous code cleanup in release 0.5.1. Undefined reference to function is_module_loaded_using_sysfs() when building without ADL support. Error in command parsing. Command arguments were ignored. 0.5.1 23 September 2016 Minor improvements to diagnostics of the environment and interrogate commands: Check if i2c_dev is built into the kernel as an alternative to it being a loadable kernel module Recognize amdgpu video driver 0.5 09 September 2016 This is the first formal release of ddcutil Rework USB monitor support based on testing with Eizo Coloredge and NEC PA series -- Probing of USB connected monitors is greatly extended and refactored from ddcutil environment into a separate command ddcutil usbenv . Libraries hidraw and libusb are used as well as hiddev. HID Report Descriptors are parsed. This probing is included in ddcutil interrogate . -- configure option --enable-usb/--disable-usb controls whether ddcutil is built with USB monitor support. The default is --enable-usb . When building with USB support, packages for udev, hidraw, hiddev, and libusb are required. Simplify README.md. Refer to www.ddcutil.com for most documentation The assumption that I2C buses are numbered consecutively is removed. Required for Raspberry Pi. Allow a display to be specified on the command ddcutil loadvcp . This addresses the situation where a monitor presents both an I2C and a USB interface. Normally, the display is determined using the data stored in the VCP file, and the I2C display interface is chosen over the USB interface. If a display is specified, then the model and sn from its EDID must match those in the VCP data being loaded. Add ddcutil command option --timestamp/--ts . If specified, trace messages are prefaced with an elapsed timestamp. Because of changing package requirements, ddcutil no longer builds in the openSUSE Build Service (OBS) for older OS versions (openSUSE 13.1, Ubuntu 12.04, 14.04). ddcutil currently does not build for any openSUSE version in the openSUSE Build Service due to violation of policy guidelines. This problem will be addressed in a subsequent release. openSUSE users can build ddcutil from its tarball.","title":"Release Notes"},{"location":"release_notes/#release-notes","text":"For ddcui release notes, see ddcui Release Notes For detailed notes about libddcutil changes, see Shared Library Release Notes . For notes on the release currently in development, see Preliminary Notes for the Next ddcutil Release .","title":"Release Notes"},{"location":"release_notes/#141","text":"16 January 2023 Release 1.4.1 fixes a critical bug in release 1.4.0 affecting both command line program ddcutil and shared library libddcutil . The default sleep-multiplier value was 0 instead of 1. As a result, commands that did not have an explcit --sleep-multiplier option would fail. All users of release 1.4.0 should upgrade. Thank you github users copysiper (Oleg Tsvetkov) and fionnb for your help in quickly identifying and resolving this bug.","title":"1.4.1"},{"location":"release_notes/#140","text":"13 January 2023","title":"1.4.0"},{"location":"release_notes/#nvidia-proprietary-driver-workaround","text":"Release 1.3.0 simplified coding by exclusively using the ioctl() interface in driver i2c-dev as opposed to the write()/read() file io interface. This had the additional benefit of making option --force-slave-address irrelevant. Unfortunately, this change exposed an error in how the proprietary Nvidia driver is coded. Because of this error, depending on the version of header file i2c.h used when the driver is built, all reads and writes using ioctl() fail. Therefore, the ability to use the write()/read() intead of ioctl() for writing and reading has been restored. By default, the ioctl interface is used for all drivers. The initial IO mechanism used can be forced by new options --use-file-io and --use-ioctl-io , but these options are really only for testing purposes. ddcutil will revert to using the file io interface if the Nvidia error is detected using the ioctl interface. There should be no benefit to using the file io interface with other than the Nvidia driver. Note, however, that when using the file io interface, option --force-slave-address is once again relevant for handling EBUSY errors.","title":"Nvidia Proprietary Driver Workaround"},{"location":"release_notes/#i2c-device-permissions-simplified","text":"Until now, the recommended way give-non root users access to the I2C devices is as outlined on the existing I2C Device Permissions page. In short, all /dev/i2c devices are assigned to group i2c, and have read/write access to those devices. This happens automatically in ddcutil packages for Debian and derived distributions such as Ubuntu, because package ddcutil depends on package i2c-tools. All that remains is for ddcutil users to be added to group i2c. Release 1.4.0 simplifies permissions by adding a udev rule that uses the uaccess tag to give the logged on user read/write access to all /dev/i2c devices associated with video adapters. (See issue 275 ). Installing package ddcutil installs file /usr/lib/udev/rules.d/60-ddcutil.rules (or /usr/local/lib/udev/rules.d/60-ddcutil.rules). If building from source without actually installing ddcutil, you can copy file data/usr/lib/udev/rules.d/60-ddcutil.rules to directory /etc/udev/rules.d. Thank you to github user digitaltrails (Michael Hamilton) for suggesting this change.","title":"I2C Device Permissions Simplified"},{"location":"release_notes/#libddcutil-changes","text":"The ABI is unchanged from release 1.3.0. The full shared library name is libddcutil.4.3.0. ddca_set_default_sleep_multiplier_value() , ddca_set_sleep_multiplier_value() : Accept 0 as a valid argument. ddca_enable_force_slave_address() . This function was made a NO-OP in release 1.3.0. It is once again has effect. For details on libddcutil changes, see Shared Library Changes for Release 1.4.0 .","title":"libddcutil Changes"},{"location":"release_notes/#building-ddcutil","text":"New configure options: --enable-syslog/--disable-syslog control whether messages are written to the system log, which can pose problems if executing in a container. The default is --enable-syslog . Compiler option -WError is only used when building a development version of ddcutil, e.g. 1.4.0-dev. If -WError is specified, compilation can fail on a system other than the development system, having different compiler warnings enabled. configure.ac: Only invoke deprecated macro AC_PROG_CC_99 if autoconf version < 2.70","title":"Building ddcutil"},{"location":"release_notes/#suppress-sleeps","text":"Option --sleep-multiplier and API functions ddca_set_default_sleep_multiplier_value() and ddca_set_sleep_multplier_value() now accept 0 as an argument, which disables sleeps. This is intended for calling programs that wish to control sleep time themselves.","title":"Suppress sleeps"},{"location":"release_notes/#multiple-monitors-having-the-same-edid","text":"It is rare, but possible, to have multiple monitors with identical EDIDs. For example, the ASUS PG329Q has neither a character or a binay serial number in its EDID, and a user had a pair of monitors built in the same week, so the EDIDs were identical. If multiple monitors with identical EDIDs are used with the nvidia proprietary driver, the DRM connector name cannot be reliably determined. Command detect issues a warning in this situation.","title":"Multiple monitors having the same EDID"},{"location":"release_notes/#miscellaneous","text":"Command environment --verbose : Report the build options in effect. The ddcutil command parser reports an error if a display selection option (e.g. --bus , --model ) is given on a command to which it does not apply. Handle /dev/i2c device names with a double hyphen, e.g. /dev/i2c--3. libddcutil: Better handling of configuration file errors, do not abort. See github issue #289 . Write additional error and information messages to the system log Command detect : Eliminate message \"Is DDC/CI enabled in the monitor's on-screen display?\" It's rarely the problem. Command detect --verbose : For EDID version 1.4, correct the interpretation of the digital display type bits, e.g. \"RGB 4:4:4\". Fix miscellaneous segfaults","title":"Miscellaneous"},{"location":"release_notes/#132","text":"04 September 2022 ddcutil release 1.3.2 modifies tarball creation to eliminate garbage and otherwise unneeded files. Users of release 1.3.0 need not upgrade.","title":"1.3.2"},{"location":"release_notes/#130","text":"23 July 2022","title":"1.3.0"},{"location":"release_notes/#brickable-monitors","text":"There have been a handful of reports of monitors for which setting a feature value, most commonly in the manufacturer reserved range, puts the monitor into some difficult to recover state. A warning is issued at startup for those monitors. Currently the only monitor in the warning list is Xaomi model \"Mi Monitor\".","title":"Brickable Monitors"},{"location":"release_notes/#device-busy-ebusy-errors","text":"Driver i2c-dev provides both a low level ioctl() interface and a higher level read()/write() interface for I2C communication. ddcutil now uses the ioctl() interface (almost) exclusively. This eliminates the possbility of EBUSY errors from driver i2c-dev, which occur only when the read()/write() interface is used. As a result, option -force-slave-address no longer has any effect. In principle, EBUSY errors are still possible from within individual video drivers invoked by i2c-dev, but this has never been observed.","title":"Device Busy (EBUSY) Errors"},{"location":"release_notes/#better-report-user-configuration-issues","text":"More user friendly messages at startup regarding /dev/i2c buses that cannont be opened. If the problem is inadequate permissions (EACCES), the user is directed to the web site . Report at startup if required device driver i2c-dev is not built into the kernel and has not been loaded.","title":"Better Report User Configuration Issues"},{"location":"release_notes/#command-detect","text":"Option --verbose produces addtional information: The product code is reported in hex as well as decimal The EDID source field is set to I2C in the normal case where the EDID is read directly from slave address X50. Alternative values include USB , X11 , and SYSFS .","title":"Command detect"},{"location":"release_notes/#commands-getvcp-vcpinfo","text":"Allow specification of multiple feature codes, for example ddcutil getvcp 10 12 , ddcutil vcpinfo 14 16 18 1a","title":"Commands getvcp, vcpinfo"},{"location":"release_notes/#command-environment","text":"Scanning of /sys by option --verbose has been improved.","title":"Command environment"},{"location":"release_notes/#better-handle-malformed-edids","text":"Trailing blanks on model and serial number are stripped. This affects commands detect --terse , loadvcp and dumpvcp , and also the file names of user defined features.","title":"Better handle malformed EDIDs"},{"location":"release_notes/#option-stats","text":"I2C ioctl() calls for reading and writing are now reported as type IE_IOCTL_WRITE and IE_IOCTL_READ rather than IE_OTHER. IE_WRITE_READ stats are no longer reported, as they are redundant.","title":"Option --stats:"},{"location":"release_notes/#performance-options","text":"Option --dsa / --dynamic-sleep-adjustment : The Dynamic Sleep Adjustment algorithm was rewritten to more sensibly increment sleep times after before each retry. Sleeps immediately after opening a /dev/i2c device and after completion of a read operation are completely eliminated. The sleep-suppression related uptions, --sleep-less , --less-sleep, --enable-sleep-suppression , and --disable-sleep-suppression*** no longer have any effect.","title":"Performance Options"},{"location":"release_notes/#miscellaneous-bug-fixes","text":"The sleep multiplier value was not respected for new API threads. User Defined Features: Keyword NC set the incorrect flag in a feature descriptor. Fixed a segfault in ddcutil initialization because of unexpected contents in sysfs. Double count I2C writes in stats.","title":"Miscellaneous Bug Fixes"},{"location":"release_notes/#libddcutil","text":"Fixed a segfault that occurred at shared library startup. The fault was in a trace message for function ddc_start_watch_displays() which watches for displays that are added or removed. Deprecated API functions have no effect: ddca_enable_force_slave_address() , ddca_is_force_slave_address_enabled() For details on libddcutil changes, see Shared Library Changes for Release 1.3.0 .","title":"libddcutil"},{"location":"release_notes/#122","text":"28 January 2022","title":"1.2.2"},{"location":"release_notes/#device-busy-ebusy-errors_1","text":"This release improves the handling of and messages regarding DDC communication failures with errno EBUSY. In particular, this error occurs when driver ddcci is loaded. Command detect : If DDC communication fails with error EBUSY, report the display as \"Busy\" instead of \"Invalid\" and suggest use of option --force-slave-address . Command environment : If driver ddcci is loaded, suggest use of option --force-slave-address . Messages regarding EBUSY errors are always written to the system log. Added API functions ddca_enable_force_slave_address() , ddca_is_force_slave_address_enabled() .","title":"Device Busy (EBUSY) Errors"},{"location":"release_notes/#building-and-porting","text":"When building ddcutil , allow for linking a static library if configure option --enable-static is set. By default, static libraries are not built, since Linux distributions generally frown on their inclusion in packages. Calls to function __assert_fail() have been replaced with exit() in traced assertions. __assert_fail is part of the Linux implementation of assert() , but is not in the C specification. This change simplifies porting of ddcutil to environments lacking this function. Avoid compilation warnings when assertions are disabled (NDEBUG is defined).","title":"Building and Porting"},{"location":"release_notes/#miscellaneous-changes","text":"Command detect reports additional EDID detail for option verbose . This information, including EDID version and color related detail, has no effect on ddcutil execution but may be of general interest to some users.","title":"Miscellaneous Changes"},{"location":"release_notes/#fixes","text":"Only write messages to the system log regarding ddcutil starting and termination if option --syslog is specified.","title":"Fixes"},{"location":"release_notes/#libddcutil-changes_1","text":"For details on libddcutil changes on releases 1.2.0/1.2.1/1.2.2, see Shared Library Changes for Release 1.2.0 .","title":"libddcutil Changes"},{"location":"release_notes/#121","text":"02 December 2021","title":"1.2.1"},{"location":"release_notes/#option-settings","text":"Until now, details of the current configuration and option settings have been shown at the start of any command when --verbose is in effect. This information has become increasing large and distracting. Instead, this information is now reported only when option --settings is specified.","title":"Option -settings"},{"location":"release_notes/#tracing","text":"Option --syslog sends trace and debug messages to the system log in addition to the trace location. Option --wall-timestamp-- or --wts preface trace and debug messages with the current wall time.","title":"Tracing"},{"location":"release_notes/#fixes_1","text":"Build would fail when configure option ---enable x11=no was specified. API functions ddca_open_display() and ddca_open_display2() now always return DDCRC_ALREADY_OPEN if the display is already open in the current thread. Previously an assert failure would occur under certain circumstances. Numerous memory leaks in libddcutil have been plugged.","title":"Fixes"},{"location":"release_notes/#120","text":"05 October 2021 Most visible changes in release 1.2.0 affect only shared library libddcutil . Users of the command line program ddcutil do not need to update.","title":"1.2.0"},{"location":"release_notes/#general-changes","text":"Option --enable-capabilities-cache is now the default. Command detect --verbose now reports the raw EDID. Major events are written to the system log. These include starting, stopping, and severe internal errors. Fix for github issue #178: Error detecting i2c-dev kernel module . The checks now use library libkmod (which is the basis for commands modinfo, lsmod, etc.).","title":"General Changes"},{"location":"release_notes/#environment-command","text":"If programs get-edid and parse-edid are installed, command ddcutil environment --verbose uses them for an addiional EDID check Extend sysfs diagnostics in ddcutil environment --verbose to better analyze problems in DisplayPort Multi-Stream Transport, in which a display appears as 2 different /dev/i2c devices. ddcutil environment --verbose now includes all the information of ddcutil detect --verbose . There is no need to submit the latter along with the former in issue reports.","title":"environment command"},{"location":"release_notes/#libddcutil-changes_2","text":"See Shared Library Changes for Release 1.2.0","title":"libddcutil Changes"},{"location":"release_notes/#110","text":"05 April 2021","title":"1.1.0"},{"location":"release_notes/#docking-station-connected-displays","text":"At long last, Linux kernel release 5.10 implemented DDC communication over DisplayPort Multi-Stream Transport. Most commonly, this is seen with displays connected to docking stations. For several years now, all docking station connected displays, even those using HDMI or DVI connections, internally rely on a DisplayPort MST connection between the computer and the docking station. The kernel changes were made in the Direct Rendering Mode (DRM) subsytem. The Intel i915 and AMD amdgpu drivers, which are implemented as part of DRM, have been tested and (mostly) work. Other drivers part of the kernel DRM component, e.g. nouveau, should also work but have not been tested. Nvidia's proprietary driver uses it own proprietary DRM implementation and still does not support DDC communication over MST. Unfortunately there are problems with the DRM code, which ddcutil can only sometimes work around. Sometimes the display's EDID cannot be read on I2C slave address x50. As a result, ddcutil does not report the existence of a display connected to the /dev/i2c device. ddcutil attempts to work around this by trying to read the EDID multiple times with both 128 and 256 block sizes. Depending on the monitor, usually one or the other will work, but sometimes neither do. Option --edid-read-size , which was introduced in release 1.0.1, can force the block size to 128 or 256. This problem can be unrecoverable when the computer suspends and resumes, requiring reboot. On the other hand, the same monitor may appear as two different /dev/i2c devices, only one of which supports DDC. Curiously EDID read failures are associated with the /dev/i2c device that supports DDC. ddcutil attempts to detect which /dev/i2c device should be used for monitor communication, and the detect command reports the other as a \"Phantom Display\" instead of an \"Invalid Display\". (Thank you laur89 for the wonderfully apt term.) My sincere thanks to github users laur89 and boscard for their considerable help in diagnosing this situation and testing (partial) solutions.","title":"Docking station connected displays"},{"location":"release_notes/#configuration-file-ddcutilrc","text":"ddcutil 's command options have proliferated, often to address problems specific to a small number of users. To simplify their use, they can now be specified in a configuration file. For details, see Configuration File","title":"Configuration file ddcutilrc"},{"location":"release_notes/#persistent-capabilities","text":"capabilities is the most expensive ddcutil command in elapsed time. It is also the most prone to failure on marginal I2C host/monitor connections, due the large number of I2C requests involved. On the other hand, the capabilities string is constant for a monitor model. ddcutil now caches capaiblities strings, significantly speeding up execution of the capabilities command. This feature is controlled by options --enable-capabilities-cache and --disable-capabilities-cache . The default is --enable-capabilities-cache . --disable-capabilities-cache may be needed as there are some edge cases not yet addressed The cache is located in file ddcutil/capabilities of the XDG cache directory. Typically this is $HOME/.cache/ddcutil/capabilities. This file can safely be erased if the stored capabilities string should become corrupted in some way.","title":"Persistent capabilities"},{"location":"release_notes/#miscellaneous_1","text":"Warn the user at ddcutil startup if module i2c-dev is neither loaded nor built into the kernel. This should help new users properly configure their systems. More detailed output on the detect command, particularly with option --verbose . environment --verbose has more extensive diagnostics, particulary of /sys Avoid corrupting the state of AMD Navi4 gpus, e.g. RX 6000 series, by not examining SMU I2C buses on the video adapter.","title":"Miscellaneous"},{"location":"release_notes/#building-ddcutil_1","text":"configure option --disable-usb now implies --disable-udev . This addresses a build failure reported by Amon Sha.","title":"Building ddcutil"},{"location":"release_notes/#101","text":"08 February 2021 This bug fix release addresses the situation wherein a display connected through a docking station was not detecteed when the i915 video driver is used. (I2C support for docking station connected displays, and more generally displays using DisplayPort Multi Stream Transport. was recently implemented for i915 and amdgpu drivers in Kernel 5.10. Initial ddcutil code for this situation did not adequately work around problems in the driver implementation, with the result that the EDID was not read in certain contexts.","title":"1.0.1"},{"location":"release_notes/#option-edid-read-size","text":"Command line option --edid-read-size , introduced in release 1.0.0, is no longer needed. ddcutil not attempts both 128 and 256 byte reads to fetch the EDID.","title":"Option --edid-read-size"},{"location":"release_notes/#100","text":"03 February 2021","title":"1.0.0"},{"location":"release_notes/#user-defined-features","text":"ddcutil , for some time now, has implementated user supplied feature definitions. This facility is now formally available. A feature definition file for a monitor model specifies feature definitions that add to or override those in the MCCS spec. It can also optionally force the MCCS version of the monitor. A user supplied feature definition can, for example, specify a monitor's actual values for a Non-Continuous feature such as x60 (Input Source), or define a feature in the manufacturer supplied range xE0..XFF. The facility is enabled by option --udf . The default is currently --noudf . See page User Defined Features for details.","title":"User Defined Features"},{"location":"release_notes/#usb","text":"By default, ddcutil no longer checks for monitors that use USB to communicate with the monitor's Virtual Control Panel . Such monitors are rare, and the error messages that occur when permissions have not been granted on /dev/usb/hiddev devices can be confusuing. USB display detection can be enabled using command line option --enable-usb . The default is --disable-usb .","title":"USB"},{"location":"release_notes/#command-detect_1","text":"If no displays are found, add a message suggesting ddcutil environment Always show the product code and binary serial number Additional /sys information for --verbose output Revised logic to better handle some marginal monitor/driver cases","title":"Command detect"},{"location":"release_notes/#command-capabilities","text":"The capabilities command now issues detailed error messages for malformed capabilities strings, and attempts to continue if recovery from the parsing error can produce useful information. Fixed instances of assert failures when parsing a capabilities string with unmatched parentheses or the in which the model name is unparenthesized. In the \"Commands\" segment, the id values are referred to as \"operation codes\" for consistency with DDC/CI documentaion. Capitalization in command output is more consistent.","title":"Command capabilities"},{"location":"release_notes/#command-getvcp","text":"If getvcp does not know how to format a value, it now includes the mh, ml, sh, and sl byte values in the \"UNABLE TO FORMAT OUTPUT\" message. Implement special handling for features x62 (audio volume) x87 (audio treble), x91 (audio bass) and x93 (audio balance). In MCCS 3.0 and 2.2, these features have special reserved values along with a range of continuous values. Fix the cause of an assert failure when showing the value of feature x93 (audio balance).","title":"Command getvcp"},{"location":"release_notes/#command-setvcp","text":"The parsing of setvcp arguments has been rewritten to correctly allow for more than 1 relative values. A command such as \"setvcp 10 +15\" was incorrectly being interpreted as indicating a relative feature value. The \"+\" or \"-\" in relative values must be surrounded by spaces.","title":"Command setvcp"},{"location":"release_notes/#command-dumpvcp","text":"If no file name is specified on the command line, dumpvcp now writes its output to a newly created file in directory $HOME/.local/share/ddcutil. Documentation has been changed to conform to code behavior. Fixed the cause of the user name being null in the generated portion of the file name. An example of a generated file name is: DELL_P2411H-F8NDP11G119U-20201206-091307.vcp where: - DELL_P2411H is the model name reported by the EDID - F8NDP11G119U is the ASCII \"serial number\" in the EDID - 20201206-091307 is a timestamp of when the file was created","title":"Command dumpvcp"},{"location":"release_notes/#command-watch","text":"Better handle fatal errors instead of continuing in an infinite loop","title":"Command watch"},{"location":"release_notes/#command-environment_1","text":"If option --verbose is specified, the /sys file system is probed far more extensively. This change also applies to command interrogate , which incorporates environment --verbose .","title":"Command environment"},{"location":"release_notes/#option-no-x52-fifo","text":"Features x02 (new control value) and feature x52 (active control) are used together to report feature values changed using the On Screen Display (OSD). In MCCS 2.0 and 2.1, if feature x02 has the value x02 (changed controls exist) feature x52 is read once to get the id of a feature that has changed. The changed feature can be read in the usual way. Feature x02 is then read again to see if there are more features that have changed. In MCCS 3.0 and 2.2, feature X52 is supposed to be a FIFO of the ids of changed features. It is intended to be read until value x00 is returned, indicating no more features. It has been observed that at least for some v2.2 monitors (HP Z22i), feature x52 never returns x00, just always returns the same feature id. This option forces the watch command to treat all monitors as having the VCP 2.0/2.1 behavior.","title":"Option --no-x52-fifo"},{"location":"release_notes/#option-mccs-vcp-version","text":"Option --mccs now applies to commands getvcp , setvcp , and dumpvcp in addition to vcpinfo . See documentation of the individual commands for details.","title":"Option --mccs &lt;vcp version&gt;"},{"location":"release_notes/#option-per-thread-stats","text":"Option ---per-thread-stats causes --stats output to include per thread statistics. By default, the --stats option does not display per thread statistics. These statistics are generally meaninful only in the shared library context, and their display is simply TMI TM .","title":"Option --per-thread-stats"},{"location":"release_notes/#option-enable-sleep-less","text":"Option --sleep-less , now also known as --enable-sleep-less is now the default. This eliminates some sleeps after reading DDC packets, and does not appear to affect stability. Option --disable-sleep-less restores the prior behavior.","title":"Option --enable-sleep-less"},{"location":"release_notes/#option-edid-read-size-128256","text":"This option is a work-around for a problem seen with the i915 driver and docking stations. The EDID is read successfully every other time. Older EDIDs are 128 bytes in length, newer ones are 256 bytes. Strangely forcing ddcutil to read 128 bytes resolves this problem.","title":"Option --edid-read-size  &lt;128|256&gt;"},{"location":"release_notes/#miscellaneous-changes-and-bug-fixes","text":"Fix trace message corruption when both --thread-id ( --tid ) and --timestamp ( --ts ) are both specified. If any tracing is enabled, report the ddcutil starting and ending clock times. More functions can be individually traced using --trcfunc . Check during command parsing that functions specified by --trcfunc are in fact individually traceable. Option --nodetect is eliminated. It was reduncant since using the --bus option forces display detection to be skipped, and this is the only context in which option --nodetect was recognized. Fix the recording of the minimum and maxium maxtries values that occur in each thread. Correct --help output to indiate that \"0\" or \".\" in a --maxtries value string leaves the value of a try type unchanged. This was incorrectly documented as \".\" or \"\". For example, \"--maxtries \"., 15, 0\"\" changes only the write-read maxtries value. At startup, check that module i2c-dev is either loaded or built in. An unsupported feature is no longer regarded as a DDC data error (reported by option --ddc ). Reduce the number of error messages written to stderr instead of stdout . Bring the README.md file up to date. More definitively identify LVDS laptop displays.","title":"Miscellaneous Changes and Bug Fixes"},{"location":"release_notes/#building-ddcutil_2","text":"Some configure options have been added, primarily in support of an as yet incomplete FreeBSD implementation. (Development is suspended until FreeBSD's video drivers expose the I2C bus.) Option Default Description --enable-asan no Build for execution with the Google Address Space Sanitizer. --enable-envcmds yes Controls whether commands environment and usbenvironment are included. --enable-udev yes Controls whether udev is used. --enable-targetbsd no Build for FreeBSD. Notes: - Option --disable-envcmds forces --disable-drm , and --disable-x11 - Option --enable-targetbsd forces --disable-envcmds , --disable-udev , and --disable-usb Option- -with-adl-headers has been removed. configure help messages for options that are not intended for public use are now marked \"(Developer only)\". Use of the .gitignore file has been simplified. It now identifies only files that should be ignored by any clone of the github ddcutil repository. Users should now list files specific to their copy of the repository in the file .git/info/exclude , which is not tracked.","title":"Building ddcutil"},{"location":"release_notes/#shared-library","text":"The SONAME for libddcutil is now libddcutil.so.4. For details on changes, see Shared Library Changes for Release 1.0.0 .","title":"Shared Library"},{"location":"release_notes/#acknowledgements","text":"Thank you to the many users who have not not only submitted problem reports but have helped remotely diagnose ddcutil issues. In particular: github users suuuehgi and laurisriple provided extensive help diagnosing problems with the i915 driver and docking stations. PJ Aitken has put considerable effor into reverse enginering Picture-by-Picture mode on a Phillips 499P9. github user parkerlreed helped diagnose deviations from the specification of feature x60 on an Acer ED320QR. And also a shout out to Andrey Rahmatullin who sponsors ddcutil on Debian and has help bring its packaging up to Debian standards.","title":"Acknowledgements"},{"location":"release_notes/#099","text":"13 June 2020","title":"0.9.9"},{"location":"release_notes/#execution-statistics","text":"Additional per-thread statistics are shown when --verbose is specified along with --stats . Statistics output has become voluminous. New group ELAPSED (alternatively TIME ) shows only the elapsed execution time. For example $ ddcutil detect --stats elapsed Statistics now seperately reports multi-part read and multi-part write tries. This reflects how statistics are implementated, allowing for Table features. As a practival matter, no monitor has ever been seen that implements features of type Table , so the multi-part write statistics will always be zero.","title":"Execution Statistics"},{"location":"release_notes/#performance-related-command-options","text":"Option: --less-sleep , --sleep-less Eliminates many of the sleeps between the time that ddcutil receives a response packet from the display and then sends the next request packet. Depending on monitor, this can markedly improve performance, at the cost of more retries owing to increased DDC communication errors. Option --sleep-multipler still applies to the remaining sleeps.","title":"Performance Related Command Options"},{"location":"release_notes/#less-useful-performace-related-command-optons","text":"The remaining new performance related options seemed like good ideas, but do not appear to significantly reduce execution time. They are included for user experimentation and feedback. They may be removed in future releases. Option: --lazy-sleep Causes some sleep events required by the DDC/CI protocol to occur in deferred mode. Instead of immediately sleeping after DDC IO events that require an interval before the next request is made of the display, the required sleep time is added to the current realtime value and saved in the associated display reference. Before the next DDC IO message to the display, the value in the display reference is checked, and if greater than the now current real time, a sleep for the remaining time occurs. Unfortunately, this option appears to have only a neglible effect on execution time. Execution statistics show an approximately 1 ms reduction in sleep time, e.g. 50 to 49 miliiseconds. This negligable effect reinforces the fact that most of ddcutil 's elapsed time is spent in DDC mandated delays and waiting for DDC IO to complete. ' Option: --dynamic-sleep-adjustment , (alternative name --dsa ) If retry is required, dynamically increases the delay time before subsequent retries, up to a maximum. Does not appear to have an appreciable effect on retry success, but it may be a useful alternative to option --sleep-multiplier .","title":"Less Useful Performace Related Command Optons"},{"location":"release_notes/#other-options","text":"Option: --timeout-i2c-io Causes (most) I2C read and write calls to eventually time out if they do not return. This has been implemented as a POSSIBLE way to address occasional reports of ddcutil locking up, with subsequent ddcutiil calls blocking behind it. This may become the default in future releases.","title":"Other Options"},{"location":"release_notes/#support-for-fglrx-removed","text":"ddcutil no longer supports AMD's old proprietary display driver fglrx . Command line option --adl is no longer recognized. configure option --with-adl has been removed.","title":"Support for fglrx removed"},{"location":"release_notes/#miscellaneous_2","text":"Command ddcutil environment should have output the message \"Group i2c does not exist\" if group i2c was not found. The critical word \"not\" was missing. Thank you Micha\u00ebl Defferrard. The display identifier cross-reference table output by command ddcutil environment --verbose has been modifed to handle multiple displays with an identical EDID. Certain LG Ultrawide monitors contain neither an ASCII nor binary serial number in their EDID. Consequently, all monitors of the same model have the same EDID. Display detection now reads the EDID a byte at a time, similarly to command get-edid . This is occasionaly more reliable than the standard multi-byte read code. Thank you \"InconsolableCellist\" for pointing out this difference between ddcutil and get-edid . I2C slave address (DDC) is once again checked during display detection. This had been removed in release 0.9.3 because it caused lockups on Dell XPS 13 laptops. To address this situation, slave address x37 is not checked for laptop displays, which never support DDC. Command ddcutil detect --verbose reports the result of the x37 test. This is presently purely for informational purposes. Correctly handle multiple relative values in a single setvcp string, e.g. $ddcutil setvcp 10 + 5 12 - 3 This frankly not very useful corner case had not been taken into account when relative setvcp values were implemented. Well, now it is. ddcutil issues an error message instead of aborting if an utterly nonsensical --sleep-multiplier value greater than 100 is specified, e.g. $ ddcutil detect --sleep-multiplier 200 # WRONG Verification is always disabled if setting VCP feature xDF (Power Mode) to 5. This is a write-only value that turns off the display. Verification can never succeed. Correct the spelling of \"Finnish\" in the list of On Screen Display languages for feature xCC. Thank you Simon Alling.","title":"Miscellaneous"},{"location":"release_notes/#tracing_1","text":"Trace group RETRY has been added. This subset of trace group DDCIO reports only retry activity. In a handful of unusual situations, trace messages are issued unconditionally, irrespective of the trace settings in effect. This is to highlight some rare situations, such as recovery from multiple DDC Null Messages. $ ddcutil getvcp 10 (ddc_write_read_with_retry) ddc_write_read() succeeded after 3 Null Messages If you encounter such a message, please report the circumstances in which it occurred.","title":"Tracing"},{"location":"release_notes/#building-ddcutil_3","text":"As noted above, ddcutil no longer supports AMD's old proprietary video driver fglrx . configure option --with-adl no longer exists. Reflecting changes to how the PCI and USB hardware ID tables are packaged, ddcutil now prioritizes pci.ids and usb.ids files in directory /usr/share/misc over those in /usr/share/hwdata. Packaging requires packages pci.ids, usb.ids, and usbutils, not hwdata. Corresponding changes have been made to configuration file configure.ac . Thank you Pino Toscano. Use of include file <sys/cdefs.h> has been eliminated. This include file does not exist on Alpine Linux.","title":"Building ddcutil"},{"location":"release_notes/#shared-library_1","text":"The SONAME for libddcutil is now libddcutil.so.3. For details see Shared Library Changes for Release 0.9.9 .","title":"Shared Library"},{"location":"release_notes/#098","text":"30 November 2019","title":"0.9.8"},{"location":"release_notes/#command-line-option-sleep-multiplier","text":"The DDC/CI specification dictates that the host computer wait 40-200 ms (depending on operation) between sending a command to the monitor and reading the response. As a result, ddcutil spends approximately 90% of its elapsed time sleeping. Many monitors respond properly with much shorter waits. On the other hand, there are some monitors that require longer waits to avoid DDC/CI errors. Option --sleep-multiplier applies a floating point multiplication factor to the DDC/CI specified sleep times. For example, --sleep-multiplier .5 causes 40 ms waits to become 20 ms, and --sleep-multiplier 4 causes 40 ms waits to beome 160 ms. Note that ddcutil may automatically increase wait times when peforming retries. Option --sleep-multiplier applies to the inital wait time. Option --sleep-multiplier can significantly speed up ddcutil execution - some monitors have been seen to operate properly with a sleep-multiplier as low as .1, Undocumented option -y for adjusting wait times is removed.","title":"Command line option --sleep-multiplier"},{"location":"release_notes/#command-line-options-thread-id-and-timestamp","text":"If option --thread-id (alternatively --tid ) is specified, trace messages are prefixed with the thread id number, e.g. [ 27044](ddc_get_nontable_vcp_value ) dh=Display_Handle[i2c: fd=3, busno=5], Reading feature 0x00 if option --timestamp (alternatively --ts ) is specified, trace messages are prefixed with the number of seconds since the start of program execution, e.g. [ 1.827](ddc_get_vcp_value ) Starting. Reading feature 0x00, dh=Display_Handle[i2c: fd=3, busno=9], dh->fd=3 If both options are specified, then both thread id and timestamp are shown.","title":"Command line options --thread-id and --timestamp"},{"location":"release_notes/#mouse-corruption-during-display-detection","text":"When examining USB devices to determine if they support the USB Monitor Control Class Specification , it was possible to hang USB connected mice. This change peforms a pre-check to ignore mice and keyboards. It affects: - Normal ddcutil commands, e.g. ddcutil detect - The usbenvironment command - Command chkusbmon , intended for use in UDEV rules.","title":"Mouse corruption during display detection"},{"location":"release_notes/#display-detection-messages","text":"When DDC/CI communication fails during display detection and a monitor is reported as an \"Invalid Display\", if the display appears to belong to a laptop, issue a message that laptop displays do not support DDC/CI. This should reduce the incidence of people needlessly trying to diagnose a DDC/CI communication failure. Command ddcutil detect now shows a blank instead of \"unspecified\" to indicate that an EDID is not found.","title":"Display Detection messages"},{"location":"release_notes/#miscellaneous_3","text":"Improve the output for feature x14 (Color Preset) to take into account the MH byte, which is defined in MCCS 3.0 and 2.2. ( Unfortunately, observed behavior on at least one MCCS 2.2 monitor, an HP Z22i, does not match the spec.)","title":"Miscellaneous"},{"location":"release_notes/#api-changes","text":"See Shared Library Changes for Release 0.9.8 for details.","title":"API Changes"},{"location":"release_notes/#097","text":"04 September 2019 Fixes the cause of a segfault during display detection if a monitor appearing to support the USB Monitor Control Class Specification , i.e. one that uses USB to communicate monitor settings, is connected to the system. Properly handle failure when querying a feature value using USB. Plug a minor memory leak during display detection when checking if a display is an eDP device, i.e. a laptop monitor. Thank you Federico. Some debug messages still occurring in production code were disabled. Minor code cleanup to avoid warnings in Coverity static analysis.","title":"0.9.7"},{"location":"release_notes/#096","text":"25 August 2019","title":"0.9.6"},{"location":"release_notes/#command-line-option-nousb","text":"This option disables the USB portion of display detection during ddcutil startup. There has been a user report that ddcutil sometimes freezes the trackpoint in a Lenovo keyboard with trackpoint (specifically Lenovo SK-8855) during display detection. The option provides a work around. Note that USB display detection is rarely required, as most monitors do not use USB to communicate settings. However, USB display detection is much, much faster than normal I2C display detection, so disabling it has a negligable effect on ddcutil execution time","title":"Command line option --nousb."},{"location":"release_notes/#api-changes_1","text":"See API Changes in Release 0.9.6 for details.","title":"API Changes"},{"location":"release_notes/#095","text":"24 February 2019","title":"0.9.5"},{"location":"release_notes/#feature-x72-gamma","text":"Added support for Virtual Control Panel feature x72 (Gamma). This is an unusual complex non-continuous feature in that its value can be changed by the user, and the parenthesized \"values\" in the capabilities string require special interpretation. The following commands have been modified: - ddcutil getvcp 72 : Interpret the output - ddcutil capabilities : Interpret the parenthesized \"values\" substring - ddcutil setvcp : See below.","title":"Feature x72 (Gamma)"},{"location":"release_notes/#command-setvcp_1","text":"Can now take 2 byte values an an argument. Values can be specified as hexadecimal (SH byte then SL) or as decimal (0..655335). Example: ddcutil setvcp 72 x7800 Specifies SH=x78 (native gamma=2.2), SL=x00 (absolute adjustment, ideal tolerance) Thanks to YamashitaRen for pointing out the need to allow for 2 byte values and helping test the support for feature x72.","title":"Command setvcp"},{"location":"release_notes/#configuration-and-diagnostics","text":"Contrary to existing documentation, kernel module i2c_dev is in fact required when using the proprietary Nvidia driver. Reported by Igor Ovsyanka. Kernel module documentation has been corrected, and command ddcutil environment has been updated.","title":"Configuration and Diagnostics"},{"location":"release_notes/#bug-fixes","text":"Fix the cause of an assert failure when displaying the value of feature x8F (Audio Treble) or x91 (Audio Bass). Reported by Igor Ovsyanka.","title":"Bug Fixes"},{"location":"release_notes/#monitor-quirks","text":"Instead of setting the \"unsupported feature\" bit in the getvcp reply packet for an unsupported feature, the Dell AW3418DW causes I2C failure with Linux errno EIO . ddcutil now interprets the EIO response as indicating an unsupported feature instead of reporting an error. This special handling currently applies only to the Dell AW3418DW.","title":"Monitor Quirks"},{"location":"release_notes/#miscellaneous_4","text":"Update file README.md and make it more usable as the github overview file.","title":"Miscellaneous"},{"location":"release_notes/#api-changes_2","text":"See API Changes in Release 0.9.5 for details.","title":"API Changes"},{"location":"release_notes/#094","text":"25 December 2018 Fix the cause of failure to build from source for the x32 ABI . The file output by the dumpvcp command no longer contains a TIMESTAMP_MILLIS field, the number of seconds since start of the machine epoch, typically January 1, 1970. This field, and its companion TIMESTAMP_TEXT , are ignored on input, so this change can only affect an external program that relies on the TIMESTAMP_MILLIS field, say for sorting. Thank you Jan Palus, who encountered the problem when building ddcutil for the PLD Linux distribution. Fix an execution failure that resulted from attempting to open an already opened display. This occured on the capabilities command when the vcp field in the string returned by the monitor was damaaged or missing, causing ddcutil to attempt to read the VCP version from feature 0xDF. Thank you Sergiy Domin for reporting this bug. Features 0x59..0x5E (6 axis separation values). Report these values as normal continuous (C) values instead of just uninterpreted bytes.","title":"0.9.4"},{"location":"release_notes/#093","text":"26 November 2018","title":"0.9.3"},{"location":"release_notes/#display-detection","text":"Display detection no longer performs initial probes of I2C slave addresses on each possible /dev/i2c device. These initial probes do not return valid information on a Dell P2715Q, and have been seen to cause screen corruption on Dell XPS 13 laptops. In addition, /dev/i2c devices for Synopsys DesignWare are automatically skipped. Thank you Robert Munteanu for reporting and helping diagnose the P2715Q issues. Thank you Federico, developer of CLightd which uses the ddcutil API, jghauser, and especially Dr-Ongo for extensive help in reporting and diagnosing the Dell XPS 13 screen corruption. As a result of the changes to display detection, ddcutil detect --verbose no longer reports the presence of slave addresses x30 (EDID block number) or x37 (DDC), but does report whether a display is an Embedded Display Port (eDP) device, which is the case for recent laptop displays. It also reports the sysfs device name.","title":"Display Detection"},{"location":"release_notes/#user-supplied-feature-definitions","text":"ddcutil internals have been extensively restructured for future support of user supplied feature definitions. This will allow users to supply feature definitions for manufacturer reserved features, i.e. those in the range xe0..xff. While not yet ready for public use, there are a couple changes already visible in the user interface Command option Explanation --udef check for user supplied feature definitions --noudef do not check for user suplied feature definitions (currently the default) The following feature group has been added: Group name Explanation USER or UDF features having a user supplied feature definition","title":"User Supplied Feature Definitions"},{"location":"release_notes/#tracing_2","text":"Added trace groups: Name Purpose UDF user defined features DDCIO low level DDC functions VCP feature metadata Because of the volume of output, trace group \"DDC\" has been split into DDC and DDCIO, with the latter containing low level DDC services.","title":"Tracing"},{"location":"release_notes/#api-changes_3","text":"The C API has had a few changes to support user supplied feature definitions and reflecting experience gained from work on the Qt C++ GUI interface. See API Changes in Release 9.3 for details.","title":"API Changes"},{"location":"release_notes/#miscellaneous_5","text":"Vebose output of the environment command now displays execution timestamps to aid in interpreting system logs.","title":"Miscellaneous"},{"location":"release_notes/#092","text":"01 September 2018","title":"0.9.2"},{"location":"release_notes/#command-ddcutil-detect","text":"Eliminate the Supports DDC: line. The output of this line reflects the result of a simple test for slave address x37 at the I2C layer. During display detection, ddcutil also attempts a real DDC exchange at the higher, DDC layer of code, and relies on this result to determine whether the monitor supports DDC. The simple x37 test is vestigial and has no effect on program logic. It also has been shown to be inadequate. It has been reported that the Dell P2715Q sometimes fails the simple x37 test even though it supports DDC. On the other hand the x37 test succeeds on a Dell U3011 when DDC is turned off in the OSD. Thank you Robert Muntreanu for the Dell P2715Q report. The result of the x37 test is still reported as part of the --verbose output of detect . Eliminate duplicate displays for DisplayPort connected monitors. Under some circumstances, a DisplayPort connected monitor is assigned two /dev/i2c devices, and detect would report two (identical) monitors. However, only one of the /dev/i2c devices supports DDC communication. This change addresses the problem for the nouveau driver, and only defines a ddcutil display for the good /dev/i2c device.","title":"Command ddcutil detect"},{"location":"release_notes/#command-ddcutil-help","text":"Include command scs (Save Current Settings) in the output of ddcutil --help . ddcutil scs executes a Save Current Settings operation, which is supported by some but not all DDC capable displays. This command was implemented some time ago, but was not described in the help output.","title":"Command ddcutil --help"},{"location":"release_notes/#command-ddcutil-environment","text":"When checking for group i2c membership, issue a special message if running as root instead of the generic message that the current user is not a member of group i2c.","title":"Command ddcutil environment"},{"location":"release_notes/#usb-connected-displays","text":"Fix an invalid feature read of a USB connected display, observed when getting the controller manufacturer but VCP feature code xC8 is unsupported. When reading a USB report, regard errno EINVAL as an expected indication that no value is found rather than an unexpected status code.","title":"USB connected displays"},{"location":"release_notes/#tracing_3","text":"Fix the cause of a segfault when tracing a write-only DDC exchange (i.e. setting a VCP value) Disable debug messages regarding device id table initialization in the environment command. Eliminate double newlines in several error and trace messages","title":"Tracing"},{"location":"release_notes/#building-ddcutil_4","text":"libusb function libusb_set_debug() is deprecated in recent libusb versions, in favor of libusb_set_option() , resulting in a compiler warning when flag -Wdeprecated-declarations is set. Calls to libusb_set_debug() in file libusb_util.c are replaced by iftested code that uses the proper function. Fix an unreachable assert() statement in file execution_stats.c that was detected by compiling with option -Werror-switch-unreachable. Thank you Jonathan Scruggs. Add \"__attribute__ ((deprecated))\" statements to functions ddca_report_active_displays() and ddca_get_feature_name_by_display() , in header file ddcutil_c_api.h . The inline documentation for these function already indicated their deprecated status.","title":"Building ddcutil"},{"location":"release_notes/#091","text":"27 May 2018","title":"0.9.1"},{"location":"release_notes/#bug-fix","text":"Fix the cause of an abort that may occur on command environment --verbose when examining an extremely large log file.","title":"Bug Fix"},{"location":"release_notes/#090","text":"13 May 2018","title":"0.9.0"},{"location":"release_notes/#significant-command-line-changes","text":"Two enhancements will be of interest to general users: The setvcp command now allows new values for Continuous type features to be specified as relative values, e.g. the following commands increase or decrease the value of the brightness feature by 5. $ ddcutil setvcp 10 + 5 $ ddcutil setvcp 10 - 5 Note that parsing requires that \"+\" and \"-\" be surrounded by spaces. Option --no-table is now the default. Table type features are by default not included in most feature groups specified on getvcp , e.g. getvcp known . Features of type Table are rare. The DDC/CI spec does not provide a clean way for getvcp to determine that a table feature does not exist. As a result, getvcp typically has to exceed its retry count before giving up. (Exclusion of table features does not occur if a feature is explicitly specified by its hex code, or for feature groups TABLE or LUT .) The --no-table (formerly --notable ) and -show-table options explicitly control this behavior. Note that --no-table does not apply for subsets TABLE or LUT. For subsets SCAN and MANUFACTURER, the effect of --show-table / --no-table on manufacturer-specific feature codes (xe0..xff) is more complicated. ddcutil has no information about the feature characteristics of manufacturer-specific codes. Normally, it attempts only a non-table read. However, if both --verbose and --show-table are in effect, then a table read is attempted as well as a non-table read.","title":"Significant Command Line Changes"},{"location":"release_notes/#reporting-unsupported-features","text":"The interpretation of --show-unsupported has been tweaked. This option applies to command getvcp . (The probe command always reports unsupported features.) Command getvcp reports unsupported features if any of the following hold: - A specific feature was specified by its code, as opposed to a feature set. - Verbose output is in effect - Option --show-unsupported was specified. Option --show-unsupported is no longer automatically set for feature set ALL , which is now simply a synonym for KNOWN .","title":"Reporting Unsupported Features"},{"location":"release_notes/#options-rw-ro-wo","text":"Options --rw and --ro apply to both the getvcp and vcpinfo commands. Option --wo applies only to vcpinfo . If specified, features shown are restricted to those that are read-write, read-only, or write-only. For example: $ ddcutil getvcp all --ro","title":"Options --rw, --ro, --wo"},{"location":"release_notes/#option-mccs","text":"Filters the information returned by vcpinfo to that for the specified MCCS version. For example, $ ddcutil vcpinfo --mccs 2.1 Feature selection for ddcutil vcpinfo table is not properly version sensitive. -- take version from monitor selection if specified (VERIFY) -- option --mccs-version to force specific version","title":"Option --mccs"},{"location":"release_notes/#feature-set-identifiers","text":"Additional feature sets have been defined for the getvcp and vcpinfo commands. They surface internal ddcutil feature descriptions, and are intended to facilitate exploring the MCCS specification and its implementation on particular monitors. They will likely be of interest to only a few user. Feature Set Description SCONT Simple Continuous features CCONT Complex Continuous features CONT All Continuous features SNC NC features having a defined set of features for byte SL CNC NC features using multiple bytes NC_WO NC features that are Write NC_CONT Features of type NC that reserve specified values as flags, alloting the remaining values to a continuous range NC All Non-Continuous features MFG is now a valid synonym for feature set MANUFACTURER. Feature sets KNOWN and ALL are now synonyms.","title":"Feature Set Identifiers"},{"location":"release_notes/#miscellaneous_6","text":"The VCP file created by dumpvcp now includes a PRODUCT_CODE field including the manufacturer product code from the EDID. For some manufacturers, the model name in the EDID does not in fact distinguish among models. Notably, Samsung commonly uses just \"Syncmaster\" for the model name. Currently, loadvcp recognizes this field name but does not make use of the value.","title":"Miscellaneous"},{"location":"release_notes/#building-ddcutil_5","text":"Eliminate compiler flag -Wpedantic in Makefiles. This flag had been added to diagnose some obscure compiler warnings regarding system header files. It was flagging perfectly valid code as problematic, and caused build failures on Gentoo. Code changes to avoid -wformat-overflow , -wformat-truncation , and -wstringop-trunction warnings introduced with GCC 8, generally by making buffers larger. (All such warnings had flagged situations that never would result in buffer overflow.)","title":"Building ddcutil"},{"location":"release_notes/#api-changes_4","text":"The C API has been extensively revised reflecting experience gained from work on a Qt C++ GUI interface. See API Changes in Release 9.0 for details. Work on Python API has been suspended. Proof of concept implementations exist in the source tree for implementations using GObject API. SWIG, CFFI, and and Cython. However, these are incomplete and not intended for public use.","title":"API Changes"},{"location":"release_notes/#086","text":"20 January 2018 The externally visible changes in this release include minor enhancements and bug fixes. There are also changes in the C API. Internally, there have been extensive changes in support of the C and (future) Python APIs.","title":"0.8.6"},{"location":"release_notes/#user-interface-changes","text":"Because of the design of the DDC/CI protocol, there is no certain way to distinguish a response indicating that a feature of type Table (T) is unsupported from a DDC/CI protocol error. As a result, ddcutil getvcp performs the maximum number of retries on a Table type feature before giving up. However, Table type features are rarely implemented. The new --notable option allows Table type features to be ignored, speeding up execution of getvcp commmands for multiple features. Option --notable applies if the argument to getvcp is a feature set, e.g. COLOR or KNOWN instead of a single feature id. In that case Table type features are ignored.","title":"User Interface Changes"},{"location":"release_notes/#c-api-changes","text":"","title":"C API changes"},{"location":"release_notes/#replace-structs-that-use-iftests","text":"Structs DDCA_Single_Vcp_Value and DDCA_Non_Table_Value_Reponse used preprocessor #iftests for endian-ness to properly overlay the 2 byte continuous values (e.g. max value) on a pairs of 1 byte NC values (e.g. ml, mh). The use of #iftests proved incompatible with Python C function interface systems (e.g. Cython, CFFI). Struct DDCA_Single_Vcp_Value has been replaced by struct DDCA_Any_Vcp_Value . Function ddca_get_single_vcp_value() has been replaced by fuction ddca_get_any_vcp_value() , which uses DDCA_Any_Vcp_Value . Struct DDCA_Non_Table_Value_Response has been replaced by struct DDCA_Non_Table_Value . Function ddca_get_non_table_value() now returns a DDCA_Non_Table_Value , not a DDCA_Non_Table_Value_Response . DDCA_Any_Vcp_Value and DDCA_Non_Table_Value do not define 2 byte current and max values for Continuous (C) features. The 2 byte current and max values must be calculated from the appropriate pairs of single byte values, e.g. cur_val = sh << 8 | sl","title":"Replace structs that use #iftests"},{"location":"release_notes/#eliminate-use-of-longjmp","text":"The use of longjmp() to handle exceptional error condiitions (typically program logic errors) has been eliminated. API functions removed: ddca_register_jmp_buf() , ddca_get_global_failure_information() Structs removed: DDCA_Global_Failure_Information","title":"Eliminate use of longjmp"},{"location":"release_notes/#miscellaneous_7","text":"Add trace class ENV for tracing environment related functions Internally, many functions in key portions of the code base now return exception-like structs instead of status codes. Option --excp causes ddcutil to report these exception-like structs when they are converted to status codes (and the internal detail is discarded).","title":"Miscellaneous"},{"location":"release_notes/#bug-fixes_1","text":"Fix cause of a segfault in the environment command on Arch Linux due to the lack of the \"arch\" command in that distribution. Thank you Despruk. Fix a segfault when probing DRM using the environment command on aarch64. Fix a typo in the recommendations section at the end of the environment command. Thank you Mirek Svoboda","title":"Bug Fixes"},{"location":"release_notes/#085","text":"16 November 2017 This release contains a large number of minor enhancements and bug fixes. Most significant are those related to alternative environments, such as Raspberry Pi systems. Those running ddcutil on a 32 bit system, either i386 or Raspberry Pi, should upgrade to address a segfault in the environment command. Otherwise, there is no need to upgrade to this release unless you are experiencing problems.","title":"0.8.5"},{"location":"release_notes/#changes-to-facilitate-scripting","text":"Do not output a warning message regarding undetected VCP version if message level is --terse . \"Display not found\" message now directed to stderr instead of stdout.","title":"Changes to facilitate scripting"},{"location":"release_notes/#packaging","text":"Changes to meet Debian distribution standards. Clean up debian/rules and other files in the debian directory. Add a changelog file, normally installed in file /usr/share/doc/ddcutil/Changelog. Rename NEWS file to NEWS.md Add configure option --enable-x11 / --disable-x11 . The default is --enable-x11 . If --disable-x11 is specified, ddcutil is built without X11 related code, which is used only for diagnostics within the environment command. Directory package has been removed from the ddcutil git tree and is no longer included in the tarball. This more cleanly separates \"downstream\" from \"upstream\" activities. Packagers for Linux distributions should contact if this creates problems.","title":"Packaging"},{"location":"release_notes/#command-environment-enhancements","text":"The environment command is extensively revised. The increasingly large collection of tests has been consolidated. In particular: Tests are now sensitive to machine architecture. Performs alternative tests on arm systems, inlcuding the Raspberry Pi. Added a consolidated collection of suggestions at the end that suggest ways for the user to address configuration issues. Fixed a bug that caused a segfault in 32 bit versions of ddcutil . Use of shell commands has largely been replaced with API calls, addressing some obscure shell errors.","title":"Command environment enhancements"},{"location":"release_notes/#glib-20","text":"The required glib-2.0 version has been increased from 2.16 to 2.32 reflecting the use of glib thread functions. Consequently, ddcutil no longer builds on some older Linux distributions.","title":"glib-2.0"},{"location":"release_notes/#bug-fixes_2","text":"Fix a logic error in the VCP version comparison function vcp_version_le(). This bug affected only audio related VCP feature codes x8f, x91, and x93. It also affected experimental command watch which listens for monitor changes not made by ddcutil , i.e. by pressing buttons on the monitor. Properly handle the failure case where a display is detected on an I2C bus (EDID is read) but DDC communication fails, and the user specifies the display on the command line using the I2C bus number (option --bus ). Fix the cause of a segfault when the loadvcp command reads a user modified VCP file. The command now fails gracefully if none of MFG_ID, MODEL, and SN are present. Fix the cause of a segfault when displaying I2C functionality flags in the --environment command. This segfault was seen only in 32 bit versions of ddcutil . The --stats option showed incorrect time statistics on 32 bit versions of ddcutil . Add \"-lddcutil\" to output of \"pkgconfig ddcutil --libs\". Thank you Federico.","title":"Bug fixes"},{"location":"release_notes/#miscellaneous_8","text":"Improve reporting of the individual errors that result in command failure due to maximum I2C retries exceeded. interrogate , environment and usbenvironment now redirect all stderr output to stdout for easier capture Added command line options -trcfile and -trcfunc to enable tracing by file name and function name. Added configuration option --enable-x11 controlling whether X11 related diagnostics are included in the environment and interrogate commands, allowing ddcutil to build in embedded environments that lack X11. The default is yes . Verbose EDID decription, e.g. on command detect --verbose , now reports EDID byte 24 (x14), the supported features bitmap. This is purely informational. Ongoing work to make functions thread safe. Code cleanup.","title":"Miscellaneous"},{"location":"release_notes/#084","text":"22 July 2017 This release primarily contains packaging changes to meet Fedora distribution standards. It also includes minor improvements and bug fixes. There is no need to install it unless you are experiencing problems.","title":"0.8.4"},{"location":"release_notes/#command-ddcutil-interrogate","text":"Do not include usbenvironment diagnostics as part of the interrogate command. USB connected monitors are rare and USB related diagnostics clutter the report.","title":"Command ddcutil interrogate"},{"location":"release_notes/#libddcutil-devel","text":"Do not package static libraries (.a and .la files) in libddcutil-devel.","title":"libddcutil-devel"},{"location":"release_notes/#bug-fixes_3","text":"Prevent a segfault in monitor detection that occurrs when slave address x50 is detected on an I2C bus, but reading the EDID at that address fails. Address an assert failure in the ddcutil usbenvironment command due to an unexpected library return code. In the device identification cross reference report of ddcutil environment , properly handle I2C bus number -1, used internally to indicate unknown.","title":"Bug fixes"},{"location":"release_notes/#082","text":"17 May 2017 This release introduces minor improvements to the diagnostic output of the environment , detect , and interrogate commands. There is no need to install it unless you are experiencing problems.","title":"0.8.2"},{"location":"release_notes/#command-ddcutil-detect_1","text":"If a display appears to support DDC (I2C slave address x37 is active) but communication fails, perform a heuristic test as to whether it is a laptop display, issue message appropriately. Changes to reduce the number of feature reads performed when detecting monitors, slightly improving performance.","title":"Command ddcutil detect"},{"location":"release_notes/#option-stats-errors","text":"Maintain and report a secondary count of the individual errors that are rolled up into \"retry count exceeded\" errors.","title":"Option --stats errors"},{"location":"release_notes/#ddcutil-environment-verbose-changes","text":"Eliminate checks for package i2c-tools Report additional information about system hardware Add a cross reference report for the multiple ways that different subsystems identify a monitor and its I2C bus Consolidate some tests to reduce redundancy Check for DisplayPort Multi-Stream Technology (DPMST) devices Eliminate the cause of a bogus error message when scanning devices","title":"ddcutil environment --verbose changes"},{"location":"release_notes/#packaging_1","text":"Changes to the requirements of package i2c-tools . Generally speaking, it is no longer needed for building ddcutil , and is optionally used as part of the diagnostic output of the environment command. Changed from Requires: to Suggests: for dpkg Requires: and BuildRequires: eliminated for rpm packaging in general BuildRequires: kept for SuSE rpm packaging. ddcutil needs file linux/i2c-dev.h, which is contained in package i2c-tools in SuSE releases through 13.2 Changes to packaging to conform to Debian standards Changes to packaging to conform to Fedora standards","title":"Packaging"},{"location":"release_notes/#081","text":"06 May 2017 This is a bugfix release. There is no need to install it unless you are experiencing the segfault described below. Fixes a segfault that can occur after open() fails for a /dev/usb/hiddev device.","title":"0.8.1"},{"location":"release_notes/#080","text":"01 May 2017 Release 0.8.0 contains new features intended to address issues with particular monitors and user environments, to changes to improve performance, and code restructuring for future enhancements","title":"0.8.0"},{"location":"release_notes/#general-changes_1","text":"Monitor detection and cataloging has been extensively reworked. To support the library version of ddcutil used by the C (and future Python) APIs, the list of displays is determined at program/library initialization and saved. The processing of the DDC Null Response has changed. Normally a Null Response indicates a processing error in the monitor. Some monitors also use the Null Response to indicate that a VCP feature is unsupported. ddcutil now performs an extended sleep when receiving a Null Message response to allow the monitor to recover. It also performs an initial check of whether a monitor uses DDC Null Response to indicate unsupported features. See DDC Null Response . Linux error numbers no longer appear \"modulated\" in messages. That is, an EACCES error is reported as -13, not -1013. Note that the C API has always returned Linux error numbers in unmodulated form.","title":"General Changes"},{"location":"release_notes/#general-options","text":"Option --async parallelizes the monitor checks executed during display detection. If there are multiple monitors, initial monitor checks are performed in multiple threads, improving performance. This may become the default in future releases. Option --nodetect is valid if the display is specified by its I2C bus number, using option --bus . In that case the initial detection of all displays is skipped, improving performance. This may become the default in future releases. Option --hiddev specifies a USB monitor connection by its hiddev device number. For example: --hiddev 3 refers to device /dev/usb/hiddev3. There is no single letter specifier for this option. Option --brief is now a synonym for --terse Added --stats class elapsed . --stats time is a synonym for --stats elapsed . Shows program elapsed time.","title":"General Options"},{"location":"release_notes/#changes-to-specific-commands","text":"environment and interrogate commands: Report ddcutil version probe , interrogate , and getvcp scan commands: Do not include table features unless output level is VERBOSE. This speeds up execution as table reads for unsupported features execute the maximum number of retries. It also clarifies performance statistics. No monitors implementing table type features have yet been observed. interrogate command: Report performance statistics for individual parts of interrogate . getvcp command: If --terse output is specified, then the VCP data is output in a form that is easily machine readable. See getvcp command setvcp and loadvcp commands: By default, setvcp and loadvcp verify that a value has been successfully set by reading the value from the monitor after writing it. Option --noverify disables this check.","title":"Changes to Specific Commands:"},{"location":"release_notes/#bug-fixes_4","text":"Fixed a segfault that occurred when a monitor returned a 0 length capabilities string. Variables holding nanoseconds have been changed from type long to uint64_t to address overflow problems on 32 bit systems such as Raspberry Pi.","title":"Bug Fixes"},{"location":"release_notes/#c-api","text":"The C API has undergone extensive changes.","title":"C API"},{"location":"release_notes/#name-changes","text":"Names have been changed for consistency and clarity. Names of certain functions used in message generation have been shortened to simplify printf() type functions. Old typedef name New typedef name VCP_Feature_Code DDCA_Vcp_Feature_Code Version_Feature_Info DDCA_Version_Feature_Info Vcp_Value_Type DDCA_Vcp_Value_Type Single_Vcp_Value DDCA_Single_Vcp_Value Old function name New function name ddca_status_code_name() ddca_rc_name() ddca_status_code_desc() ddca_rc_desc() ddca_repr_display_identifier() ddca_did_repr() ddca_create_display_ref() ddca_get_display_ref() ddca_repr_display_ref() ddca_dref_repr() ddca_repr_display_handle() ddca_dh_repr() ddca_get_displays() ddca_get_display_info_list() ddca_repr_mccs_version() ddca_mccs_version_id_name() ddca_mccs_version_id_string() ddca_mccs_version_id_desc() Comments: - Function ddca_create_display_ref() was renamed to ddca_get_display_ref() to reflect the fact that it returns a DDCA_Display_Reference from the internal data structures representing detected displays. Struct Old field name New field name DDCA_Ddcutil_Version_Spec build micro Enum Old value name New value name DDCA_Output_Level OL_TERSE DDCA_OL_TERSE DDCA_Output_Level OL_NORMAL DDCA_OL_NORMAL DDCA_Output_Level OL_VERBOSE DDCA_OL_VERBOSE DDCA_IO_Mode DDC_IO_DEVI2C DDCA_IO_DEVI2C DDCA_IO_Mode DDC_IO_ADL DDCA_IO_ADL DDCA_IO_Mode USB_IO DDCA_IO_USB DDCA_Vcp_Value_Type NON_TABLE_VCP_VALUE DDCA_NON_TABLE_VCP_VALUE DDCA_Vcp_Value_Type TABLE_VCP_VALUE DDCA_TABLE_VCP_VALUE","title":"Name Changes"},{"location":"release_notes/#structs-and-functions-removed","text":"Structs removed Comment DDCA_IO_Location Use DCCA_IO_Path Functions removed Comment ddca_built_with_adl() Use ddca_get_build_options() ddca_built_with_usb() Use ddca_get_built_options()","title":"Structs and Functions Removed"},{"location":"release_notes/#enums-structs-and-functions-added-or-changed","text":"New enum Purpose DDCA_Stats_Type Used as both values and bitflags for statistics types New Structs Purpose DDCA_Adlno Represents a ADL adapter number/display number pair DDCA_IO_PATH Physical path for MCCS communication Comments: Struct DDCA_Display_Location is replaced by DDCA_IO_Path , which contains only the io mode and device identifiers for that mode. USB bus and device numbers were removed because they are attributes by which the physical path (hiddev device) can be found, not the path itself. Struct DDCA_Display_Info has been adjusted to use DDCA_IO_Path . Function added Purpose ddca_ddcutil_version() gets version as a struct of numbers ddca_reset_stats() reset performance statistics ddca_show_stats() report performance statistics ddca_enable_verify() controls whether VCP values are read after being set ddca_is_verify_enabled() queries whether VCP values are verified ddca_free_display_info_list() free function for struct ddca_create_usb_hiddev_display_identifier() create identifier for hiddev number ddca_get_simple_nc_feature_value_name() lookup name of simple NC feature value","title":"Enums, Structs, and Functions Added or Changed"},{"location":"release_notes/#other-changes","text":"Functions now return Linux error number -EINVAL rather than DDC specific error number DDCL_ARG in case of invalid argument The display selection lifecycle has been changed. The DDCA_Display_Identifier is not the only way to obtain a DDCA_Display_Reference . It can be found in one of 2 ways: Function ddca_get_display_info_list() returns a collection DDCA_Display_Info , containing display identification information (e.g. ddcutil assigned display number, I2c Bus number, manufacturer id, etc.) and a display reference. The client program can search through the returned collection to find the desired monitor. A DDCA_Display_Identifier can be created and passed to ddca_get_display_ref(), which returns a DDCA_Display_Reference . See sample program demo_display_selection.c for examples.","title":"Other Changes"},{"location":"release_notes/#sample-code-files","text":"The following example files for using the C API have been added: File name Purpose demo_global_settings.c Report and modify global settings demo_display_selection.c Display selection demo_vcpinfo.c Query VCP feature code descriptons demo_get_set_vcp.c Get and set VCP values File clmain.c is now a miscellaneous catchall, mainly for testing.","title":"Sample code files:"},{"location":"release_notes/#build-system-changes","text":"src/Makefile.am: change dist-hook to use -prune option per Knut Omang; avoids eror in case there is nothing to erase (i.e. build hasn't happened) Added cmake file FindDDCUtil.cmake from Dorian Vogel","title":"Build system changes"},{"location":"release_notes/#073","text":"05 March 2017 Maintenance release. Add additional diagnostic tests to command ddcutil environment --verbose *. New configure option --enable-drm . If enabled (the default), command ddcutil environment --verbose includes additional tests that use DRM services to better analyze disrepancies observed in the field between the EDID read directly from the monitor and that reported by X11. Option --enable-drm requires that a recent version (>= 2.4.67) of the development package for libdrm2 (libdrm-dev or libdrm-devel depending on Linux distribution) be installed when building ddcutil . If a sufficently recent version is not detected, configure issues a warning and reverts to --disable-drm . If minimizing executable size is important, set --disable-drm , as DRM services are used only for diagnostics. Additional information on ddcutil detect --verbose . Report and interpret USB vendor id/product id when detect cannot open a hiddev device. This is usually benign, and identifying the device should make this evident. Suggest that the user check that DDC/CI is enabled in the monitor's on screen display if I2C bus x37 (DDC) is responsive, but DDC communication fails.","title":"0.7.3"},{"location":"release_notes/#072","text":"01 February 2017 Maintenance release. Fixes a critical bug in release 0.7.1 where insufficient privileges on a /dev/i2c-n device causes program termination. ddcutil interrogate always executes with --set-slave-address in effect Minor improvements to ddcutil environment and ddcutil interrogate output Minor improvements to ddcutil detect --verbose Add explanations for additional errno values","title":"0.7.2"},{"location":"release_notes/#071","text":"27 January 2017 Mantenance release. Add option --force-slave-address which causes ddcutil to take control of slave addresses on the I2C bus even if they are in use. Internally, ioctl(I2C_FORCE_SLAVE) is called instead of ioctl(I2C_SLAVE) . This is intended as a possible workaround for situations where monitors on an I2C bus are not detected. See Option --force-slave-address Option --force disables various checking. It's use is likely to result in command failure, but may provide useful information as to the source of problems. See Option --force Fix the cause of a segfault when displaying statistics for option --stats errors or simply --stats , or on the interrogate command. make install will not install C header files unless configuration option --enable-lib is set. Fix the cause of a Makefile error when trying to strip dependency information from libddctuil.la during make install . Extensive rework of Autotools files for future support of Python 3 as well as Python 2. This work is incomplete. Emit diagnostic messages to aid in debugging certain situations seen only in the field.","title":"0.7.1"},{"location":"release_notes/#070","text":"03 January 2017 C API Should be fairly stable, though not all features of ddcutil are exposed. Reflecting the presence of APIs, the default for the --enable-lib configuration option is now \"yes\". The following shared object library is created: libddcutil.so Additional prebuilt packages: libddcutil0, libddcutil-dev (Debian, Ubuntu) or ddcutil-devel (Fedora, SUSE) Python API The Python API, implemented using SWIG, is a rough proof of concept and subject to major change. SWIG support is only available by building from source, not from pre-built packages. Requires --enable-swig configuration option. A new command line option --mfg , which allows for monitor selection using the 3 character manufacturer id found in the EDID. --model and -sn no longer need to specified together. If any of --mfg , -model , and -sn are specified, the first monitor to match all of the manufacturer/model/serial-numbers that are specified is chosen. The monitor feature and capabilities portion of interrogate has been enhanced. This functionality is also exposed using the new probe command which operates on a single monitor. Parsing of the capabilities string is enhanced to accomodate monitors that do not separate feature codes by blanks.","title":"0.7.0"},{"location":"release_notes/#061","text":"21 November 2016 Maintenance release. Improve recovery and diagnotistic messages for certain exceptional conditions. Command ddcutil interrogate now reports the differences between VCP codes declared in the capabilities string and those observed by scanning. Extensive internal changes in preparation for future C and Python APIs.","title":"0.6.1"},{"location":"release_notes/#060","text":"01 October 2016 Rename project from ddctool to ddcutil. Primary executable is now named ddcutil Shared library is now named libddcutil.so Tarball is now named ddcutil.n.n.n.tar.gz","title":"0.6.0"},{"location":"release_notes/#053","text":"24 September 2016 Fix overzealous code cleanup in release 0.5.1. Undefined reference to function is_module_loaded_using_sysfs() when building without ADL support. Error in command parsing. Command arguments were ignored.","title":"0.5.3"},{"location":"release_notes/#051","text":"23 September 2016 Minor improvements to diagnostics of the environment and interrogate commands: Check if i2c_dev is built into the kernel as an alternative to it being a loadable kernel module Recognize amdgpu video driver","title":"0.5.1"},{"location":"release_notes/#05","text":"09 September 2016 This is the first formal release of ddcutil Rework USB monitor support based on testing with Eizo Coloredge and NEC PA series -- Probing of USB connected monitors is greatly extended and refactored from ddcutil environment into a separate command ddcutil usbenv . Libraries hidraw and libusb are used as well as hiddev. HID Report Descriptors are parsed. This probing is included in ddcutil interrogate . -- configure option --enable-usb/--disable-usb controls whether ddcutil is built with USB monitor support. The default is --enable-usb . When building with USB support, packages for udev, hidraw, hiddev, and libusb are required. Simplify README.md. Refer to www.ddcutil.com for most documentation The assumption that I2C buses are numbered consecutively is removed. Required for Raspberry Pi. Allow a display to be specified on the command ddcutil loadvcp . This addresses the situation where a monitor presents both an I2C and a USB interface. Normally, the display is determined using the data stored in the VCP file, and the I2C display interface is chosen over the USB interface. If a display is specified, then the model and sn from its EDID must match those in the VCP data being loaded. Add ddcutil command option --timestamp/--ts . If specified, trace messages are prefaced with an elapsed timestamp. Because of changing package requirements, ddcutil no longer builds in the openSUSE Build Service (OBS) for older OS versions (openSUSE 13.1, Ubuntu 12.04, 14.04). ddcutil currently does not build for any openSUSE version in the openSUSE Build Service due to violation of policy guidelines. This problem will be addressed in a subsequent release. openSUSE users can build ddcutil from its tarball.","title":"0.5"},{"location":"releases/","text":"Releases ddcutil Tarballs These ddcutil tarballs were created using command make dist . Note that the tarballs generated by GitHub are not byte-identical, though they are functionally the same. ddcutil-0.7.0.tar.gz ddcutil-0.7.1.tar.gz ddcutil-0.7.2.tar.gz ddcutil-0.7.3.tar.gz ddcutil-0.7.4.tar.gz ddcutil-0.8.0.tar.gz ddcutil-0.8.1.tar.gz ddcutil-0.8.2.tar.gz ddcutil-0.8.3.tar.gz ddcutil-0.8.4.tar.gz ddcutil-0.8.5.tar.gz ddcutil-0.8.6.tar.gz ddcutil-0.9.0.tar.gz ddcutil-0.9.1.tar.gz ddcutil-0.9.2.tar.gz ddcutil-0.9.3.tar.gz ddcutil-0.9.4.tar.gz ddcutil-0.9.5.tar.gz ddcutil-0.9.6.tar.gz ddcutil-0.9.6.tar.gz ddcutil-0.9.7.tar.gz ddcutil-0.9.8.tar.gz ddcutil-0.9.9.tar.gz ddcutil-1.0.0.tar.gz ddcutil-1.0.1.tar.gz ddcutil-1.0.2.tar.gz ddcutil-1.1.0.tar.gz ddcutil-1.1.1.tar.gz ddcutil-1.2.0.tar.gz ddcutil-1.2.1.tar.gz ddcutil-1.2.2.tar.gz ddcutil-1.3.0.tar.gz ddcutil-1.3.2.tar.gz ddcutil-1.4.0.tar.gz ddcutil-1.4.1.tar.gz ddcutil-1.4.2.tar.gz ddcui Tarballs These ddcui tarballs were created using command git archive . ddcui-0.1.0.tar.gz l ddcui-0.1.1.tar.gz ddcui-0.1.2.tar.gz ddcui-0.2.0.tar.gz ddcui-0.2.1.tar.gz ddcui-0.3.0.tar.gz","title":"Releases"},{"location":"releases/#releases","text":"","title":"Releases"},{"location":"releases/#ddcutil-tarballs","text":"These ddcutil tarballs were created using command make dist . Note that the tarballs generated by GitHub are not byte-identical, though they are functionally the same. ddcutil-0.7.0.tar.gz ddcutil-0.7.1.tar.gz ddcutil-0.7.2.tar.gz ddcutil-0.7.3.tar.gz ddcutil-0.7.4.tar.gz ddcutil-0.8.0.tar.gz ddcutil-0.8.1.tar.gz ddcutil-0.8.2.tar.gz ddcutil-0.8.3.tar.gz ddcutil-0.8.4.tar.gz ddcutil-0.8.5.tar.gz ddcutil-0.8.6.tar.gz ddcutil-0.9.0.tar.gz ddcutil-0.9.1.tar.gz ddcutil-0.9.2.tar.gz ddcutil-0.9.3.tar.gz ddcutil-0.9.4.tar.gz ddcutil-0.9.5.tar.gz ddcutil-0.9.6.tar.gz ddcutil-0.9.6.tar.gz ddcutil-0.9.7.tar.gz ddcutil-0.9.8.tar.gz ddcutil-0.9.9.tar.gz ddcutil-1.0.0.tar.gz ddcutil-1.0.1.tar.gz ddcutil-1.0.2.tar.gz ddcutil-1.1.0.tar.gz ddcutil-1.1.1.tar.gz ddcutil-1.2.0.tar.gz ddcutil-1.2.1.tar.gz ddcutil-1.2.2.tar.gz ddcutil-1.3.0.tar.gz ddcutil-1.3.2.tar.gz ddcutil-1.4.0.tar.gz ddcutil-1.4.1.tar.gz ddcutil-1.4.2.tar.gz","title":"ddcutil Tarballs"},{"location":"releases/#ddcui-tarballs","text":"These ddcui tarballs were created using command git archive . ddcui-0.1.0.tar.gz l ddcui-0.1.1.tar.gz ddcui-0.1.2.tar.gz ddcui-0.2.0.tar.gz ddcui-0.2.1.tar.gz ddcui-0.3.0.tar.gz","title":"ddcui Tarballs"},{"location":"secondary_commands/","text":"Secondary Commands Secondary commands explore the ddcutil environment for diagnostic purposes, or perform other specialized functions. Command: environment Explores aspects of the system relevant to DDC communication (other than USB). Normal output provides information that may be helpful to the user in diagnosing things that need to be changed to enable ddcutil to execute. Option --verbose adds additional information that is helpful for remotely diagnosing ddcutil problems. Command: usbenvironment Explores USB related aspects of the ddcutil execution environment. See USB Connected Monitors . Command: probe Gathers monitor specific infomration, including the EDID and the VCP feature codes supported by the monitor. If there are multiple monitors, the monitor to be probed is specified in the usual way (option --display , etc.) Option --verbose increases the amount of information. Command: interrogate The granddaddy of all diagnostic functions. Includes vebose output from detect , environment , and for each monitor probe . For remote problem diagnosis, ddcutil environment --verbose is usually sufficient. Command: chkusbmon This command is used by UDEV rules. It checks if a USB device is a monitor. See Command ddcutil chkusbmon","title":"Secondary Commands"},{"location":"secondary_commands/#secondary-commands","text":"Secondary commands explore the ddcutil environment for diagnostic purposes, or perform other specialized functions.","title":"Secondary Commands"},{"location":"secondary_commands/#command-environment","text":"Explores aspects of the system relevant to DDC communication (other than USB). Normal output provides information that may be helpful to the user in diagnosing things that need to be changed to enable ddcutil to execute. Option --verbose adds additional information that is helpful for remotely diagnosing ddcutil problems.","title":"Command: environment"},{"location":"secondary_commands/#command-usbenvironment","text":"Explores USB related aspects of the ddcutil execution environment. See USB Connected Monitors .","title":"Command: usbenvironment"},{"location":"secondary_commands/#command-probe","text":"Gathers monitor specific infomration, including the EDID and the VCP feature codes supported by the monitor. If there are multiple monitors, the monitor to be probed is specified in the usual way (option --display , etc.) Option --verbose increases the amount of information.","title":"Command: probe"},{"location":"secondary_commands/#command-interrogate","text":"The granddaddy of all diagnostic functions. Includes vebose output from detect , environment , and for each monitor probe . For remote problem diagnosis, ddcutil environment --verbose is usually sufficient.","title":"Command: interrogate"},{"location":"secondary_commands/#command-chkusbmon","text":"This command is used by UDEV rules. It checks if a USB device is a monitor. See Command ddcutil chkusbmon","title":"Command: chkusbmon"},{"location":"shared_lib_config/","text":"Shared Library Configuration When installation is performed using a package (e.g. rpm, deb), the include file, shared libraries, and pkgconfig file are installed in the default system production locations. On Fedora, for example, these are: /usr/include, /usr/lib, and /usr/share/pkgconfig. If the package installation does not do it for you, it may be necessary to run ldconfig after installation to rebuild the shared library cache (normally file /etc/ld.so.conf) to make the shared libraries available. $ sudo ldconfig When installing from a .tar file, or building and installing from source, the situation is more complicated. As the saying goes, your mileage may vary. Include files, shared libraries, and pkg-config files are installed in distriibution specific local directories. (This can be altered by the --prefix and other options to configure , but that is beyond the scope of this discussion. For details, see Variables for Installation Directories . For example, on Fedora these are /usr/local/include , /usr/local/lib , and /usr/local/share/pkgconfig . Depending on distribution, these local directories may or may not be part of the standard path for the corresponding program. For example, /usr/local/lib may or may not be automatically searched by ldconfig , /usr/local/share/pkgconfig may or may not be searched automatically by pkg-config , and the directory containing ddcutil include files may or may not be part of the default include path. If they are, then as in the case of production locations, all that may be necessary is to execute ldconfig . Locating shared libraries If the shared libraries are not found, the following command shows the library search path: $ ld --verbose | grep SEARCH_DIR | tr -s ' ;' \\\\012 To check if the linker can locate all the libraries required by a program, use the ldd command. For example (assuming you're in the directory containing ddcui , which uses libddcutil ):: ldd ddcui To add a directory to search, set environment variable LD_LIBRARY_PATH prior to executing a program that requires the shared library. For example: $ export LD_LIBRARY_PATH=shared_library_directory:$LD_LIBRARY_PATH $ ./ddcui To permanently add the local library directory to the search path, create a .conf file in directory /etc/ld.conf.d that specifies the local library directory, or if appropriate add the library directory name to an existing .conf file. Locating include files To see the default include file path: $ gcc -xc++ -E -v If the local include directory is not in the default include path, you can add it to the default include directories, e.g. $ export INCLUDE=/usr/local/include Alternatively, you can rely on pkg-config to set the required directory at compile time. PKGCONFIG files If pkg-config is called as part of building Makefile , e.g. from autoconf/automake, cmake, or qmake, then the ddcutil pkg-config file ddcutil.pkg specifies the required include files, libraries, and library directories. Now it's ddcutil.pc that must be found by pkg-config . So the question becomes whether the local directory in which ddcutil.pc is installed is in the distribution-specific default search path. To see the the default search path: $ pkg-config --variable pc_path pkg-config To add a local directory to the pkg-config search path, set environment variable PKG_CONFIG_PATH. Note that this affects pkg-config when run by configure, cmake, qmake etc. Examples: $ export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig $ ./configure","title":"Shared Library Configuration"},{"location":"shared_lib_config/#shared-library-configuration","text":"When installation is performed using a package (e.g. rpm, deb), the include file, shared libraries, and pkgconfig file are installed in the default system production locations. On Fedora, for example, these are: /usr/include, /usr/lib, and /usr/share/pkgconfig. If the package installation does not do it for you, it may be necessary to run ldconfig after installation to rebuild the shared library cache (normally file /etc/ld.so.conf) to make the shared libraries available. $ sudo ldconfig When installing from a .tar file, or building and installing from source, the situation is more complicated. As the saying goes, your mileage may vary. Include files, shared libraries, and pkg-config files are installed in distriibution specific local directories. (This can be altered by the --prefix and other options to configure , but that is beyond the scope of this discussion. For details, see Variables for Installation Directories . For example, on Fedora these are /usr/local/include , /usr/local/lib , and /usr/local/share/pkgconfig . Depending on distribution, these local directories may or may not be part of the standard path for the corresponding program. For example, /usr/local/lib may or may not be automatically searched by ldconfig , /usr/local/share/pkgconfig may or may not be searched automatically by pkg-config , and the directory containing ddcutil include files may or may not be part of the default include path. If they are, then as in the case of production locations, all that may be necessary is to execute ldconfig .","title":"Shared Library Configuration"},{"location":"shared_lib_config/#locating-shared-libraries","text":"If the shared libraries are not found, the following command shows the library search path: $ ld --verbose | grep SEARCH_DIR | tr -s ' ;' \\\\012 To check if the linker can locate all the libraries required by a program, use the ldd command. For example (assuming you're in the directory containing ddcui , which uses libddcutil ):: ldd ddcui To add a directory to search, set environment variable LD_LIBRARY_PATH prior to executing a program that requires the shared library. For example: $ export LD_LIBRARY_PATH=shared_library_directory:$LD_LIBRARY_PATH $ ./ddcui To permanently add the local library directory to the search path, create a .conf file in directory /etc/ld.conf.d that specifies the local library directory, or if appropriate add the library directory name to an existing .conf file.","title":"Locating shared libraries"},{"location":"shared_lib_config/#locating-include-files","text":"To see the default include file path: $ gcc -xc++ -E -v If the local include directory is not in the default include path, you can add it to the default include directories, e.g. $ export INCLUDE=/usr/local/include Alternatively, you can rely on pkg-config to set the required directory at compile time.","title":"Locating include files"},{"location":"shared_lib_config/#pkgconfig-files","text":"If pkg-config is called as part of building Makefile , e.g. from autoconf/automake, cmake, or qmake, then the ddcutil pkg-config file ddcutil.pkg specifies the required include files, libraries, and library directories. Now it's ddcutil.pc that must be found by pkg-config . So the question becomes whether the local directory in which ddcutil.pc is installed is in the distribution-specific default search path. To see the the default search path: $ pkg-config --variable pc_path pkg-config To add a local directory to the pkg-config search path, set environment variable PKG_CONFIG_PATH. Note that this affects pkg-config when run by configure, cmake, qmake etc. Examples: $ export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig $ ./configure","title":"PKGCONFIG files"},{"location":"sniffing/","text":"Reverse Engineering Proprietary DDC Extensions Newer monitors often have features that exceed the capabilities of the Monitor Control Command Set specification. Usually, the monitor manufacturer provides a Windows program to control these features. Typically, the program controls the features using VCP feature codes in the Manufacturer Reserved range (xE0..xFF), or through extensions to the definition of an existing feature (e.g. X60 - Input Source). Beyond trial and error, the real solution to figuring out the DDC command sequences used is to sniff the I2C protocol on the cable connecting the monitor to a Windows computer and see what requests the manufacturer's program is issuing and what responses the monitor is sending. As a practical matter, this needs to be a HDMI or DVI connection. DisplayPort \"multiplexes\" the I2C signal over its AUX channel, and Type-C carries a version of DisplayPort, so the I2C signal cannot easily be watched on these cables. There is at least one inexpensive piece of hardware that can sniff the I2C signal, called I2CDriver . Documentation is here . I also found this DVI/DDC breakout cable on closeout , which saved me an afternoon of soldering. The I2C signal is exposed on a 10 pin header (the kind motherboards use for an external COM port connection). To make the final piece of the connection, you could solder the appropriate lines of an old serial ribbon cable onto header leads for the I2C driver board. The provided Python software shows the captured bits and bytes of the I2C bus. A simple program could decipher this into the DDC/CI protocol sequences. To avoid soldering, I was able to jerry-rig the connection using an old COM port ribbon cable with a DB-9 male connector and a DB-9 female chassis connector with pins on the back. Here's a picture.","title":"Reverse Engineering Proprietary DDC Extensions"},{"location":"sniffing/#reverse-engineering-proprietary-ddc-extensions","text":"Newer monitors often have features that exceed the capabilities of the Monitor Control Command Set specification. Usually, the monitor manufacturer provides a Windows program to control these features. Typically, the program controls the features using VCP feature codes in the Manufacturer Reserved range (xE0..xFF), or through extensions to the definition of an existing feature (e.g. X60 - Input Source). Beyond trial and error, the real solution to figuring out the DDC command sequences used is to sniff the I2C protocol on the cable connecting the monitor to a Windows computer and see what requests the manufacturer's program is issuing and what responses the monitor is sending. As a practical matter, this needs to be a HDMI or DVI connection. DisplayPort \"multiplexes\" the I2C signal over its AUX channel, and Type-C carries a version of DisplayPort, so the I2C signal cannot easily be watched on these cables. There is at least one inexpensive piece of hardware that can sniff the I2C signal, called I2CDriver . Documentation is here . I also found this DVI/DDC breakout cable on closeout , which saved me an afternoon of soldering. The I2C signal is exposed on a 10 pin header (the kind motherboards use for an external COM port connection). To make the final piece of the connection, you could solder the appropriate lines of an old serial ribbon cable onto header leads for the I2C driver board. The provided Python software shows the captured bits and bytes of the I2C bus. A simple program could decipher this into the DDC/CI protocol sequences. To avoid soldering, I was able to jerry-rig the connection using an old COM port ribbon cable with a DB-9 male connector and a DB-9 female chassis connector with pins on the back. Here's a picture.","title":"Reverse Engineering Proprietary DDC Extensions"},{"location":"table_features/","text":"Table Features Some VCP features are designated as type Table (T), as opposed to Continuous (C) or Non-Continuous (NC). Read and write requests for table features transmit blocks of data. In particular, LUT related features are of type Table. ddcutil exposes table feature values as uninterpreted hex strings, e.g. ddcutil setvcp 60 01020304F1F2FEFF Table features support is currently implemented over DDC/CI, but has never been tested with an actual monitor. To see the list of Table features, issue the command: ddcutil vcpinfo table Note that whether a feature is of type Table can vary with MCCS version. The ddcutil vcpinfo command tries to take this into account. Code Feature Version Detail 60 Select Active Video Source Type NC in Versions 2.0 through 2.2 a4 Control Selected Window Operation Type NC in MCCS 2.0, T in 3.0, 2.2 b4 Host time mode Type NC in MCCS 2.0, 2.1, T in 3.0, 2.2 d0 Select Active Output Type T in MCCS 3.0, NC otherwise","title":"Table Type Features"},{"location":"table_features/#table-features","text":"Some VCP features are designated as type Table (T), as opposed to Continuous (C) or Non-Continuous (NC). Read and write requests for table features transmit blocks of data. In particular, LUT related features are of type Table. ddcutil exposes table feature values as uninterpreted hex strings, e.g. ddcutil setvcp 60 01020304F1F2FEFF Table features support is currently implemented over DDC/CI, but has never been tested with an actual monitor. To see the list of Table features, issue the command: ddcutil vcpinfo table Note that whether a feature is of type Table can vary with MCCS version. The ddcutil vcpinfo command tries to take this into account. Code Feature Version Detail 60 Select Active Video Source Type NC in Versions 2.0 through 2.2 a4 Control Selected Window Operation Type NC in MCCS 2.0, T in 3.0, 2.2 b4 Host time mode Type NC in MCCS 2.0, 2.1, T in 3.0, 2.2 d0 Select Active Output Type T in MCCS 3.0, NC otherwise","title":"Table Features"},{"location":"tech_support/","text":"Technical Support Please direct technical support questions, bug reports, and feature requests to the Issues Tracker on Github. Use of this forum allows everyone to benefit from individual questions and ideas. When posting questions regarding ddcutil configuration, please execute the following command as root, capture its output in a file, and submit the output as an attachement. $ ddcutil interrogate Note: interrogate is a convenience command that wraps detect --verbose , environment --verbose , and (for each detected monitor) probe . There is no need to submit output of the individual commands if interrogate is executed. Before running interrogate or environment , ensure that Linux command i2cdectect (typically found in package i2c-tools ) is installed. i2cdetect provides an indepenent check of whether the DDC slave address (x37) is active on an I2C bus, and is used by interrogate or environment if available. Because monitors that use USB for MCCS communication are rare, the extensive USB diagnostics are separated out into a separate command, usbenvironment , which is not packaged by interrogate . $ ddcutil usbenvironment --verbose See also: - interrogate command - environment command - usbenvironment command","title":"Technical Support"},{"location":"tech_support/#technical-support","text":"Please direct technical support questions, bug reports, and feature requests to the Issues Tracker on Github. Use of this forum allows everyone to benefit from individual questions and ideas. When posting questions regarding ddcutil configuration, please execute the following command as root, capture its output in a file, and submit the output as an attachement. $ ddcutil interrogate Note: interrogate is a convenience command that wraps detect --verbose , environment --verbose , and (for each detected monitor) probe . There is no need to submit output of the individual commands if interrogate is executed. Before running interrogate or environment , ensure that Linux command i2cdectect (typically found in package i2c-tools ) is installed. i2cdetect provides an indepenent check of whether the DDC slave address (x37) is active on an I2C bus, and is used by interrogate or environment if available. Because monitors that use USB for MCCS communication are rare, the extensive USB diagnostics are separated out into a separate command, usbenvironment , which is not packaged by interrogate . $ ddcutil usbenvironment --verbose See also: - interrogate command - environment command - usbenvironment command","title":"Technical Support"},{"location":"technotes/","text":"Techical Notes A collection of notes related to development and debugging. To build with debugging symbols in libddcutil: ./configure CFLAGS=-g Enable I2C kernel tracing","title":"Technical Notes"},{"location":"technotes/#techical-notes","text":"A collection of notes related to development and debugging. To build with debugging symbols in libddcutil: ./configure CFLAGS=-g Enable I2C kernel tracing","title":"Techical Notes"},{"location":"u32h750/","text":"Samsung U32H750 Feature x14 Capabilities | MCCS name Value | -------------|------------- x05 | 6500 x08 | 9300 x0b | User 1 x0c | User 2 Values Settable | MCCS | Using DDC | ----------------|-----------------| x01 | sRGB Value Feature x?? Display Mode Capabilities | Only observed value: x18 Color Tone Select | Sets | OSD menu | x14 | MCCS name R G B | Notes ------------|--------|----------------|-------------------- Cool 2 | x00 | (unrecognized) | 5 24 50 | Cool 1 | x01 | sRGB | 10 33 50 | Normal | x02 | Display Native | 50 50 50 | Warm 1 | x03 | 4000 | 50 38 20 | Warm 2 | x04 | 5000 | 50 23 0 | Custom | x05 | 6500 | | restores most recent RGB values, any values can be set changing RGB values sets Color Tone to Custom Gamma Tone menu Changing has no observed effect on Feature values Feature x72 Gamma not supported","title":"U32h750"},{"location":"u32h750/#samsung-u32h750","text":"","title":"Samsung U32H750"},{"location":"u32h750/#feature-x14","text":"Capabilities | MCCS name Value | -------------|------------- x05 | 6500 x08 | 9300 x0b | User 1 x0c | User 2 Values Settable | MCCS | Using DDC | ----------------|-----------------| x01 | sRGB Value","title":"Feature x14"},{"location":"u32h750/#feature-x-display-mode","text":"Capabilities | Only observed value: x18","title":"Feature x?? Display Mode"},{"location":"u32h750/#color-tone","text":"Select | Sets | OSD menu | x14 | MCCS name R G B | Notes ------------|--------|----------------|-------------------- Cool 2 | x00 | (unrecognized) | 5 24 50 | Cool 1 | x01 | sRGB | 10 33 50 | Normal | x02 | Display Native | 50 50 50 | Warm 1 | x03 | 4000 | 50 38 20 | Warm 2 | x04 | 5000 | 50 23 0 | Custom | x05 | 6500 | | restores most recent RGB values, any values can be set changing RGB values sets Color Tone to Custom","title":"Color Tone"},{"location":"u32h750/#gamma-tone-menu","text":"Changing has no observed effect on Feature values Feature x72 Gamma not supported","title":"Gamma Tone menu"},{"location":"udf/","text":"User Defined Features User Defined Features make it possible to modify the feature definition obtained from the Monitor Control Command Set specification, or to create a new one entirely. A common use of this facility is to replace the list of valid values of a simple non-continuous feature. User Defined Features is enabled by command line option --enable-udf (alt. --udf ). It is desiabled by option --disable-udf (alt. --noudef ). The default is --enable-udf . The user defined features for a monitor are specified in a feature definition file. The format of this file is subject to change. User Defined Feature File Here's an example of a file that specifies user defined features. $ cat ~/.local/share/ddcutil/DEL-DELL_U2222-16485.mccs MFG_ID DEL MODEL DELL U2222 PRODUCT_CODE 16485 MCCS_VERSION 2.2 FEATURE_CODE FD Feature Name ATTRS NC RW VALUE 0 First Val VALUE 0X01 Second Val 0x VALUE X02 Third value X VALUE 03H H at end FEATURE_CODE xFB Another Feature ATTRS C RO FEATURE_CODE 0xfa a feature with code staring with 0x ATTRS C RO The first 3 lines identify the monitor model, using a 3 character manufacturer id, the model name, and the product number, as given in the EDID. The feature definition applies to any monitor that matches those identifiers. Model name and product number are both required because some manufacturers use generic model names, and many set the product number to 0. For example, Samsung commonly uses the name \"SyncMaster\", and LG commonly uses the name \"LG ULTRAWIDE\". These three fields are also are used to create the file name of the feature description, which has the form <mfg_id>-<model name>-<product code>.mccs . The values in the file name must match those in the file. The optional MCCS_VERSION line specifies the version of the MCCS Specification used to describe the monitor. If specified, it is used instead of the value returned by querying VCP feature xDF (VCP Version). If the MCCS version is also specified using the --mccs command line option, the command line option takes precedence. In addition to the monitor identification lines and optional MCCS version line, there are one or more feature definitions. Each defnition starts with a line of the form FEATURE_CODE <feature-id> <feature name> . Feature codes are implicitly hex numbers, and can be written with or without a leading \"x\". The ATTRS line contains feature attributes: \"C\" or \"NC\" indicating whether the feature is continuous or non-continuous, and \"RW\", \"RO\", or \"WO\" indicating whether the feature is read-write, read-only, or write-only. For non-continuous features, there are one or more VALUE lines describing the possible values. Each line has the form: VALUE <value> <description> . Feature values can be written either as decimal or hexadecimal. The MCCS specification has evolved to include features that don't neatly conform the original Continuous/Non-Continuous classification. For example, continous features can have special reserved values, and non-continuous features exist that do not have simple tables of feature values, but instead have unique interpretations. The User Defined Feature facility cannont define such features. Blank lines and lines beginning with \"*\" or \"#\" are ignored. Examples An actual feature definition file for a monitor whose values for feature x60 (Input Source) do not conform to the MCCS specification. $ cat ~/.local/share/ddcutil/SAM-U32H75x-3586.mccs MFG_ID SAM MODEL U32H75x PRODUCT_CODE 3586 MCCS_VERSION 2.1 FEATURE_CODE 60 Input Source ATTRS NC RW VALUE x05 HDMI-1 VALUE x06 HDMI-2 VALUE x0f DisplayPort Feature Definition Search Path Feature definition files are saved in the user's ddcutil data directory, $HOME/.local/share/ddcutil. More generally, ddcutil searches for feature definition files using environment variables $XDG_DATA_HOME and $XDG_DATA_DIRS , per the XDG Base Directory Specification .","title":"User Defined Features"},{"location":"udf/#user-defined-features","text":"User Defined Features make it possible to modify the feature definition obtained from the Monitor Control Command Set specification, or to create a new one entirely. A common use of this facility is to replace the list of valid values of a simple non-continuous feature. User Defined Features is enabled by command line option --enable-udf (alt. --udf ). It is desiabled by option --disable-udf (alt. --noudef ). The default is --enable-udf . The user defined features for a monitor are specified in a feature definition file. The format of this file is subject to change.","title":"User Defined Features"},{"location":"udf/#user-defined-feature-file","text":"Here's an example of a file that specifies user defined features. $ cat ~/.local/share/ddcutil/DEL-DELL_U2222-16485.mccs MFG_ID DEL MODEL DELL U2222 PRODUCT_CODE 16485 MCCS_VERSION 2.2 FEATURE_CODE FD Feature Name ATTRS NC RW VALUE 0 First Val VALUE 0X01 Second Val 0x VALUE X02 Third value X VALUE 03H H at end FEATURE_CODE xFB Another Feature ATTRS C RO FEATURE_CODE 0xfa a feature with code staring with 0x ATTRS C RO The first 3 lines identify the monitor model, using a 3 character manufacturer id, the model name, and the product number, as given in the EDID. The feature definition applies to any monitor that matches those identifiers. Model name and product number are both required because some manufacturers use generic model names, and many set the product number to 0. For example, Samsung commonly uses the name \"SyncMaster\", and LG commonly uses the name \"LG ULTRAWIDE\". These three fields are also are used to create the file name of the feature description, which has the form <mfg_id>-<model name>-<product code>.mccs . The values in the file name must match those in the file. The optional MCCS_VERSION line specifies the version of the MCCS Specification used to describe the monitor. If specified, it is used instead of the value returned by querying VCP feature xDF (VCP Version). If the MCCS version is also specified using the --mccs command line option, the command line option takes precedence. In addition to the monitor identification lines and optional MCCS version line, there are one or more feature definitions. Each defnition starts with a line of the form FEATURE_CODE <feature-id> <feature name> . Feature codes are implicitly hex numbers, and can be written with or without a leading \"x\". The ATTRS line contains feature attributes: \"C\" or \"NC\" indicating whether the feature is continuous or non-continuous, and \"RW\", \"RO\", or \"WO\" indicating whether the feature is read-write, read-only, or write-only. For non-continuous features, there are one or more VALUE lines describing the possible values. Each line has the form: VALUE <value> <description> . Feature values can be written either as decimal or hexadecimal. The MCCS specification has evolved to include features that don't neatly conform the original Continuous/Non-Continuous classification. For example, continous features can have special reserved values, and non-continuous features exist that do not have simple tables of feature values, but instead have unique interpretations. The User Defined Feature facility cannont define such features. Blank lines and lines beginning with \"*\" or \"#\" are ignored.","title":"User Defined Feature File"},{"location":"udf/#examples","text":"An actual feature definition file for a monitor whose values for feature x60 (Input Source) do not conform to the MCCS specification. $ cat ~/.local/share/ddcutil/SAM-U32H75x-3586.mccs MFG_ID SAM MODEL U32H75x PRODUCT_CODE 3586 MCCS_VERSION 2.1 FEATURE_CODE 60 Input Source ATTRS NC RW VALUE x05 HDMI-1 VALUE x06 HDMI-2 VALUE x0f DisplayPort","title":"Examples"},{"location":"udf/#feature-definition-search-path","text":"Feature definition files are saved in the user's ddcutil data directory, $HOME/.local/share/ddcutil. More generally, ddcutil searches for feature definition files using environment variables $XDG_DATA_HOME and $XDG_DATA_DIRS , per the XDG Base Directory Specification .","title":"Feature Definition Search Path"},{"location":"usb/","text":"USB Connected Monitors ddcutil has support for monitors that implement the Monitor Control Command Set (MCCS) over USB. The support is considered initial in that it has only been tested with only a few models of USB connected monitors. Note that some monitors use USB to communicate, but do not follow the specification for MCCS over USB. For example, the HP Dreamcolor 2480zx uses a proprietary, undocumented protocol. Also, it bears emphasizing that when ddcutil refers to USB connected monitors, it means monitors that communicate MCCS over USB, NOT to monitors that communicate the video signal over USB. Limitations: - The MCCS over USB specification has no mechanism for querying a capabilities string. The ddcutil capabilities command synthesizes a response based on the feature codes it detects. - Table type features are completely unsupported. - Apple Thunderbolt displays might work, but are not supported. Thunderbolt integrates video, USB, and ethernet into a single cable, and appears to require a Thunderbolt capable capable computer, as I can find no adapters that split out all the signals. Other than actual Macs, these are uncommon. On the other hand, MCCS over USB has advantages: - Unlike I2C, the protocol is inherently reliable. No retry logic is needed. - Unlike I2C, USB communication does not require waits between system calls. It is therefore faster. Thanks to Ojdrej Zary, whose usbmonctl was used as the basis for USB support in ddcutil . If there are multiple monitors, a USB connected monitor can be selected in the usual manner using its display number (option --display ), or by its bus number/device number pair (option --usb ) or hiddev device number (option --hiddev ). There are also 2 ddcutil commands specific to USB connected monitors, chkusbmon , and usbenvironment For details on USB device permissions, see USB Device Permissions . Options for Display Selection Option: --usb USB connected monitors can be specified by their USB bus number and device number. The numbers are separated by either a period or colon. For example: ddcutil --usb 3.5 ... selects the monitor at USB bus number 3, device number 5. Option --hiddev USB connected monitors can also be specfied by their hiddev device number, which specifies the /dev file by which they are accessed. That is, --hiddev 2 refers to /dev/usb/hiddev2. Command ddcutil chkusbmon Command ddcutil chkusbmon helps to detect USB HID compliant monitors. It is intended for use in udev rules. It uses Read-Only access to check that a USB device is of class User Interface Device, but is not a keyboard or mouse. ddcutil chkusbmon ***hiddev device name*** e.g. ddcutil chkusbmon /dev/usb/hiddev3 Returns 0 if a device represents a USB attached monitor, non-zero if not. See Device Permissions Command ddcutil usbenvironment Explores the system's USB environment as an aid to diagnosing USB device detection and communication issues. Option --verbose increases the amount of information. The word \"usbenvironment\" can be abbreviated down to its first 6 letters, e.g. $ ddcutil usbenv","title":"USB Connected Monitors"},{"location":"usb/#usb-connected-monitors","text":"ddcutil has support for monitors that implement the Monitor Control Command Set (MCCS) over USB. The support is considered initial in that it has only been tested with only a few models of USB connected monitors. Note that some monitors use USB to communicate, but do not follow the specification for MCCS over USB. For example, the HP Dreamcolor 2480zx uses a proprietary, undocumented protocol. Also, it bears emphasizing that when ddcutil refers to USB connected monitors, it means monitors that communicate MCCS over USB, NOT to monitors that communicate the video signal over USB. Limitations: - The MCCS over USB specification has no mechanism for querying a capabilities string. The ddcutil capabilities command synthesizes a response based on the feature codes it detects. - Table type features are completely unsupported. - Apple Thunderbolt displays might work, but are not supported. Thunderbolt integrates video, USB, and ethernet into a single cable, and appears to require a Thunderbolt capable capable computer, as I can find no adapters that split out all the signals. Other than actual Macs, these are uncommon. On the other hand, MCCS over USB has advantages: - Unlike I2C, the protocol is inherently reliable. No retry logic is needed. - Unlike I2C, USB communication does not require waits between system calls. It is therefore faster. Thanks to Ojdrej Zary, whose usbmonctl was used as the basis for USB support in ddcutil . If there are multiple monitors, a USB connected monitor can be selected in the usual manner using its display number (option --display ), or by its bus number/device number pair (option --usb ) or hiddev device number (option --hiddev ). There are also 2 ddcutil commands specific to USB connected monitors, chkusbmon , and usbenvironment For details on USB device permissions, see USB Device Permissions .","title":"USB Connected Monitors"},{"location":"usb/#options-for-display-selection","text":"","title":"Options for Display Selection"},{"location":"usb/#option-usb","text":"USB connected monitors can be specified by their USB bus number and device number. The numbers are separated by either a period or colon. For example: ddcutil --usb 3.5 ... selects the monitor at USB bus number 3, device number 5.","title":"Option: --usb"},{"location":"usb/#option-hiddev","text":"USB connected monitors can also be specfied by their hiddev device number, which specifies the /dev file by which they are accessed. That is, --hiddev 2 refers to /dev/usb/hiddev2.","title":"Option --hiddev"},{"location":"usb/#command-ddcutil-chkusbmon","text":"Command ddcutil chkusbmon helps to detect USB HID compliant monitors. It is intended for use in udev rules. It uses Read-Only access to check that a USB device is of class User Interface Device, but is not a keyboard or mouse. ddcutil chkusbmon ***hiddev device name*** e.g. ddcutil chkusbmon /dev/usb/hiddev3 Returns 0 if a device represents a USB attached monitor, non-zero if not. See Device Permissions","title":"Command ddcutil chkusbmon"},{"location":"usb/#command-ddcutil-usbenvironment","text":"Explores the system's USB environment as an aid to diagnosing USB device detection and communication issues. Option --verbose increases the amount of information. The word \"usbenvironment\" can be abbreviated down to its first 6 letters, e.g. $ ddcutil usbenv","title":"Command ddcutil usbenvironment"},{"location":"usb_permissions/","text":"USB Device Permissions If using a monitor that transmits MCCS over USB, i.e. a monitor that provides access to its Virtual Control Panel over USB, ddcutil requires read/write access to device /dev/usb/hiddev N , where N is the number for the device representing the monitor's USB connection. ddcutil has to be careful when accessing the /dev/usb/hiddev* devices, as some of these can represent USB attached input devices such as keyboards or mice. Distributed file 45-ddcutil-usb.rules shows a couple ways to give ddcutil the required access. All but one of the command lines in that file should commented out. This file can be edited and copied to /etc/udev/rules.d, but do check that the rules in this file do not conflict with others in that directory. $ sudo cp /usr/share/ddcutil/data/etc/udev/rules.d/45-ddcutils-usb.rules /etc/udev/rules.d The following rule gives all users access to the Virtual Control Panel of an Apple Cinema Display by specifying its USB device user id (aka uid) and product id (aka pid): SUBSYSTEM==\"usbmisc\", ATTRS{idVendor}==\"05ac\", ATTRS{idProduct}==\"9223\", MODE=\"0666\" This line would of course have to edited for your monitor. One way to find its uid/pid is the lsusb command. A more robust way to set proper device permissions is to call ddcutil from a udev rule to test whether a device is a HID compliant monitor: SUBSYSTEM==\"usbmisc\", KERNEL==\"hiddev*\", PROGRAM=\"/usr/bin/ddcutil chkusbmon $env{DEVNAME} -v\", MODE=\"0660\", GROUP=\"video\" Note that the path to the ddcutil executable will have be edited to the location where ddcutil is installed on your system. (For details on command ddcutil chkusbmon , see here . The -v option produces informational messages. These are lost when the rule is normally executed by udev, but can be helpful when rules are tested using the udevadm test command. Bear in mind when looking at alternative udev rules is that a device can be be identified in several different ways, two of which are shown above. Pick one that best works for you. The following section from the udev documentation ( https://www.kernel.org/pub/linux/utils/kernel/hotplug/udev/udev.html ) may be helpful: The udev rules are read from the files located in the system rules directory /usr/lib/udev/rules.d, the volatile runtime directory /run/udev/rules.d and the local administration directory /etc/udev/rules.d. All rules files are collectively sorted and processed in lexical order, regardless of the directories in which they live. However, files with identical file names replace each other. Files in /etc have the highest priority, files in /run take precedence over files with the same name in /lib. This can be used to override a system-supplied rules file with a local file if needed; a symlink in /etc with the same name as a rules file in /lib, pointing to /dev/null, disables the rules file entirely.","title":"USB Device Permissions"},{"location":"usb_permissions/#usb-device-permissions","text":"If using a monitor that transmits MCCS over USB, i.e. a monitor that provides access to its Virtual Control Panel over USB, ddcutil requires read/write access to device /dev/usb/hiddev N , where N is the number for the device representing the monitor's USB connection. ddcutil has to be careful when accessing the /dev/usb/hiddev* devices, as some of these can represent USB attached input devices such as keyboards or mice. Distributed file 45-ddcutil-usb.rules shows a couple ways to give ddcutil the required access. All but one of the command lines in that file should commented out. This file can be edited and copied to /etc/udev/rules.d, but do check that the rules in this file do not conflict with others in that directory. $ sudo cp /usr/share/ddcutil/data/etc/udev/rules.d/45-ddcutils-usb.rules /etc/udev/rules.d The following rule gives all users access to the Virtual Control Panel of an Apple Cinema Display by specifying its USB device user id (aka uid) and product id (aka pid): SUBSYSTEM==\"usbmisc\", ATTRS{idVendor}==\"05ac\", ATTRS{idProduct}==\"9223\", MODE=\"0666\" This line would of course have to edited for your monitor. One way to find its uid/pid is the lsusb command. A more robust way to set proper device permissions is to call ddcutil from a udev rule to test whether a device is a HID compliant monitor: SUBSYSTEM==\"usbmisc\", KERNEL==\"hiddev*\", PROGRAM=\"/usr/bin/ddcutil chkusbmon $env{DEVNAME} -v\", MODE=\"0660\", GROUP=\"video\" Note that the path to the ddcutil executable will have be edited to the location where ddcutil is installed on your system. (For details on command ddcutil chkusbmon , see here . The -v option produces informational messages. These are lost when the rule is normally executed by udev, but can be helpful when rules are tested using the udevadm test command. Bear in mind when looking at alternative udev rules is that a device can be be identified in several different ways, two of which are shown above. Pick one that best works for you. The following section from the udev documentation ( https://www.kernel.org/pub/linux/utils/kernel/hotplug/udev/udev.html ) may be helpful: The udev rules are read from the files located in the system rules directory /usr/lib/udev/rules.d, the volatile runtime directory /run/udev/rules.d and the local administration directory /etc/udev/rules.d. All rules files are collectively sorted and processed in lexical order, regardless of the directories in which they live. However, files with identical file names replace each other. Files in /etc have the highest priority, files in /run take precedence over files with the same name in /lib. This can be used to override a system-supplied rules file with a local file if needed; a symlink in /etc with the same name as a rules file in /lib, pointing to /dev/null, disables the rules file entirely.","title":"USB Device Permissions"},{"location":"vcpinfo_output/","text":"ddcutil vcpinfo The following example reports ddcutil 's internal table of VCP Feature definitions. $ ddcutil vcpinfo VCP code 01: Degauss Causes a CRT to perform a degauss cycle MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: CRT Attributes: Write Only, Non-Continuous (write-only) VCP code 02: New control value Indicates that a display user control (other than power) has been used to change and save (or autosave) a new value. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Write, Non-Continuous (complex) VCP code 03: Soft controls Allows display controls to be used as soft keys MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Write, Non-Continuous (simple) VCP code 04: Restore factory defaults Restore all factor presets including brightness/contrast, geometry, color, and TV defaults. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Preset ddcutil feature subsets: COLOR Attributes: Write Only, Non-Continuous (write-only) VCP code 05: Restore factory brightness/contrast defaults Restore factory defaults for brightness and contrast MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Preset ddcutil feature subsets: COLOR Attributes: Write Only, Non-Continuous (write-only) VCP code 06: Restore factory geometry defaults Restore factory defaults for geometry adjustments MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Preset ddcutil feature subsets: Attributes: Write Only, Non-Continuous (write-only) VCP code 08: Restore color defaults Restore factory defaults for color settings. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Preset ddcutil feature subsets: COLOR Attributes: Write Only, Non-Continuous (write-only) VCP code 0A: Restore factory TV defaults Restore factory defaults for TV functions. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Preset ddcutil feature subsets: TV Attributes: Write Only, Non-Continuous (write-only) VCP code 0B: Color temperature increment Color temperature increment used by feature 0Ch Color Temperature Request MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: COLOR Attributes: Read Only, Non-Continuous (complex) VCP code 0C: Color temperature request Specifies a color temperature (degrees Kelvin) MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: COLOR Attributes: Read Write, Continuous (complex) VCP code 0E: Clock Increase/decrease the sampling clock frequency. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: Attributes: Read Write, Continuous (standard) VCP code 10: Brightness Increase/decrease the brightness of the image. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: PROFILE, COLOR Attributes: Read Write, Continuous (standard) VCP code 11: Flesh tone enhancement Select contrast enhancement algorithm respecting flesh tone region MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: COLOR Attributes: Read Write, Non-Continuous (complex) VCP code 12: Contrast Increase/decrease the contrast of the image. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: PROFILE, COLOR Attributes: Read Write, Continuous (standard) VCP code 13: Backlight control Increase/decrease the specified backlight control value MCCS versions: 2.1, 3.0 MCCS specification groups: Image ddcutil feature subsets: PROFILE, COLOR Attributes (v2.1): Read Write, Continuous (complex) Attributes (v3.0): Read Write, Continuous (complex) Attributes (v2.2): Deprecated VCP code 14: Select color preset Select a specified color temperature MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: PROFILE, COLOR Attributes (v2.0): Read Write, Non-Continuous (simple) Attributes (v2.1): Read Write, Non-Continuous (simple) Attributes (v3.0): Read Write, Non-Continuous (complex) Attributes (v2.2): Read Write, Non-Continuous (complex) VCP code 16: Video gain: Red Increase/decrease the luminesence of red pixels MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: PROFILE, COLOR Attributes: Read Write, Continuous (standard) VCP code 17: User color vision compensation Increase/decrease the degree of compensation MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: COLOR Attributes: Read Write, Continuous (standard) VCP code 18: Video gain: Green Increase/decrease the luminesence of green pixels MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: PROFILE, COLOR Attributes: Read Write, Continuous (standard) VCP code 1A: Video gain: Blue Increase/decrease the luminesence of blue pixels MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: PROFILE, COLOR Attributes: Read Write, Continuous (standard) VCP code 1C: Focus Increase/decrease the focus of the image MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: Attributes: Read Write, Continuous (standard) VCP code 1E: Auto setup Perform autosetup function (H/V position, clock, clock phase, A/D converter, etc. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: Attributes: Read Write, Non-Continuous (simple) VCP code 1F: Auto color setup Perform color autosetup function (R/G/B gain and offset, A/D setup, etc. MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: COLOR Attributes: Read Write, Non-Continuous (simple) VCP code 20: Horizontal Position (Phase) Increasing (decreasing) this value moves the image toward the right (left) of the display. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 22: Horizontal Size Increase/decrease the width of the image. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 24: Horizontal Pincushion Increasing (decreasing) this value causes the right and left sides of the image to become more (less) convex. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 26: Horizontal Pincushion Balance Increasing (decreasing) this value moves the center section of the image toward the right (left) side of the display. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 28: Horizontal Convergence R/B Increasing (decreasing) this value shifts the red pixels to the right (left) and the blue pixels left (right) across the image with respect to the green pixels. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 29: Horizontal Convergence M/G Increasing (decreasing) this value shifts the magenta pixels to the right (left) and the green pixels left (right) across the image with respect to the magenta (sic) pixels. MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 2A: Horizontal Linearity Increase/decrease the density of pixels in the image center. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 2C: Horizontal Linearity Balance Increasing (decreasing) this value shifts the density of pixels from the left (right) side to the right (left) side of the image. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 2E: Gray scale expansion Gray Scale Expansion MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: COLOR Attributes: Read Write, Non-Continuous (complex) VCP code 30: Vertical Position (Phase) Increasing (decreasing) this value moves the image toward the top (bottom) edge of the display. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 32: Vertical Size Increase/decreasing the height of the image. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 34: Vertical Pincushion Increasing (decreasing) this value will cause the top and bottom edges of the image to become more (less) convex. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 36: Vertical Pincushion Balance Increasing (decreasing) this value will move the center section of the image toward the top (bottom) edge of the display. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 38: Vertical Convergence R/B Increasing (decreasing) this value shifts the red pixels up (down) across the image and the blue pixels down (up) across the image with respect to the green pixels. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 39: Vertical Convergence M/G Increasing (decreasing) this value shifts the magenta pixels up (down) across the image and the green pixels down (up) across the image with respect to the magenta (sic) pixels. MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 3A: Vertical Linearity Increase/decease the density of scan lines in the image center. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 3C: Vertical Linearity Balance Increase/decrease the density of scan lines in the image center. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 3E: Clock phase Increase/decrease the sampling clock phase shift MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Miscellaneous ddcutil feature subsets: Attributes: Read Write, Continuous (standard) VCP code 40: Horizontal Parallelogram Increasing (decreasing) this value shifts the top section of the image to the right (left) with respect to the bottom section of the image. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 41: Vertical Parallelogram Increasing (decreasing) this value shifts the top section of the image to the right (left) with respect to the bottom section of the image. (sic) MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 42: Horizontal Keystone Increasing (decreasing) this value will increase (decrease) the ratio between the horizontal size at the top of the image and the horizontal size at the bottom of the image. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 43: Vertical Keystone Increasing (decreasing) this value will increase (decrease) the ratio between the vertical size at the left of the image and the vertical size at the right of the image. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 44: Rotation Increasing (decreasing) this value rotates the image (counter) clockwise around the center point of the screen. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 46: Top Corner Flare Increase/decrease the distance between the left and right sides at the top of the image. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 48: Top Corner Hook Increasing (decreasing) this value moves the top of the image to the right (left). MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 4A: Bottom Corner Flare Increase/decrease the distance between the left and right sides at the bottom of the image. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 4C: Bottom Corner Hook Increasing (decreasing) this value moves the bottom end of the image to the right (left). MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 52: Active control Read id of one feature that has changed, 0x00 indicates no more MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Only, Non-Continuous (complex) VCP code 54: Performance Preservation Controls features aimed at preserving display performance MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Write, Non-Continuous (complex) VCP code 56: Horizontal Moire Increase/decrease horizontal moire cancellation. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: Attributes: Read Write, Continuous (standard) VCP code 58: Vertical Moire Increase/decrease vertical moire cancellation. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: Attributes: Read Write, Continuous (standard) VCP code 59: 6 axis saturation: Red Increase/decrease red saturation MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: COLOR Attributes: Read Write, Continuous (standard) VCP code 5A: 6 axis saturation: Yellow Increase/decrease yellow saturation MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: COLOR Attributes: Read Write, Continuous (standard) VCP code 5B: 6 axis saturation: Green Increase/decrease green saturation MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: COLOR Attributes: Read Write, Continuous (standard) VCP code 5C: 6 axis saturation: Cyan Increase/decrease cyan saturation MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: COLOR Attributes: Read Write, Continuous (standard) VCP code 5D: 6 axis saturation: Blue Increase/decrease blue saturation MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: COLOR Attributes: Read Write, Continuous (standard) VCP code 5E: 6 axis saturation: Magenta Increase/decrease magenta saturation MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: COLOR Attributes: Read Write, Continuous (standard) VCP code 60: Input Source Selects active video source MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes (v2.0): Read Write, Non-Continuous (simple) Attributes (v2.1): Read Write, Non-Continuous (simple) Attributes (v3.0): Read Write, Table Attributes (v2.2): Read Write, Non-Continuous (simple) VCP code 62: Audio speaker volume Adjusts speaker volume MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Audio ddcutil feature subsets: AUDIO Attributes (v2.0): Read Write, Continuous (standard) Attributes (v2.1): Read Write, Continuous (standard) Attributes (v3.0): Read Write, Continuous (complex) Attributes (v2.2): Read Write, Continuous (standard) VCP code 63: Speaker Select Selects a group of speakers MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Audio ddcutil feature subsets: AUDIO Attributes: Read Write, Non-Continuous (simple) VCP code 64: Audio: Microphone Volume Increase/decrease microphone gain MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Audio ddcutil feature subsets: AUDIO Attributes: Read Write, Continuous (standard) VCP code 66: Ambient light sensor Enable/Disable ambient light sensor MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Write, Non-Continuous (simple) VCP code 6B: Backlight Level: White Increase/decrease the white backlight level MCCS versions: 2.2 MCCS specification groups: Image ddcutil feature subsets: PROFILE, COLOR Attributes: Read Write, Continuous (standard) VCP code 6C: Video black level: Red Increase/decrease the black level of red pixels MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: PROFILE, COLOR Attributes: Read Write, Continuous (standard) VCP code 6D: Backlight Level: Red Increase/decrease the red backlight level MCCS versions: 2.2 MCCS specification groups: Image ddcutil feature subsets: PROFILE, COLOR Attributes: Read Write, Continuous (standard) VCP code 6E: Video black level: Green Increase/decrease the black level of green pixels MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: PROFILE, COLOR Attributes: Read Write, Continuous (standard) VCP code 6F: Backlight Level: Green Increase/decrease the green backlight level MCCS versions: 2.2 MCCS specification groups: Image ddcutil feature subsets: PROFILE, COLOR Attributes: Read Write, Continuous (standard) VCP code 70: Video black level: Blue Increase/decrease the black level of blue pixels MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: PROFILE, COLOR Attributes: Read Write, Continuous (standard) VCP code 71: Backlight Level: Blue Increase/decrease the blue backlight level MCCS versions: 2.2 MCCS specification groups: Image ddcutil feature subsets: PROFILE, COLOR Attributes: Read Write, Continuous (standard) VCP code 72: Gamma Select relative or absolute gamma MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: COLOR Attributes: Read Write, Non-Continuous (complex) VCP code 73: LUT Size Provides the size (number of entries and number of bits/entry) for the Red, Green, and Blue LUT in the display. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Miscellaneous ddcutil feature subsets: LUT Attributes: Read Only, Table VCP code 74: Single point LUT operation Writes a single point within the display's LUT, reads a single point from the LUT MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Miscellaneous ddcutil feature subsets: LUT Attributes: Read Write, Table VCP code 75: Block LUT operation Load (read) multiple values into (from) the display's LUT MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Miscellaneous ddcutil feature subsets: LUT Attributes: Read Write, Table VCP code 76: Remote Procedure Call Initiates a routine resident in the display MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: LUT Attributes: Write Only, Table VCP code 78: Display Identification Operation Causes a selected 128 byte block of Display Identification Data (EDID or Display ID) to be read MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes (v2.1): Read Only, Table Attributes (v3.0): Read Only, Table Attributes (v2.2): Read Only, Table VCP code 7A: Adjust Focal Plane Increase/decrease the distance to the focal plane of the image MCCS versions: 2.0, 2.1 MCCS specification groups: Image ddcutil feature subsets: Attributes (v2.0): Read Write, Continuous (standard) Attributes (v2.1): Read Write, Continuous (standard) Attributes (v3.0): Deprecated Attributes (v2.2): Deprecated VCP code 7C: Adjust Zoom Increase/decrease the distance to the zoom function of the projection lens (optics) MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: Attributes: Read Write, Continuous (standard) VCP code 7E: Trapezoid Increase/decrease the trapezoid distortion in the image MCCS versions: 2.0, 2.1 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes (v2.0): Read Write, Continuous (standard) Attributes (v2.1): Read Write, Continuous (standard) Attributes (v3.0): Deprecated Attributes (v2.2): Deprecated VCP code 80: Keystone Increase/decrease the keystone distortion in the image. MCCS versions: 2.0 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes (v2.0): Read Write, Continuous (standard) Attributes (v2.1): Deprecated Attributes (v3.0): Deprecated Attributes (v2.2): Deprecated VCP code 82: Horizontal Mirror (Flip) Flip picture horizontally MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Geometry ddcutil feature subsets: Attributes (v2.0): Write Only, Non-Continuous (write-only) Attributes (v2.1): Read Write, Non-Continuous (simple) Attributes (v3.0): Read Write, Non-Continuous (simple) Attributes (v2.2): Read Write, Non-Continuous (simple) VCP code 84: Vertical Mirror (Flip) Flip picture vertically MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Geometry ddcutil feature subsets: Attributes (v2.0): Write Only, Non-Continuous (write-only) Attributes (v2.1): Read Write, Non-Continuous (simple) Attributes (v3.0): Read Write, Non-Continuous (simple) Attributes (v2.2): Read Write, Non-Continuous (simple) VCP code 86: Display Scaling Control the scaling (input vs output) of the display MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: Attributes: Read Write, Non-Continuous (simple) VCP code 87: Sharpness Selects one of a range of algorithms. Increasing (decreasing) the value must increase (decrease) the edge sharpness of image features. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: Attributes (v2.0): Read Write, Non-Continuous (simple) Attributes (v2.1): Read Write, Continuous (standard) Attributes (v3.0): Read Write, Continuous (standard) Attributes (v2.2): Read Write, Continuous (standard) VCP code 88: Velocity Scan Modulation Increase (decrease) the velocity modulation of the horizontal scan as a function of the change in luminescence level MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Miscellaneous ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 8A: Color Saturation Increase/decrease the amplitude of the color difference components of the video signal MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: COLOR, TV Attributes: Read Write, Continuous (standard) VCP code 8B: TV Channel Up/Down Increment (1) or decrement (2) television channel MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: TV Attributes: Write Only, Non-Continuous (write-only) VCP code 8C: TV Sharpness Increase/decrease the amplitude of the high frequency components of the video signal MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Miscellaneous ddcutil feature subsets: TV Attributes: Read Write, Continuous (standard) VCP code 8D: Audio mute/Screen blank Mute/unmute audio, and (v2.2) screen blank MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: TV, AUDIO Attributes (v2.0): Read Write, Non-Continuous (simple) Attributes (v2.1): Read Write, Non-Continuous (simple) Attributes (v3.0): Read Write, Non-Continuous (simple) Attributes (v2.2): Read Write, Non-Continuous (complex) VCP code 8E: TV Contrast Increase/decrease the ratio between blacks and whites in the image MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: TV Attributes: Read Write, Continuous (standard) VCP code 8F: Audio Treble Emphasize/de-emphasize high frequency audio MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Audio ddcutil feature subsets: AUDIO Attributes (v2.0): Read Write, Continuous (standard) Attributes (v2.1): Read Write, Continuous (standard) Attributes (v3.0): Read Write, Non-Continuous (complex) Attributes (v2.2): Read Write, Non-Continuous (complex) VCP code 90: Hue Increase/decrease the wavelength of the color component of the video signal. AKA tint. Applies to currently active interface MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: COLOR, TV Attributes: Read Write, Continuous (standard) VCP code 91: Audio Bass Emphasize/de-emphasize low frequency audio MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Audio ddcutil feature subsets: AUDIO Attributes (v2.0): Read Write, Continuous (standard) Attributes (v2.1): Read Write, Continuous (standard) Attributes (v3.0): Read Write, Non-Continuous (complex) Attributes (v2.2): Read Write, Non-Continuous (complex) VCP code 92: TV Black level/Luminesence Increase/decrease the black level of the video MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: TV Attributes: Read Write, Continuous (standard) VCP code 93: Audio Balance L/R Controls left/right audio balance MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Audio ddcutil feature subsets: AUDIO Attributes (v2.0): Read Write, Continuous (standard) Attributes (v2.1): Read Write, Continuous (standard) Attributes (v3.0): Read Write, Non-Continuous (complex) Attributes (v2.2): Read Write, Non-Continuous (complex) VCP code 94: Audio Processor Mode Select audio mode MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Audio ddcutil feature subsets: TV, AUDIO Attributes: Read Write, Non-Continuous (simple) VCP code 95: Window Position(TL_X) Top left X pixel of an area of the image MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry, Window ddcutil feature subsets: WINDOW Attributes: Read Write, Continuous (standard) VCP code 96: Window Position(TL_Y) Top left Y pixel of an area of the image MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry, Window ddcutil feature subsets: WINDOW Attributes: Read Write, Continuous (standard) VCP code 97: Window Position(BR_X) Bottom right X pixel of an area of the image MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry, Window ddcutil feature subsets: WINDOW Attributes: Read Write, Continuous (standard) VCP code 98: Window Position(BR_Y) Bottom right Y pixel of an area of the image MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry, Window ddcutil feature subsets: WINDOW Attributes: Read Write, Continuous (standard) VCP code 99: Window control on/off Enables the brightness and color within a window to be different from the desktop. MCCS versions: 2.0, 2.1, 2.2 MCCS specification groups: Window ddcutil feature subsets: WINDOW Attributes (v2.0): Read Write, Non-Continuous (simple) Attributes (v2.1): Read Write, Non-Continuous (simple) Attributes (v3.0): Deprecated Attributes (v2.2): Read Write, Non-Continuous (simple) VCP code 9A: Window background Changes the contrast ratio between the area of the window and the rest of the desktop MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Window ddcutil feature subsets: WINDOW Attributes: Read Write, Continuous (standard) VCP code 9B: 6 axis hue control: Red Decrease shifts toward magenta, increase shifts toward yellow MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Window ddcutil feature subsets: COLOR Attributes: Read Write, Continuous (standard) VCP code 9C: 6 axis hue control: Yellow Decrease shifts toward green, increase shifts toward red MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Window ddcutil feature subsets: COLOR Attributes: Read Write, Continuous (standard) VCP code 9D: 6 axis hue control: Green Decrease shifts toward yellow, increase shifts toward cyan MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Window ddcutil feature subsets: COLOR Attributes: Read Write, Continuous (standard) VCP code 9E: 6 axis hue control: Cyan Decrease shifts toward green, increase shifts toward blue MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Window ddcutil feature subsets: COLOR Attributes: Read Write, Continuous (standard) VCP code 9F: 6 axis hue control: Blue Decrease shifts toward cyan, increase shifts toward magenta MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Window ddcutil feature subsets: COLOR Attributes: Read Write, Continuous (standard) VCP code A0: 6 axis hue control: Magenta Decrease shifts toward blue, 127 no effect, increase shifts toward red MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Window ddcutil feature subsets: COLOR Attributes: Read Write, Continuous (standard) VCP code A2: Auto setup on/off Turn on/off an auto setup function MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: Attributes: Write Only, Non-Continuous (write-only) VCP code A4: Window mask control Turn selected window operation on/off, window mask MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: WINDOW Attributes (v2.0): Read Write, Non-Continuous (complex) Attributes (v2.1): Read Write, Non-Continuous (complex) Attributes (v3.0): Read Write, Table Attributes (v2.2): Read Write, Table VCP code A5: Change the selected window Change selected window (as defined by 95h..98h) MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Window ddcutil feature subsets: WINDOW Attributes: Read Write, Non-Continuous (simple) VCP code AA: Screen Orientation Indicates screen orientation MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Geometry ddcutil feature subsets: Attributes: Read Only, Non-Continuous (simple) VCP code AC: Horizontal frequency Horizontal sync signal frequency as determined by the display MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Only, Continuous (complex) VCP code AE: Vertical frequency Vertical sync signal frequency as determined by the display, in .01 hz MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Only, Continuous (complex) VCP code B0: Settings Store/restore the user saved values for the current mode. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Preset ddcutil feature subsets: Attributes: Write Only, Non-Continuous (write-only) VCP code B2: Flat panel sub-pixel layout LCD sub-pixel structure MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Only, Non-Continuous (simple) VCP code B4: Source Timing Mode Indicates timing mode being sent by host MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Control ddcutil feature subsets: Attributes (v2.1): Read Write, Non-Continuous (complex) Attributes (v3.0): Read Write, Table Attributes (v2.2): Read Write, Table VCP code B6: Display technology type Indicates the base technology type MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Only, Non-Continuous (simple) VCP code B7: Monitor status Video mode and status of a DPVL capable monitor MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: DPVL ddcutil feature subsets: DPVL Attributes: Read Only, Non-Continuous (complex) VCP code B8: Packet count Counter for DPVL packets received MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: DPVL ddcutil feature subsets: DPVL Attributes: Read Write, Continuous (complex) VCP code B9: Monitor X origin X origin of the monitor in the vertical screen MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: DPVL ddcutil feature subsets: DPVL Attributes: Read Write, Continuous (complex) VCP code BA: Monitor Y origin Y origin of the monitor in the vertical screen MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: DPVL ddcutil feature subsets: DPVL Attributes: Read Write, Continuous (complex) VCP code BB: Header error count Error counter for the DPVL header MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: DPVL ddcutil feature subsets: DPVL Attributes: Read Write, Continuous (complex) VCP code BC: Body CRC error count CRC error counter for the DPVL body MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: DPVL ddcutil feature subsets: DPVL Attributes: Read Write, Continuous (complex) VCP code BD: Client ID Assigned identification number for the monitor MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: DPVL ddcutil feature subsets: DPVL Attributes: Read Write, Continuous (complex) VCP code BE: Link control Indicates status of the DVI link MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: DPVL ddcutil feature subsets: DPVL Attributes: Read Write, Non-Continuous (complex) VCP code C0: Display usage time Active power on time in hours MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Only, Continuous (complex) VCP code C2: Display descriptor length Length in bytes of non-volatile storage in the display available for writing a display descriptor, max 256 MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Only, Continuous (standard) VCP code C3: Transmit display descriptor Reads (writes) a display descriptor from (to) non-volatile storage in the display. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Write, Table VCP code C4: Enable display of 'display descriptor' If enabled, the display descriptor shall be displayed when no video is being received. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Write, Non-Continuous (complex) VCP code C6: Application enable key A 2 byte value used to allow an application to only operate with known products. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Only, Non-Continuous (complex) VCP code C8: Display controller type Mfg id of controller and 2 byte manufacturer-specific controller type MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Control, Miscellaneous ddcutil feature subsets: Attributes: Read Write, Non-Continuous (complex) VCP code C9: Display firmware level 2 byte firmware level MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Control, Miscellaneous ddcutil feature subsets: Attributes: Read Only, Non-Continuous (complex) VCP code CA: OSD/Button Control Sets and indicates the current operational state of OSD (and buttons in v2.2) MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Control, Miscellaneous ddcutil feature subsets: Attributes (v2.0): Read Write, Non-Continuous (simple) Attributes (v2.1): Read Write, Non-Continuous (simple) Attributes (v3.0): Read Write, Non-Continuous (simple) Attributes (v2.2): Read Write, Non-Continuous (complex) VCP code CC: OSD Language On Screen Display languge MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Control, Miscellaneous ddcutil feature subsets: Attributes: Read Write, Non-Continuous (simple) VCP code CD: Status Indicators Control up to 16 LED (or similar) indicators to indicate system status MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Write, Non-Continuous (complex) VCP code CE: Auxiliary display size Rows and characters/row of auxiliary display MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Only, Non-Continuous (complex) VCP code CF: Auxiliary display data Sets contents of auxiliary display device MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Write Only, Table VCP code D0: Output select Selects the active output MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes (v2.0): Read Write, Non-Continuous (simple) Attributes (v2.1): Read Write, Non-Continuous (simple) Attributes (v3.0): Read Write, Table Attributes (v2.2): Read Write, Non-Continuous (simple) VCP code D2: Asset Tag Read an Asset Tag to/from the display MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Write, Table VCP code D4: Stereo video mode Stereo video mode MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Miscellaneous ddcutil feature subsets: Attributes: Read Write, Non-Continuous (complex) VCP code D6: Power mode DPM and DPMS status MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Control, Miscellaneous ddcutil feature subsets: Attributes: Read Write, Non-Continuous (simple) VCP code D7: Auxiliary power output Controls an auxiliary power output from a display to a host device MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Write, Non-Continuous (simple) VCP code DA: Scan mode Controls scan characteristics (aka format) MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Geometry ddcutil feature subsets: CRT Attributes: Read Write, Non-Continuous (simple) VCP code DB: Image Mode Controls aspects of the displayed image (TV applications) MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Control ddcutil feature subsets: TV Attributes: Read Write, Non-Continuous (simple) VCP code DC: Display Mode Type of application used on display MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: Attributes: Read Write, Non-Continuous (simple) VCP code DE: Scratch Pad Operation mode (2.0) or scratch pad (3.0/2.2) MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes (v2.0): Write Only, Non-Continuous (write-only) Attributes (v2.1): Read Write, Non-Continuous (complex) Attributes (v3.0): Read Write, Non-Continuous (complex) Attributes (v2.2): Read Write, Non-Continuous (complex) VCP code DF: VCP Version MCCS version MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Only, Non-Continuous (complex)","title":"ddcutil vcpinfo example"},{"location":"vcpinfo_output/#ddcutil-vcpinfo","text":"The following example reports ddcutil 's internal table of VCP Feature definitions. $ ddcutil vcpinfo VCP code 01: Degauss Causes a CRT to perform a degauss cycle MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: CRT Attributes: Write Only, Non-Continuous (write-only) VCP code 02: New control value Indicates that a display user control (other than power) has been used to change and save (or autosave) a new value. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Write, Non-Continuous (complex) VCP code 03: Soft controls Allows display controls to be used as soft keys MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Write, Non-Continuous (simple) VCP code 04: Restore factory defaults Restore all factor presets including brightness/contrast, geometry, color, and TV defaults. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Preset ddcutil feature subsets: COLOR Attributes: Write Only, Non-Continuous (write-only) VCP code 05: Restore factory brightness/contrast defaults Restore factory defaults for brightness and contrast MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Preset ddcutil feature subsets: COLOR Attributes: Write Only, Non-Continuous (write-only) VCP code 06: Restore factory geometry defaults Restore factory defaults for geometry adjustments MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Preset ddcutil feature subsets: Attributes: Write Only, Non-Continuous (write-only) VCP code 08: Restore color defaults Restore factory defaults for color settings. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Preset ddcutil feature subsets: COLOR Attributes: Write Only, Non-Continuous (write-only) VCP code 0A: Restore factory TV defaults Restore factory defaults for TV functions. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Preset ddcutil feature subsets: TV Attributes: Write Only, Non-Continuous (write-only) VCP code 0B: Color temperature increment Color temperature increment used by feature 0Ch Color Temperature Request MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: COLOR Attributes: Read Only, Non-Continuous (complex) VCP code 0C: Color temperature request Specifies a color temperature (degrees Kelvin) MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: COLOR Attributes: Read Write, Continuous (complex) VCP code 0E: Clock Increase/decrease the sampling clock frequency. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: Attributes: Read Write, Continuous (standard) VCP code 10: Brightness Increase/decrease the brightness of the image. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: PROFILE, COLOR Attributes: Read Write, Continuous (standard) VCP code 11: Flesh tone enhancement Select contrast enhancement algorithm respecting flesh tone region MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: COLOR Attributes: Read Write, Non-Continuous (complex) VCP code 12: Contrast Increase/decrease the contrast of the image. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: PROFILE, COLOR Attributes: Read Write, Continuous (standard) VCP code 13: Backlight control Increase/decrease the specified backlight control value MCCS versions: 2.1, 3.0 MCCS specification groups: Image ddcutil feature subsets: PROFILE, COLOR Attributes (v2.1): Read Write, Continuous (complex) Attributes (v3.0): Read Write, Continuous (complex) Attributes (v2.2): Deprecated VCP code 14: Select color preset Select a specified color temperature MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: PROFILE, COLOR Attributes (v2.0): Read Write, Non-Continuous (simple) Attributes (v2.1): Read Write, Non-Continuous (simple) Attributes (v3.0): Read Write, Non-Continuous (complex) Attributes (v2.2): Read Write, Non-Continuous (complex) VCP code 16: Video gain: Red Increase/decrease the luminesence of red pixels MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: PROFILE, COLOR Attributes: Read Write, Continuous (standard) VCP code 17: User color vision compensation Increase/decrease the degree of compensation MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: COLOR Attributes: Read Write, Continuous (standard) VCP code 18: Video gain: Green Increase/decrease the luminesence of green pixels MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: PROFILE, COLOR Attributes: Read Write, Continuous (standard) VCP code 1A: Video gain: Blue Increase/decrease the luminesence of blue pixels MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: PROFILE, COLOR Attributes: Read Write, Continuous (standard) VCP code 1C: Focus Increase/decrease the focus of the image MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: Attributes: Read Write, Continuous (standard) VCP code 1E: Auto setup Perform autosetup function (H/V position, clock, clock phase, A/D converter, etc. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: Attributes: Read Write, Non-Continuous (simple) VCP code 1F: Auto color setup Perform color autosetup function (R/G/B gain and offset, A/D setup, etc. MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: COLOR Attributes: Read Write, Non-Continuous (simple) VCP code 20: Horizontal Position (Phase) Increasing (decreasing) this value moves the image toward the right (left) of the display. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 22: Horizontal Size Increase/decrease the width of the image. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 24: Horizontal Pincushion Increasing (decreasing) this value causes the right and left sides of the image to become more (less) convex. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 26: Horizontal Pincushion Balance Increasing (decreasing) this value moves the center section of the image toward the right (left) side of the display. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 28: Horizontal Convergence R/B Increasing (decreasing) this value shifts the red pixels to the right (left) and the blue pixels left (right) across the image with respect to the green pixels. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 29: Horizontal Convergence M/G Increasing (decreasing) this value shifts the magenta pixels to the right (left) and the green pixels left (right) across the image with respect to the magenta (sic) pixels. MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 2A: Horizontal Linearity Increase/decrease the density of pixels in the image center. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 2C: Horizontal Linearity Balance Increasing (decreasing) this value shifts the density of pixels from the left (right) side to the right (left) side of the image. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 2E: Gray scale expansion Gray Scale Expansion MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: COLOR Attributes: Read Write, Non-Continuous (complex) VCP code 30: Vertical Position (Phase) Increasing (decreasing) this value moves the image toward the top (bottom) edge of the display. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 32: Vertical Size Increase/decreasing the height of the image. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 34: Vertical Pincushion Increasing (decreasing) this value will cause the top and bottom edges of the image to become more (less) convex. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 36: Vertical Pincushion Balance Increasing (decreasing) this value will move the center section of the image toward the top (bottom) edge of the display. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 38: Vertical Convergence R/B Increasing (decreasing) this value shifts the red pixels up (down) across the image and the blue pixels down (up) across the image with respect to the green pixels. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 39: Vertical Convergence M/G Increasing (decreasing) this value shifts the magenta pixels up (down) across the image and the green pixels down (up) across the image with respect to the magenta (sic) pixels. MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 3A: Vertical Linearity Increase/decease the density of scan lines in the image center. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 3C: Vertical Linearity Balance Increase/decrease the density of scan lines in the image center. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 3E: Clock phase Increase/decrease the sampling clock phase shift MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Miscellaneous ddcutil feature subsets: Attributes: Read Write, Continuous (standard) VCP code 40: Horizontal Parallelogram Increasing (decreasing) this value shifts the top section of the image to the right (left) with respect to the bottom section of the image. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 41: Vertical Parallelogram Increasing (decreasing) this value shifts the top section of the image to the right (left) with respect to the bottom section of the image. (sic) MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 42: Horizontal Keystone Increasing (decreasing) this value will increase (decrease) the ratio between the horizontal size at the top of the image and the horizontal size at the bottom of the image. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 43: Vertical Keystone Increasing (decreasing) this value will increase (decrease) the ratio between the vertical size at the left of the image and the vertical size at the right of the image. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 44: Rotation Increasing (decreasing) this value rotates the image (counter) clockwise around the center point of the screen. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 46: Top Corner Flare Increase/decrease the distance between the left and right sides at the top of the image. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 48: Top Corner Hook Increasing (decreasing) this value moves the top of the image to the right (left). MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 4A: Bottom Corner Flare Increase/decrease the distance between the left and right sides at the bottom of the image. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 4C: Bottom Corner Hook Increasing (decreasing) this value moves the bottom end of the image to the right (left). MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 52: Active control Read id of one feature that has changed, 0x00 indicates no more MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Only, Non-Continuous (complex) VCP code 54: Performance Preservation Controls features aimed at preserving display performance MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Write, Non-Continuous (complex) VCP code 56: Horizontal Moire Increase/decrease horizontal moire cancellation. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: Attributes: Read Write, Continuous (standard) VCP code 58: Vertical Moire Increase/decrease vertical moire cancellation. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: Attributes: Read Write, Continuous (standard) VCP code 59: 6 axis saturation: Red Increase/decrease red saturation MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: COLOR Attributes: Read Write, Continuous (standard) VCP code 5A: 6 axis saturation: Yellow Increase/decrease yellow saturation MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: COLOR Attributes: Read Write, Continuous (standard) VCP code 5B: 6 axis saturation: Green Increase/decrease green saturation MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: COLOR Attributes: Read Write, Continuous (standard) VCP code 5C: 6 axis saturation: Cyan Increase/decrease cyan saturation MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: COLOR Attributes: Read Write, Continuous (standard) VCP code 5D: 6 axis saturation: Blue Increase/decrease blue saturation MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: COLOR Attributes: Read Write, Continuous (standard) VCP code 5E: 6 axis saturation: Magenta Increase/decrease magenta saturation MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: COLOR Attributes: Read Write, Continuous (standard) VCP code 60: Input Source Selects active video source MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes (v2.0): Read Write, Non-Continuous (simple) Attributes (v2.1): Read Write, Non-Continuous (simple) Attributes (v3.0): Read Write, Table Attributes (v2.2): Read Write, Non-Continuous (simple) VCP code 62: Audio speaker volume Adjusts speaker volume MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Audio ddcutil feature subsets: AUDIO Attributes (v2.0): Read Write, Continuous (standard) Attributes (v2.1): Read Write, Continuous (standard) Attributes (v3.0): Read Write, Continuous (complex) Attributes (v2.2): Read Write, Continuous (standard) VCP code 63: Speaker Select Selects a group of speakers MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Audio ddcutil feature subsets: AUDIO Attributes: Read Write, Non-Continuous (simple) VCP code 64: Audio: Microphone Volume Increase/decrease microphone gain MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Audio ddcutil feature subsets: AUDIO Attributes: Read Write, Continuous (standard) VCP code 66: Ambient light sensor Enable/Disable ambient light sensor MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Write, Non-Continuous (simple) VCP code 6B: Backlight Level: White Increase/decrease the white backlight level MCCS versions: 2.2 MCCS specification groups: Image ddcutil feature subsets: PROFILE, COLOR Attributes: Read Write, Continuous (standard) VCP code 6C: Video black level: Red Increase/decrease the black level of red pixels MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: PROFILE, COLOR Attributes: Read Write, Continuous (standard) VCP code 6D: Backlight Level: Red Increase/decrease the red backlight level MCCS versions: 2.2 MCCS specification groups: Image ddcutil feature subsets: PROFILE, COLOR Attributes: Read Write, Continuous (standard) VCP code 6E: Video black level: Green Increase/decrease the black level of green pixels MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: PROFILE, COLOR Attributes: Read Write, Continuous (standard) VCP code 6F: Backlight Level: Green Increase/decrease the green backlight level MCCS versions: 2.2 MCCS specification groups: Image ddcutil feature subsets: PROFILE, COLOR Attributes: Read Write, Continuous (standard) VCP code 70: Video black level: Blue Increase/decrease the black level of blue pixels MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: PROFILE, COLOR Attributes: Read Write, Continuous (standard) VCP code 71: Backlight Level: Blue Increase/decrease the blue backlight level MCCS versions: 2.2 MCCS specification groups: Image ddcutil feature subsets: PROFILE, COLOR Attributes: Read Write, Continuous (standard) VCP code 72: Gamma Select relative or absolute gamma MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: COLOR Attributes: Read Write, Non-Continuous (complex) VCP code 73: LUT Size Provides the size (number of entries and number of bits/entry) for the Red, Green, and Blue LUT in the display. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Miscellaneous ddcutil feature subsets: LUT Attributes: Read Only, Table VCP code 74: Single point LUT operation Writes a single point within the display's LUT, reads a single point from the LUT MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Miscellaneous ddcutil feature subsets: LUT Attributes: Read Write, Table VCP code 75: Block LUT operation Load (read) multiple values into (from) the display's LUT MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Miscellaneous ddcutil feature subsets: LUT Attributes: Read Write, Table VCP code 76: Remote Procedure Call Initiates a routine resident in the display MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: LUT Attributes: Write Only, Table VCP code 78: Display Identification Operation Causes a selected 128 byte block of Display Identification Data (EDID or Display ID) to be read MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes (v2.1): Read Only, Table Attributes (v3.0): Read Only, Table Attributes (v2.2): Read Only, Table VCP code 7A: Adjust Focal Plane Increase/decrease the distance to the focal plane of the image MCCS versions: 2.0, 2.1 MCCS specification groups: Image ddcutil feature subsets: Attributes (v2.0): Read Write, Continuous (standard) Attributes (v2.1): Read Write, Continuous (standard) Attributes (v3.0): Deprecated Attributes (v2.2): Deprecated VCP code 7C: Adjust Zoom Increase/decrease the distance to the zoom function of the projection lens (optics) MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: Attributes: Read Write, Continuous (standard) VCP code 7E: Trapezoid Increase/decrease the trapezoid distortion in the image MCCS versions: 2.0, 2.1 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes (v2.0): Read Write, Continuous (standard) Attributes (v2.1): Read Write, Continuous (standard) Attributes (v3.0): Deprecated Attributes (v2.2): Deprecated VCP code 80: Keystone Increase/decrease the keystone distortion in the image. MCCS versions: 2.0 MCCS specification groups: Geometry ddcutil feature subsets: CRT Attributes (v2.0): Read Write, Continuous (standard) Attributes (v2.1): Deprecated Attributes (v3.0): Deprecated Attributes (v2.2): Deprecated VCP code 82: Horizontal Mirror (Flip) Flip picture horizontally MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Geometry ddcutil feature subsets: Attributes (v2.0): Write Only, Non-Continuous (write-only) Attributes (v2.1): Read Write, Non-Continuous (simple) Attributes (v3.0): Read Write, Non-Continuous (simple) Attributes (v2.2): Read Write, Non-Continuous (simple) VCP code 84: Vertical Mirror (Flip) Flip picture vertically MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Geometry ddcutil feature subsets: Attributes (v2.0): Write Only, Non-Continuous (write-only) Attributes (v2.1): Read Write, Non-Continuous (simple) Attributes (v3.0): Read Write, Non-Continuous (simple) Attributes (v2.2): Read Write, Non-Continuous (simple) VCP code 86: Display Scaling Control the scaling (input vs output) of the display MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: Attributes: Read Write, Non-Continuous (simple) VCP code 87: Sharpness Selects one of a range of algorithms. Increasing (decreasing) the value must increase (decrease) the edge sharpness of image features. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: Attributes (v2.0): Read Write, Non-Continuous (simple) Attributes (v2.1): Read Write, Continuous (standard) Attributes (v3.0): Read Write, Continuous (standard) Attributes (v2.2): Read Write, Continuous (standard) VCP code 88: Velocity Scan Modulation Increase (decrease) the velocity modulation of the horizontal scan as a function of the change in luminescence level MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Miscellaneous ddcutil feature subsets: CRT Attributes: Read Write, Continuous (standard) VCP code 8A: Color Saturation Increase/decrease the amplitude of the color difference components of the video signal MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: COLOR, TV Attributes: Read Write, Continuous (standard) VCP code 8B: TV Channel Up/Down Increment (1) or decrement (2) television channel MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: TV Attributes: Write Only, Non-Continuous (write-only) VCP code 8C: TV Sharpness Increase/decrease the amplitude of the high frequency components of the video signal MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Miscellaneous ddcutil feature subsets: TV Attributes: Read Write, Continuous (standard) VCP code 8D: Audio mute/Screen blank Mute/unmute audio, and (v2.2) screen blank MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: TV, AUDIO Attributes (v2.0): Read Write, Non-Continuous (simple) Attributes (v2.1): Read Write, Non-Continuous (simple) Attributes (v3.0): Read Write, Non-Continuous (simple) Attributes (v2.2): Read Write, Non-Continuous (complex) VCP code 8E: TV Contrast Increase/decrease the ratio between blacks and whites in the image MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: TV Attributes: Read Write, Continuous (standard) VCP code 8F: Audio Treble Emphasize/de-emphasize high frequency audio MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Audio ddcutil feature subsets: AUDIO Attributes (v2.0): Read Write, Continuous (standard) Attributes (v2.1): Read Write, Continuous (standard) Attributes (v3.0): Read Write, Non-Continuous (complex) Attributes (v2.2): Read Write, Non-Continuous (complex) VCP code 90: Hue Increase/decrease the wavelength of the color component of the video signal. AKA tint. Applies to currently active interface MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: COLOR, TV Attributes: Read Write, Continuous (standard) VCP code 91: Audio Bass Emphasize/de-emphasize low frequency audio MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Audio ddcutil feature subsets: AUDIO Attributes (v2.0): Read Write, Continuous (standard) Attributes (v2.1): Read Write, Continuous (standard) Attributes (v3.0): Read Write, Non-Continuous (complex) Attributes (v2.2): Read Write, Non-Continuous (complex) VCP code 92: TV Black level/Luminesence Increase/decrease the black level of the video MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: TV Attributes: Read Write, Continuous (standard) VCP code 93: Audio Balance L/R Controls left/right audio balance MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Audio ddcutil feature subsets: AUDIO Attributes (v2.0): Read Write, Continuous (standard) Attributes (v2.1): Read Write, Continuous (standard) Attributes (v3.0): Read Write, Non-Continuous (complex) Attributes (v2.2): Read Write, Non-Continuous (complex) VCP code 94: Audio Processor Mode Select audio mode MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Audio ddcutil feature subsets: TV, AUDIO Attributes: Read Write, Non-Continuous (simple) VCP code 95: Window Position(TL_X) Top left X pixel of an area of the image MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry, Window ddcutil feature subsets: WINDOW Attributes: Read Write, Continuous (standard) VCP code 96: Window Position(TL_Y) Top left Y pixel of an area of the image MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry, Window ddcutil feature subsets: WINDOW Attributes: Read Write, Continuous (standard) VCP code 97: Window Position(BR_X) Bottom right X pixel of an area of the image MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry, Window ddcutil feature subsets: WINDOW Attributes: Read Write, Continuous (standard) VCP code 98: Window Position(BR_Y) Bottom right Y pixel of an area of the image MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Geometry, Window ddcutil feature subsets: WINDOW Attributes: Read Write, Continuous (standard) VCP code 99: Window control on/off Enables the brightness and color within a window to be different from the desktop. MCCS versions: 2.0, 2.1, 2.2 MCCS specification groups: Window ddcutil feature subsets: WINDOW Attributes (v2.0): Read Write, Non-Continuous (simple) Attributes (v2.1): Read Write, Non-Continuous (simple) Attributes (v3.0): Deprecated Attributes (v2.2): Read Write, Non-Continuous (simple) VCP code 9A: Window background Changes the contrast ratio between the area of the window and the rest of the desktop MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Window ddcutil feature subsets: WINDOW Attributes: Read Write, Continuous (standard) VCP code 9B: 6 axis hue control: Red Decrease shifts toward magenta, increase shifts toward yellow MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Window ddcutil feature subsets: COLOR Attributes: Read Write, Continuous (standard) VCP code 9C: 6 axis hue control: Yellow Decrease shifts toward green, increase shifts toward red MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Window ddcutil feature subsets: COLOR Attributes: Read Write, Continuous (standard) VCP code 9D: 6 axis hue control: Green Decrease shifts toward yellow, increase shifts toward cyan MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Window ddcutil feature subsets: COLOR Attributes: Read Write, Continuous (standard) VCP code 9E: 6 axis hue control: Cyan Decrease shifts toward green, increase shifts toward blue MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Window ddcutil feature subsets: COLOR Attributes: Read Write, Continuous (standard) VCP code 9F: 6 axis hue control: Blue Decrease shifts toward cyan, increase shifts toward magenta MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Window ddcutil feature subsets: COLOR Attributes: Read Write, Continuous (standard) VCP code A0: 6 axis hue control: Magenta Decrease shifts toward blue, 127 no effect, increase shifts toward red MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Window ddcutil feature subsets: COLOR Attributes: Read Write, Continuous (standard) VCP code A2: Auto setup on/off Turn on/off an auto setup function MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: Attributes: Write Only, Non-Continuous (write-only) VCP code A4: Window mask control Turn selected window operation on/off, window mask MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: WINDOW Attributes (v2.0): Read Write, Non-Continuous (complex) Attributes (v2.1): Read Write, Non-Continuous (complex) Attributes (v3.0): Read Write, Table Attributes (v2.2): Read Write, Table VCP code A5: Change the selected window Change selected window (as defined by 95h..98h) MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Window ddcutil feature subsets: WINDOW Attributes: Read Write, Non-Continuous (simple) VCP code AA: Screen Orientation Indicates screen orientation MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Geometry ddcutil feature subsets: Attributes: Read Only, Non-Continuous (simple) VCP code AC: Horizontal frequency Horizontal sync signal frequency as determined by the display MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Only, Continuous (complex) VCP code AE: Vertical frequency Vertical sync signal frequency as determined by the display, in .01 hz MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Only, Continuous (complex) VCP code B0: Settings Store/restore the user saved values for the current mode. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Preset ddcutil feature subsets: Attributes: Write Only, Non-Continuous (write-only) VCP code B2: Flat panel sub-pixel layout LCD sub-pixel structure MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Only, Non-Continuous (simple) VCP code B4: Source Timing Mode Indicates timing mode being sent by host MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Control ddcutil feature subsets: Attributes (v2.1): Read Write, Non-Continuous (complex) Attributes (v3.0): Read Write, Table Attributes (v2.2): Read Write, Table VCP code B6: Display technology type Indicates the base technology type MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Only, Non-Continuous (simple) VCP code B7: Monitor status Video mode and status of a DPVL capable monitor MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: DPVL ddcutil feature subsets: DPVL Attributes: Read Only, Non-Continuous (complex) VCP code B8: Packet count Counter for DPVL packets received MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: DPVL ddcutil feature subsets: DPVL Attributes: Read Write, Continuous (complex) VCP code B9: Monitor X origin X origin of the monitor in the vertical screen MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: DPVL ddcutil feature subsets: DPVL Attributes: Read Write, Continuous (complex) VCP code BA: Monitor Y origin Y origin of the monitor in the vertical screen MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: DPVL ddcutil feature subsets: DPVL Attributes: Read Write, Continuous (complex) VCP code BB: Header error count Error counter for the DPVL header MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: DPVL ddcutil feature subsets: DPVL Attributes: Read Write, Continuous (complex) VCP code BC: Body CRC error count CRC error counter for the DPVL body MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: DPVL ddcutil feature subsets: DPVL Attributes: Read Write, Continuous (complex) VCP code BD: Client ID Assigned identification number for the monitor MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: DPVL ddcutil feature subsets: DPVL Attributes: Read Write, Continuous (complex) VCP code BE: Link control Indicates status of the DVI link MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: DPVL ddcutil feature subsets: DPVL Attributes: Read Write, Non-Continuous (complex) VCP code C0: Display usage time Active power on time in hours MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Only, Continuous (complex) VCP code C2: Display descriptor length Length in bytes of non-volatile storage in the display available for writing a display descriptor, max 256 MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Only, Continuous (standard) VCP code C3: Transmit display descriptor Reads (writes) a display descriptor from (to) non-volatile storage in the display. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Write, Table VCP code C4: Enable display of 'display descriptor' If enabled, the display descriptor shall be displayed when no video is being received. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Write, Non-Continuous (complex) VCP code C6: Application enable key A 2 byte value used to allow an application to only operate with known products. MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Only, Non-Continuous (complex) VCP code C8: Display controller type Mfg id of controller and 2 byte manufacturer-specific controller type MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Control, Miscellaneous ddcutil feature subsets: Attributes: Read Write, Non-Continuous (complex) VCP code C9: Display firmware level 2 byte firmware level MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Control, Miscellaneous ddcutil feature subsets: Attributes: Read Only, Non-Continuous (complex) VCP code CA: OSD/Button Control Sets and indicates the current operational state of OSD (and buttons in v2.2) MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Control, Miscellaneous ddcutil feature subsets: Attributes (v2.0): Read Write, Non-Continuous (simple) Attributes (v2.1): Read Write, Non-Continuous (simple) Attributes (v3.0): Read Write, Non-Continuous (simple) Attributes (v2.2): Read Write, Non-Continuous (complex) VCP code CC: OSD Language On Screen Display languge MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Control, Miscellaneous ddcutil feature subsets: Attributes: Read Write, Non-Continuous (simple) VCP code CD: Status Indicators Control up to 16 LED (or similar) indicators to indicate system status MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Write, Non-Continuous (complex) VCP code CE: Auxiliary display size Rows and characters/row of auxiliary display MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Only, Non-Continuous (complex) VCP code CF: Auxiliary display data Sets contents of auxiliary display device MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Write Only, Table VCP code D0: Output select Selects the active output MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes (v2.0): Read Write, Non-Continuous (simple) Attributes (v2.1): Read Write, Non-Continuous (simple) Attributes (v3.0): Read Write, Table Attributes (v2.2): Read Write, Non-Continuous (simple) VCP code D2: Asset Tag Read an Asset Tag to/from the display MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Write, Table VCP code D4: Stereo video mode Stereo video mode MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Miscellaneous ddcutil feature subsets: Attributes: Read Write, Non-Continuous (complex) VCP code D6: Power mode DPM and DPMS status MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Control, Miscellaneous ddcutil feature subsets: Attributes: Read Write, Non-Continuous (simple) VCP code D7: Auxiliary power output Controls an auxiliary power output from a display to a host device MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Write, Non-Continuous (simple) VCP code DA: Scan mode Controls scan characteristics (aka format) MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image, Geometry ddcutil feature subsets: CRT Attributes: Read Write, Non-Continuous (simple) VCP code DB: Image Mode Controls aspects of the displayed image (TV applications) MCCS versions: 2.1, 3.0, 2.2 MCCS specification groups: Control ddcutil feature subsets: TV Attributes: Read Write, Non-Continuous (simple) VCP code DC: Display Mode Type of application used on display MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Image ddcutil feature subsets: Attributes: Read Write, Non-Continuous (simple) VCP code DE: Scratch Pad Operation mode (2.0) or scratch pad (3.0/2.2) MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes (v2.0): Write Only, Non-Continuous (write-only) Attributes (v2.1): Read Write, Non-Continuous (complex) Attributes (v3.0): Read Write, Non-Continuous (complex) Attributes (v2.2): Read Write, Non-Continuous (complex) VCP code DF: VCP Version MCCS version MCCS versions: 2.0, 2.1, 3.0, 2.2 MCCS specification groups: Miscellaneous ddcutil feature subsets: Attributes: Read Only, Non-Continuous (complex)","title":"ddcutil vcpinfo"},{"location":"virtual_machines/","text":"Virtual Machines ddcutil can be built in a virtual machine. However, when using the built-in video drivers, loading i2_dev does not create /dev/i2c-* devices, either on VirtualBox or VMware. This is as expected, since DDC features affect the physical monitor, and the built-in virtualized video drivers do not implement I2C. However, ddcutil will work in a virtual machine if using a normal video device driver with PCI passthrough, so that the device driver is actually controlling a real monitor.","title":"Virtual Machines"},{"location":"virtual_machines/#virtual-machines","text":"ddcutil can be built in a virtual machine. However, when using the built-in video drivers, loading i2_dev does not create /dev/i2c-* devices, either on VirtualBox or VMware. This is as expected, since DDC features affect the physical monitor, and the built-in virtualized video drivers do not implement I2C. However, ddcutil will work in a virtual machine if using a normal video device driver with PCI passthrough, so that the device driver is actually controlling a real monitor.","title":"Virtual Machines"},{"location":"windows_programs/","text":"Windows Utilities for Monitor Control ClickmonDDC Nirsoft Control My Monitor EnTech softMCCS","title":"Windows Utilities for Monitor Control"},{"location":"windows_programs/#windows-utilities-for-monitor-control","text":"ClickmonDDC Nirsoft Control My Monitor EnTech softMCCS","title":"Windows Utilities for Monitor Control"}]}